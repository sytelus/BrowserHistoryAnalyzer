<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DundasWinChart</name>
    </assembly>
    <members>
        <member name="T:Dundas.Charting.WinControl.BorderSkinStyle">
            <summary>
            Styles of the borders skin
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.None">
            <summary>
            Border not used
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.Emboss">
            <summary>
            Emboss border
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.Raised">
            <summary>
            Raised border
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.Sunken">
            <summary>
            Sunken border
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.FrameThin1">
            <summary>
            Thin border with rounded corners
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.FrameThin2">
            <summary>
            Thin border with rounded top corners
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.FrameThin3">
            <summary>
            Thin border with square corners
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.FrameThin4">
            <summary>
            Thin border with square outside corners and rounded inside corners
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.FrameThin5">
            <summary>
            Thin border with rounded corners and screws
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.FrameThin6">
            <summary>
            Thin border with square inside corners and rounded outside corners
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.FrameTitle1">
            <summary>
            Border with rounded corners. Supports title text.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.FrameTitle2">
            <summary>
            Border with rounded top corners. Supports title text.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.FrameTitle3">
            <summary>
            Border with square corners. Supports title text.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.FrameTitle4">
            <summary>
            Border with rounded inside corners and square outside corners. Supports title text.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.FrameTitle5">
            <summary>
            Border with rounded corners and screws. Supports title text.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.FrameTitle6">
            <summary>
            Border with rounded outside corners and square inside corners. Supports title text.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.FrameTitle7">
            <summary>
            Border with rounded corners. No border on the right side. Supports title text.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BorderSkinStyle.FrameTitle8">
            <summary>
            Border with rounded corners on top and bottom sides only. Supports title text.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.BorderSkinAttributes">
            <summary>
            Drawing attributes of the 3D border skin.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.BorderSkinAttributes.#ctor">
            <summary>
            Default public constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.BorderSkinAttributes.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Constructor.
            </summary>
            <param name="container">Service container.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.BorderSkinAttributes.Invalidate">
            <summary>
            Invalidate chart border when one of the border skin attributes is changed
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.BorderSkinAttributes.PageColor">
            <summary>
            Border skin page color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.BorderSkinAttributes.SkinStyle">
            <summary>
            Skin border style.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.BorderSkinAttributes.FrameBackColor">
            <summary>
            Skin frame back ground color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.BorderSkinAttributes.FrameBorderColor">
            <summary>
            Skin frame border color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.BorderSkinAttributes.FrameBackHatchStyle">
            <summary>
            Skin frame back hatch style.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.BorderSkinAttributes.FrameBackImage">
            <summary>
            Skin frame background image.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.BorderSkinAttributes.FrameBackImageMode">
            <summary>
            Skin frame background image drawing mode.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.BorderSkinAttributes.FrameBackImageTranspColor">
            <summary>
            Skin frame background image transparent color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.BorderSkinAttributes.FrameBackImageAlign">
            <summary>
            Skin frame background image alignment used by ClampUnscale drawing mode.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.BorderSkinAttributes.FrameBackGradientType">
            <summary>
            Skin frame background gradient type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.BorderSkinAttributes.FrameBackGradientEndColor">
            <summary>
            Skin frame second back color which is used for a gradient and hatching.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.BorderSkinAttributes.FrameBorderWidth">
            <summary>
            Skin frame border line width.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.BorderSkinAttributes.FrameBorderStyle">
            <summary>
            Skin frame border line style.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.BorderTypeRegistry">
            <summary>
            Keep track of all registered 3D borders.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.BorderTypeRegistry.#ctor">
            <summary>
            Default private constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.BorderTypeRegistry.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Border types registry public constructor
            </summary>
            <param name="container">Service container.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.BorderTypeRegistry.GetService(System.Type)">
            <summary>
            Returns border type registry service object
            </summary>
            <param name="serviceType">Servise type to get.</param>
            <returns>Border registry service.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.BorderTypeRegistry.Register(System.String,System.Type)">
            <summary>
            Adds 3D border type into the registry.
            </summary>
            <param name="name">Border type name.</param>
            <param name="borderType">Border class type.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.BorderTypeRegistry.GetBorderType(System.String)">
            <summary>
            Returns border type object by name.
            </summary>
            <param name="name">Border type name.</param>
            <returns>Border type object derived from IBorderType.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.BorderTypeRegistry.ResourceManager">
            <summary>
            Border images resource manager.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.IBorderType">
            <summary>
            Inteface, which defines the set of standart methods and
            properties for each border type.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.IBorderType.DrawBorder(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.BorderSkinAttributes,System.Drawing.RectangleF,System.Drawing.Color,Dundas.Charting.WinControl.ChartHatchStyle,System.String,Dundas.Charting.WinControl.ChartImageWrapMode,System.Drawing.Color,Dundas.Charting.WinControl.ChartImageAlign,Dundas.Charting.WinControl.GradientType,System.Drawing.Color,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle)">
            <summary>
            Draws 3D border.
            </summary>
            <param name="graph">Graphics to darw the border on.</param>
            <param name="borderSkin">Border skin object.</param>
            <param name="rect">Rectangle of the border.</param>
            <param name="backColor">Color of rectangle.</param>
            <param name="backHatchStyle">Hatch style.</param>
            <param name="backImage">Back Image.</param>
            <param name="backImageMode">Image mode.</param>
            <param name="backImageTranspColor">Image transparent color.</param>
            <param name="backImageAlign">Image alignment.</param>
            <param name="backGradientType">Gradient type.</param>
            <param name="backGradientEndColor">Gradient End Color.</param>
            <param name="borderColor">Border Color.</param>
            <param name="borderWidth">Border Width.</param>
            <param name="borderStyle">Border Style.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.IBorderType.AdjustAreasPosition(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.RectangleF@)">
            <summary>
            Adjust areas rectangle coordinate to fit the 3D border.
            </summary>
            <param name="graph">Graphics to darw the border on.</param>
            <param name="areasRect">Position to adjust.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.IBorderType.GetTitlePositionInBorder">
            <summary>
            Returns the position of the rectangular area in the border where
            title should be displayed. Returns empty rect if title can't be shown in the border.
            </summary>
            <returns>Title position in border.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.IBorderType.Name">
            <summary>
            Border type name.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.FrameTitle1Border">
            <summary>
            Implements frame border.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.FrameThin1Border">
            <summary>
            Implements frame border.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.RaisedBorder">
            <summary>
            Implements raised border.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.SunkenBorder">
            <summary>
            Implements embed 3D border.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Borders3D.SunkenBorder.defaultRadiusSize">
            <summary>
            Radius for rounded rectangle
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Borders3D.SunkenBorder.outsideShadowRate">
            <summary>
            Outside shadow rate
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Borders3D.SunkenBorder.sunken">
            <summary>
            Indicates that sunken shadows should be drawn
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Borders3D.SunkenBorder.drawBottomShadow">
            <summary>
            Indicates that bottom shadow should be drawn
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Borders3D.SunkenBorder.drawOutsideTopLeftShadow">
            <summary>
            Indicates that top left outside dark shadow must be drawn
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Borders3D.SunkenBorder.cornerRadius">
            <summary>
            Array of corner radius
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Borders3D.SunkenBorder.sizeLeftTop">
            <summary>
            Border top/left size 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Borders3D.SunkenBorder.sizeRightBottom">
            <summary>
            Border right/bottom size
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Borders3D.SunkenBorder.drawScrews">
            <summary>
            Indicates that screws should be drawn in the corners of the frame
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.SunkenBorder.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.SunkenBorder.GetTitlePositionInBorder">
            <summary>
            Returns the position of the rectangular area in the border where
            title should be displayed. Returns empty rect if title can't be shown in the border.
            </summary>
            <returns>Title position in border.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.SunkenBorder.AdjustAreasPosition(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.RectangleF@)">
            <summary>
            Adjust areas rectangle coordinate to fit the 3D border
            </summary>
            <param name="graph">Graphics to darw the border on.</param>
            <param name="areasRect">Position to adjust.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.SunkenBorder.DrawBorder(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.BorderSkinAttributes,System.Drawing.RectangleF,System.Drawing.Color,Dundas.Charting.WinControl.ChartHatchStyle,System.String,Dundas.Charting.WinControl.ChartImageWrapMode,System.Drawing.Color,Dundas.Charting.WinControl.ChartImageAlign,Dundas.Charting.WinControl.GradientType,System.Drawing.Color,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle)">
            <summary>
            Draws 3D border
            </summary>
            <param name="graph">Graphics to darw the border on.</param>
            <param name="borderSkin">Border skin object.</param>
            <param name="rect">Rectangle of the border.</param>
            <param name="backColor">Color of rectangle</param>
            <param name="backHatchStyle">Hatch style</param>
            <param name="backImage">Back Image</param>
            <param name="backImageMode">Image mode</param>
            <param name="backImageTranspColor">Image transparent color.</param>
            <param name="backImageAlign">Image alignment</param>
            <param name="backGradientType">Gradient type</param>
            <param name="backGradientEndColor">Gradient End Color</param>
            <param name="borderColor">Border Color</param>
            <param name="borderWidth">Border Width</param>
            <param name="borderStyle">Border Style</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.SunkenBorder.DrawScrew(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.RectangleF)">
            <summary>
            Helper function, which draws a screw on the frame
            </summary>
            <param name="graph">Chart graphics to use.</param>
            <param name="rect">Screw position.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.SunkenBorder.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.RaisedBorder.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.RaisedBorder.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Borders3D.FrameThin1Border.innerCorners">
            <summary>
            Inner corners radius array
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameThin1Border.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameThin1Border.DrawBorder(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.BorderSkinAttributes,System.Drawing.RectangleF,System.Drawing.Color,Dundas.Charting.WinControl.ChartHatchStyle,System.String,Dundas.Charting.WinControl.ChartImageWrapMode,System.Drawing.Color,Dundas.Charting.WinControl.ChartImageAlign,Dundas.Charting.WinControl.GradientType,System.Drawing.Color,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle)">
            <summary>
            Draws 3D border.
            </summary>
            <param name="graph">Graphics to darw the border on.</param>
            <param name="borderSkin">Border skin object.</param>
            <param name="rect">Rectangle of the border.</param>
            <param name="backColor">Color of rectangle</param>
            <param name="backHatchStyle">Hatch style</param>
            <param name="backImage">Back Image</param>
            <param name="backImageMode">Image mode</param>
            <param name="backImageTranspColor">Image transparent color.</param>
            <param name="backImageAlign">Image alignment</param>
            <param name="backGradientType">Gradient type</param>
            <param name="backGradientEndColor">Gradient End Color</param>
            <param name="borderColor">Border Color</param>
            <param name="borderWidth">Border Width</param>
            <param name="borderStyle">Border Style</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.FrameThin1Border.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameTitle1Border.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameTitle1Border.GetTitlePositionInBorder">
            <summary>
            Returns the position of the rectangular area in the border where
            title should be displayed. Returns empty rect if title can't be shown in the border.
            </summary>
            <returns>Title position in border.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.FrameTitle1Border.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.FrameTitle2Border">
            <summary>
            Implements frame border.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.FrameThin2Border">
            <summary>
            Implements frame border.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameThin2Border.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.FrameThin2Border.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameTitle2Border.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameTitle2Border.GetTitlePositionInBorder">
            <summary>
            Returns the position of the rectangular area in the border where
            title should be displayed. Returns empty rect if title can't be shown in the border.
            </summary>
            <returns>Title position in border.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.FrameTitle2Border.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.FrameTitle3Border">
            <summary>
            Implements frame border.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.FrameThin3Border">
            <summary>
            Implements frame border.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameThin3Border.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.FrameThin3Border.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameTitle3Border.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameTitle3Border.GetTitlePositionInBorder">
            <summary>
            Returns the position of the rectangular area in the border where
            title should be displayed. Returns empty rect if title can't be shown in the border.
            </summary>
            <returns>Title position in border.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.FrameTitle3Border.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.FrameTitle4Border">
            <summary>
            Implements frame border.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.FrameThin4Border">
            <summary>
            Implements frame border.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameThin4Border.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.FrameThin4Border.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameTitle4Border.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameTitle4Border.GetTitlePositionInBorder">
            <summary>
            Returns the position of the rectangular area in the border where
            title should be displayed. Returns empty rect if title can't be shown in the border.
            </summary>
            <returns>Title position in border.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.FrameTitle4Border.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.FrameTitle5Border">
            <summary>
            Implements frame border.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.FrameThin5Border">
            <summary>
            Implements frame border.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameThin5Border.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.FrameThin5Border.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameTitle5Border.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameTitle5Border.GetTitlePositionInBorder">
            <summary>
            Returns the position of the rectangular area in the border where
            title should be displayed. Returns empty rect if title can't be shown in the border.
            </summary>
            <returns>Title position in border.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.FrameTitle5Border.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.FrameTitle6Border">
            <summary>
            Implements frame border.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.FrameThin6Border">
            <summary>
            Implements frame border.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameThin6Border.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.FrameThin6Border.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameTitle6Border.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameTitle6Border.GetTitlePositionInBorder">
            <summary>
            Returns the position of the rectangular area in the border where
            title should be displayed. Returns empty rect if title can't be shown in the border.
            </summary>
            <returns>Title position in border.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.FrameTitle6Border.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.FrameTitle7Border">
            <summary>
            Implements frame border.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameTitle7Border.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.FrameTitle7Border.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.FrameTitle8Border">
            <summary>
            Implements frame border.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.FrameTitle8Border.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.FrameTitle8Border.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Borders3D.EmbossBorder">
            <summary>
            Implements emboss 3D border.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Borders3D.EmbossBorder.defaultRadiusSize">
            <summary>
            Default border radius size (relative)
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Borders3D.EmbossBorder.cornerRadius">
            <summary>
            Array of corner raduis
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.EmbossBorder.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.EmbossBorder.GetTitlePositionInBorder">
            <summary>
            Returns the position of the rectangular area in the border where
            title should be displayed. Returns empty rect if title can't be shown in the border.
            </summary>
            <returns>Title position in border.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.EmbossBorder.AdjustAreasPosition(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.RectangleF@)">
            <summary>
            Adjust areas rectangle coordinate to fit the 3D border.
            </summary>
            <param name="graph">Graphics to darw the border on.</param>
            <param name="areasRect">Position to adjust.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Borders3D.EmbossBorder.DrawBorder(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.BorderSkinAttributes,System.Drawing.RectangleF,System.Drawing.Color,Dundas.Charting.WinControl.ChartHatchStyle,System.String,Dundas.Charting.WinControl.ChartImageWrapMode,System.Drawing.Color,Dundas.Charting.WinControl.ChartImageAlign,Dundas.Charting.WinControl.GradientType,System.Drawing.Color,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle)">
            <summary>
            Draws 3D border.
            </summary>
            <param name="graph">Graphics to darw the border on.</param>
            <param name="borderSkin">Border skin object.</param>
            <param name="rect">Rectangle of the border.</param>
            <param name="backColor">Color of rectangle</param>
            <param name="backHatchStyle">Hatch style</param>
            <param name="backImage">Back Image</param>
            <param name="backImageMode">Image mode</param>
            <param name="backImageTranspColor">Image transparent color.</param>
            <param name="backImageAlign">Image alignment</param>
            <param name="backGradientType">Gradient type</param>
            <param name="backGradientEndColor">Gradient End Color</param>
            <param name="borderColor">Border Color</param>
            <param name="borderWidth">Border Width</param>
            <param name="borderStyle">Border Style</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.Borders3D.EmbossBorder.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.SplineAreaChart">
            <summary>
            Spline area chart
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.AreaChart">
            <summary>
            Area chart class
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.SplineChart">
            <summary>
            Spline chart.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.LineChart">
            <summary>
            Line chart
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.PointChart">
            <summary>
            Point Chart type.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.IChartType">
            <summary>
            Inteface, which defines the set of standart methods and
            properties for each chart type.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.IChartType.Paint(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series)">
            <summary>
            Draw chart on specified chart graphics.
            </summary>
            <param name="graph">Chart grahhics object.</param>
            <param name="common">Common elements.</param>
            <param name="area">Chart area to draw on.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.IChartType.Select(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            Function, which returns selected data point and 
            selected series from x, and y coordinate position.
            </summary>
            <param name="graph">Chart grahhics object.</param>
            <param name="common">The Common elements object</param>
            <param name="area">Chart area for this chart</param>
            <param name="x">x coordinate position</param>
            <param name="y">y coordinate position</param>
            <param name="selSeries">Selected data series</param>
            <param name="selPoint">Selected data point</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.IChartType.GetYValue(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series,Dundas.Charting.WinControl.DataPoint,System.Int32,System.Int32)">
            <summary>
            Helper function, which returns the Y value of the data point.
            </summary>
            <param name="common">Chart common elements.</param>
            <param name="area">Chart area the series belongs to.</param>
            <param name="series">Sereis of the point.</param>
            <param name="point">Point object.</param>
            <param name="pointIndex">Index of the point.</param>
            <param name="yValueIndex">Index of the Y value to get.</param>
            <returns>Y value of the point.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.IChartType.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.IChartType.Image">
            <summary>
            Chart type image
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.IChartType.Stacked">
            <summary>
            True if chart type is stacked
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.IChartType.StackSign">
            <summary>
            True if stacked chart type should draw separately positive and 
            negative data points ( Bar and column Stacked types ).
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.IChartType.RequireAxes">
            <summary>
            True if chart type supports axeses
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.IChartType.SupportLogarithmicAxes">
            <summary>
            True if chart type supports logarithmic axes
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.IChartType.SwitchValueAxes">
            <summary>
            True if chart type requires to switch the value (Y) axes position
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.IChartType.SideBySideSeries">
            <summary>
            True if chart series can be placed side-by-side.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.IChartType.DataPointsInLegend">
            <summary>
            True if each data point of a chart must be represented in the legend
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.IChartType.ApplyPaletteColorsToPoints">
            <summary>
            True if palette colors should be applied for each data paoint.
            Otherwise the color is applied to the series.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.IChartType.ExtraYValuesConnectedToYAxis">
            <summary>
            Indicates that extra Y values are connected to the scale of the Y axis
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.IChartType.LegendImageStyle">
            <summary>
            How to draw series/points in legend:
            Filled rectangle, Line, Marker
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.IChartType.ZeroCrossing">
            <summary>
            If the crossing value is auto Crossing value should be 
            automatically set to zero for some chart 
            types (Bar, column, area etc.)
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.IChartType.YValuesPerPoint">
            <summary>
            Number of supported Y value(s) per point 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.IChartType.HundredPercent">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.IChartType.HundredPercentSupportNegative">
            <summary>
            Indicates that negative 100% stacked values are shown on
            the other side of the X axis
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PointChart.alwaysDrawMarkers">
            <summary>
            Indicates that markers will be always drawn
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PointChart.yValueIndex">
            <summary>
            Index of the Y value used to draw chart
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PointChart.labelYValueIndex">
            <summary>
            Index of the Y value used to be shown as point value label
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PointChart.autoLabelPosition">
            <summary>
            Auto label position flag
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PointChart.labelPosition">
            <summary>
            Label position
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PointChart.vAxis">
            <summary>
            Vertical axes
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PointChart.hAxis">
            <summary>
            Horizontal axes
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PointChart.indexedSeries">
            <summary>
            Indexed series flag
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PointChart.common">
            <summary>
            Common elements object
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PointChart.area">
            <summary>
            Chart area object
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PointChart.middleMarker">
            <summary>
            Indicates that marker and label are drawn in the middle of 3D depth
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PointChart.#ctor">
            <summary>
            Class public constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PointChart.#ctor(System.Boolean)">
            <summary>
            Class public constructor.
            </summary>
            <param name="alwaysDrawMarkers">Indicates if markers should be always painted.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PointChart.Paint(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series)">
            <summary>
            Paint Point Chart.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PointChart.Select(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            Gets information, such as series and data point index of a point on the chart.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PointChart.ProcessChartType(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            This method recalculates size of the bars. This method is used 
            from Paint or Select method.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PointChart.DrawLabels(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,System.Drawing.PointF,System.Int32,Dundas.Charting.WinControl.DataPoint,Dundas.Charting.WinControl.Series,System.Int32)">
            <summary>
            This method draws labels in point chart.
            </summary>
            <param name="graph">The Chart Graphics object</param>
            <param name="common">The Common elements object</param>
            <param name="area">Chart area for this chart</param>
            <param name="markerPosition">Marker position</param>
            <param name="markerSize">Marker size</param>
            <param name="point">Data point</param>
            <param name="ser">Data series</param>
            <param name="pointIndex">Data point index.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PointChart.ProcessChartType3D(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            This method recalculates size of the point marker. This method is used 
            from Paint or Select method.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PointChart.ProcessSinglePoint3D(Dundas.Charting.WinControl.DataPoint3D,System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@)">
            <summary>
            Draws\Hit tests single 3D point.
            </summary>
            <param name="pointEx">3D point information.</param>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PointChart.ShouldDrawMarkerOnViewEdgeX">
            <summary>
            Indicates that markers are drawnd on the X edge of the data view.
            </summary>
            <returns>True. Point chart always draws markers on the edge.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PointChart.GetMarkerBorderSize(Dundas.Charting.WinControl.DataPoint)">
            <summary>
            Gets marker border size.
            </summary>
            <param name="point">Data point.</param>
            <returns>Marker border size.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PointChart.GetAutoLabelPosition(Dundas.Charting.WinControl.Series,System.Int32)">
            <summary>
            Gets label position. For point chart this function always returns 'Top'.
            </summary>
            <param name="series">Series.</param>
            <param name="pointIndex">Data point index in series.</param>
            <returns>Return automaticly detected label position.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PointChart.GetMarkerSize(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.DataPoint,System.Int32,System.String)">
            <summary>
            Returns marker size.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="point">Data point.</param>
            <param name="markerSize">Marker size.</param>
            <param name="markerImage">Marker image.</param>
            <returns>Marker width and height.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PointChart.GetYValue(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series,Dundas.Charting.WinControl.DataPoint,System.Int32,System.Int32)">
            <summary>
            Helper function, which returns the Y value of the point.
            </summary>
            <param name="common">Chart common elements.</param>
            <param name="area">Chart area the series belongs to.</param>
            <param name="series">Sereis of the point.</param>
            <param name="point">Point object.</param>
            <param name="pointIndex">Index of the point.</param>
            <param name="yValueIndex">Index of the Y value to get.</param>
            <returns>Y value of the point.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.Stacked">
            <summary>
            True if chart type is stacked
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.StackSign">
            <summary>
            True if stacked chart type should draw separately positive and 
            negative data points ( Bar and column Stacked types ).
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.RequireAxes">
            <summary>
            True if chart type supports axeses
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.SupportLogarithmicAxes">
            <summary>
            True if chart type supports logarithmic axes
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.SwitchValueAxes">
            <summary>
            True if chart type requires to switch the value (Y) axes position
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.SideBySideSeries">
            <summary>
            True if chart series can be placed side-by-side.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.DataPointsInLegend">
            <summary>
            True if each data point of a chart must be represented in the legend
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.ZeroCrossing">
            <summary>
            If the crossing value is auto Crossing value should be 
            automatically set to zero for some chart 
            types (Bar, column, area etc.)
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.ApplyPaletteColorsToPoints">
            <summary>
            True if palette colors should be applied for each data paoint.
            Otherwise the color is applied to the series.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.ExtraYValuesConnectedToYAxis">
            <summary>
            Indicates that extra Y values are connected to the scale of the Y axis
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.HundredPercent">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.HundredPercentSupportNegative">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.LegendImageStyle">
            <summary>
            How to draw series/points in legend:
            Filled rectangle, Line, Marker
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.YValuesPerPoint">
            <summary>
            Number of supported Y value(s) per point 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.Image">
            <summary>
            Chart type image. Used in designer to set 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.ShiftedX">
            <summary>
            Labels and markers have to be shifted if there 
            is more than one series for column chart.
            NOT USED IN POINT CHART.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PointChart.ShiftedSerName">
            <summary>
            Labels and markers have to be shifted if there 
            is more than one series for column chart. This property 
            will give a name of the series, which is used, for 
            labels and markers.
            NOT USED IN POINT CHART.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.LineChart.lineTension">
            <summary>
            Line tension
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.LineChart.centerPointIndex">
            <summary>
            Index of the drawing center point. int.MaxValue if drawn from left->right or right->left.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.LineChart.useBorderColor">
            <summary>
            Inicates that border color attribute must be used to draw the line
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.LineChart.disableShadow">
            <summary>
            Inicates that line shadow should not be drawn
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.LineChart.drawShadowOnly">
            <summary>
            Inicates that only line shadow must be drawn
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.LineChart.hAxisMin">
            <summary>
            Horizontal axis minimum value
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.LineChart.hAxisMax">
            <summary>
            Horizontal axis maximum value
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.LineChart.vAxisMin">
            <summary>
            Vertical axis minimum value
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.LineChart.vAxisMax">
            <summary>
            Vertical axis maximum value
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.LineChart.clipRegionSet">
            <summary>
            Clip region indicator
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.LineChart.multiSeries">
            <summary>
            Indicates that several series are drawn at the same time. Stacked or Side-by-side.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.LineChart.COPCoordinatesToCheck">
            <summary>
            Indicates which coordinates should be tested against the COP.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.LineChart.allPointsLoopsNumber">
            <summary>
            Number of data points loops required to draw chart.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.LineChart.showPointLines">
            <summary>
            Indicates that line markers are shown at data point.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.LineChart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.LineChart.Paint(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series)">
            <summary>
            Paint Line Chart.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this char.t</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.LineChart.Select(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            Gets information, such as series and data point index of a point on the chart.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.LineChart.ProcessChartType(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            Draws or perform the hit test for the line chart.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.LineChart.DrawLine(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.DataPoint,Dundas.Charting.WinControl.Series,System.Drawing.PointF[],System.Int32,System.Single)">
            <summary>
            Calculate position and draw one chart line and/or shadow.
            </summary>
            <param name="graph">Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="point">Point to draw the line for.</param>
            <param name="series">Point series.</param>
            <param name="points">Array of oints coordinates.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="tension">Line tension.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.LineChart.DrawLine(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.DataPoint,Dundas.Charting.WinControl.Series,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draw chart line.
            </summary>
            <param name="graph">Graphics object.</param>
            <param name="point">Point to draw the line for.</param>
            <param name="series">Point series.</param>
            <param name="firstPoint">First line point.</param>
            <param name="secondPoint">Seconf line point.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.LineChart.SelectLine(Dundas.Charting.WinControl.ChartGraphics,System.Int32,System.Drawing.PointF[],System.Int32,System.Double,System.Double,System.Single)">
            <summary>
            This method recalculates whether selected position is close to a line or curved line.
            </summary>
            <param name="graph">Chart Graphics.</param>
            <param name="borderWidth">Width of the line.</param>
            <param name="points">Array of oints coordinates.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="x">Selected x absolute pixel position.</param>
            <param name="y">Selected y absolute pixel position.</param>
            <param name="tension">Line tension.</param>
            <returns>True if line is selected.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.LineChart.SelectLine(Dundas.Charting.WinControl.ChartGraphics,System.Int32,System.Drawing.PointF,System.Drawing.PointF,System.Double,System.Double)">
            <summary>
            This method recalculates whether selected position is close to a line (non curved).
            </summary>
            <param name="graph">Chart Graphics</param>
            <param name="borderWidth">Width of the line</param>
            <param name="firstPoint">First point od a line</param>
            <param name="secondPoint">Second - End point of a line</param>
            <param name="x">Selected x absolute pixel position</param>
            <param name="y">Selected y absolute pixel position</param>
            <returns>True if line is selected</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.LineChart.GetDefaultTension">
            <summary>
            Gets default line tension.
            </summary>
            <returns>Default line tension.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.LineChart.GetAutoLabelPosition(Dundas.Charting.WinControl.Series,System.Int32)">
            <summary>
            Gets label position depending on the prev/next point values.
            This method will reduce label overlapping with the chart itself (line).
            </summary>
            <param name="series">Data series.</param>
            <param name="pointIndex">Point index.</param>
            <returns>Return automaticly detected label position.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.LineChart.GetPointsPosition(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.Series,System.Boolean)">
            <summary>
            Fills a PointF array of data points absolute pixel positions.
            </summary>
            <param name="graph">Graphics object.</param>
            <param name="series">Point series.</param>
            <param name="indexedSeries">Indicate that point index should be used as X value.</param>
            <returns>Array of data points position.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.LineChart.ProcessLineChartType3D(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            Draws or perform the hit test for the line chart in 3D.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.LineChart.Draw3DSurface(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.Matrix3D,Dundas.Charting.WinControl.LightStyle,Dundas.Charting.WinControl.DataPoint3D,System.Single,System.Single,System.Collections.ArrayList,System.Int32,System.Int32,System.Single,Dundas.Charting.WinControl.DrawingOperationType)">
            <summary>
            Draws a 3D surface connecting the two specified points in 2D space.
            Used to draw Line based charts.
            </summary>
            <param name="area">Chart area reference.</param>
            <param name="graph">Chart graphics.</param>
            <param name="matrix">Coordinates transformation matrix.</param>
            <param name="lightStyle">Light style (None, Simplistic, Realistic).</param>
            <param name="prevDataPointEx">Previous data point object.</param>
            <param name="positionZ">Z position of the back side of the 3D surface.</param>
            <param name="depth">Depth of the 3D surface.</param>
            <param name="points">Array of points.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="pointLoopIndex">Index of points loop.</param>
            <param name="tension">Line tension.</param>
            <param name="operationType">Type of operation Drawing, Calculating Path or Both</param>
            <returns>Returns elemnt shape path if operationType parameter is set to CalcElementPath, otherwise Null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.LineChart.GetCenterPointIndex(System.Collections.ArrayList)">
            <summary>
            Gets index of center point.
            </summary>
            <param name="points">Points list.</param>
            <returns>Index of center point or int.MaxValue.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.LineChart.GetPointLoopNumber(System.Boolean,System.Collections.ArrayList)">
            <summary>
            Returns how many loops through all data points is required (1 or 2)
            </summary>
            <param name="selection">Selection indicator.</param>
            <param name="pointsArray">Points array list.</param>
            <returns>Number of loops (1 or 2).</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.LineChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.LineChart.Image">
            <summary>
            Chart type image. Used in designer to set 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.LineChart.Stacked">
            <summary>
            True if chart type is stacked
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.LineChart.RequireAxes">
            <summary>
            True if chart type supports axeses
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.LineChart.SupportLogarithmicAxes">
            <summary>
            True if chart type supports logarithmic axes
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.LineChart.SwitchValueAxes">
            <summary>
            True if chart type requires to switch the value (Y) axes position
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.LineChart.SideBySideSeries">
            <summary>
            True if chart series can be placed side-by-side.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.LineChart.ZeroCrossing">
            <summary>
            If the crossing value is auto Crossing value should be 
            automatically set to zero for some chart 
            types (Bar, column, area etc.)
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.LineChart.DataPointsInLegend">
            <summary>
            True if each data point of a chart must be represented in the legend
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.LineChart.ApplyPaletteColorsToPoints">
            <summary>
            True if palette colors should be applied for each data paoint.
            Otherwise the color is applied to the series.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.LineChart.LegendImageStyle">
            <summary>
            How to draw series/points in legend:
            Filled rectangle, Line, Marker
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.LineChart.YValuesPerPoint">
            <summary>
            Number of supported Y value(s) per point 
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.SplineChart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.SplineChart.GetPointsPosition(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.Series,System.Boolean)">
            <summary>
            Fills a PointF array of data points positions.
            </summary>
            <param name="graph">Graphics object.</param>
            <param name="series">Point series.</param>
            <param name="indexedSeries">Indicate that point index should be used as X value.</param>
            <returns>Array of data points position.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.SplineChart.GetDefaultTension">
            <summary>
            Gets default line tension.
            </summary>
            <returns>Default line tension.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.SplineChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.SplineChart.Image">
            <summary>
            Chart type image. Used in designer to set 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.AreaChart.gradientFill">
            <summary>
            Fields used to fill area with gradient
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.AreaChart.areaPath">
            <summary>
            Coordinates of the area path
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.AreaChart.series">
            <summary>
            Reference to the current series object
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.AreaChart.axisPos">
            <summary>
            Horizontal axis position
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.AreaChart.#ctor">
            <summary>
            Area chart constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.AreaChart.GetDefaultTension">
            <summary>
            Gets default line tension.
            </summary>
            <returns>Line tension.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.AreaChart.ProcessChartType(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            This method recalculates position of the end points of lines. This method 
            is used from Paint or Select method.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.AreaChart.DrawLine(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.DataPoint,Dundas.Charting.WinControl.Series,System.Drawing.PointF[],System.Int32,System.Single)">
            <summary>
            This method is overriden to fill the area and draw border line.
            </summary>
            <param name="graph">Graphics object.</param>
            <param name="common">The Common elements object</param>
            <param name="point">Point to draw the line for.</param>
            <param name="series">Point series.</param>
            <param name="points">Array of oints coordinates.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="tension">Line tension</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.AreaChart.SelectLine(Dundas.Charting.WinControl.ChartGraphics,System.Int32,System.Drawing.PointF[],System.Int32,System.Double,System.Double,System.Single)">
            <summary>
            Gets information, such as series and data point index of a point on the chart.
            </summary>
            <param name="graph">Chart Graphics.</param>
            <param name="borderWidth">Width of the line.</param>
            <param name="points">Array of oints coordinates.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="x">Selected x absolute pixel position.</param>
            <param name="y">Selected y absolute pixel position.</param>
            <param name="tension">Line tension.</param>
            <returns>True if line is selected.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.AreaChart.FillLastSeriesGradient(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Fills last series area with gradient.
            </summary>
            <param name="graph">The Chart Graphics object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.AreaChart.Draw3DSurface(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.Matrix3D,Dundas.Charting.WinControl.LightStyle,Dundas.Charting.WinControl.DataPoint3D,System.Single,System.Single,System.Collections.ArrayList,System.Int32,System.Int32,System.Single,Dundas.Charting.WinControl.DrawingOperationType)">
            <summary>
            Draws a 3D surface connecting the two specified points in 2D space.
            Used to draw Line based charts.
            </summary>
            <param name="area">Chart area reference.</param>
            <param name="graph">Chart graphics.</param>
            <param name="matrix">Coordinates transformation matrix.</param>
            <param name="lightStyle">Light style (None, Simplistic, Realistic).</param>
            <param name="prevDataPointEx">Previous data point object.</param>
            <param name="positionZ">Z position of the back side of the 3D surface.</param>
            <param name="depth">Depth of the 3D surface.</param>
            <param name="points">Array of points.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="pointLoopIndex">Index of points loop.</param>
            <param name="tension">Line tension.</param>
            <param name="operationType">Type of operation Drawing, Calculating Path or Both</param>
            <returns>Returns elemnt shape path if operationType parameter is set to CalcElementPath, otherwise Null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.AreaChart.Draw3DSurface(Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.DataPoint3D,System.Boolean,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.Matrix3D,Dundas.Charting.WinControl.LightStyle,Dundas.Charting.WinControl.DataPoint3D,System.Single,System.Single,System.Collections.ArrayList,System.Int32,System.Int32,System.Single,Dundas.Charting.WinControl.DrawingOperationType,Dundas.Charting.WinControl.LineSegmentType)">
            <summary>
            Draws a 3D surface connecting the two specified points in 2D space.
            Used to draw Line based charts.
            </summary>
            <param name="firstPoint">First data point.</param>
            <param name="secondPoint">Second data point.</param>
            <param name="reversed">Points are in reverse order.</param>
            <param name="area">Chart area reference.</param>
            <param name="graph">Chart graphics.</param>
            <param name="matrix">Coordinates transformation matrix.</param>
            <param name="lightStyle">Light style (None, Simplistic, Realistic).</param>
            <param name="prevDataPointEx">Previous data point object.</param>
            <param name="positionZ">Z position of the back side of the 3D surface.</param>
            <param name="depth">Depth of the 3D surface.</param>
            <param name="points">Array of points.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="pointLoopIndex">Index of points loop.</param>
            <param name="tension">Line tension.</param>
            <param name="operationType">Type of operation Drawing, Calculating Path or Both</param>
            <param name="surfaceSegmentType">Define surface segment type if it consists of several segments.</param>
            <returns>Returns elemnt shape path if operationType parameter is set to CalcElementPath, otherwise Null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.AreaChart.GetTopSurfaceVisibility(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.DataPoint3D,System.Boolean,System.Single,System.Single,Dundas.Charting.WinControl.Matrix3D,Dundas.Charting.WinControl.SurfaceName@)">
            <summary>
            Gets visibility of the top surface.
            </summary>
            <param name="area">Chart area object.</param>
            <param name="firstPoint">First data point of the line.</param>
            <param name="secondPoint">Second data point of the line.</param>
            <param name="upSideDown">Indicates that Y values of the data points are below axis line.</param>
            <param name="positionZ">Z coordinate of the back side of the cube.</param>
            <param name="depth">Cube depth.</param>
            <param name="matrix">Coordinate transformation matrix.</param>
            <param name="visibleSurfaces">Surface visibility reference. Initialized with bounary cube visibility.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.AreaChart.GetAxisIntersection(Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.DataPoint3D,System.Single)">
            <summary>
            Gets intersection point coordinates between point line and axis line.
            </summary>
            <param name="firstPoint">First data point.</param>
            <param name="secondPoint">Second data point.</param>
            <param name="axisPosition">Axis line position.</param>
            <returns>Intersection point coordinates.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.AreaChart.GetBottomPointsPosition(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Single,Dundas.Charting.WinControl.DataPoint3D@,Dundas.Charting.WinControl.DataPoint3D@,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            Gets position ob the bottom points in area chart.
            </summary>
            <param name="common">Chart common elements.</param>
            <param name="area">Chart area the series belongs to.</param>
            <param name="axisPosition">Axis position.</param>
            <param name="firstPoint">First top point coordinates.</param>
            <param name="secondPoint">Second top point coordinates.</param>
            <param name="thirdPoint">Returns third bottom point coordinates.</param>
            <param name="fourthPoint">Returns fourth bottom point coordinates.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.AreaChart.GetPointLoopNumber(System.Boolean,System.Collections.ArrayList)">
            <summary>
            Returns how many loops through all data points is required (1 or 2)
            </summary>
            <param name="selection">Selection indicator.</param>
            <param name="pointsArray">Points array list.</param>
            <returns>Number of loops (1 or 2).</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.AreaChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.AreaChart.ZeroCrossing">
            <summary>
            If the crossing value is auto Crossing value should be 
            automatically set to zero for some chart 
            types (Bar, column, area etc.)
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.AreaChart.LegendImageStyle">
            <summary>
            How to draw series/points in legend:
            Filled rectangle, Line, Marker
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.AreaChart.Image">
            <summary>
            Chart type image. Used in designer.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.SplineAreaChart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.SplineAreaChart.GetDefaultTension">
            <summary>
            Gets default line tension. For spline charts it's always 0.5.
            </summary>
            <returns>Line tension.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.SplineAreaChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.SplineAreaChart.Image">
            <summary>
            Chart type image. Used in designer to set 
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.BarValueLabelDrawingStyle">
            <summary>
            Bar chart value label drawing style.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.BarValueLabelDrawingStyle.Outside">
            <summary>
            Outside of the bar.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.BarValueLabelDrawingStyle.Left">
            <summary>
            Inside the bar aligned to the left.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.BarValueLabelDrawingStyle.Center">
            <summary>
            Inside the bar aligned to the center.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.BarValueLabelDrawingStyle.Right">
            <summary>
            Inside the bar aligned to the right.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.GanttChart">
            <summary>
            Gantt chart implementation.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.BarChart">
            <summary>
            Bar chart implementation. Base class for the GanttChart.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.BarChart.useTwoValues">
            <summary>
            Indicates that two Y values are used to calculate bar position
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.BarChart.drawSeriesSideBySide">
            <summary>
            Indicates that bars from different series are drawn side by side
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.BarChart.defLabelDrawingStyle">
            <summary>
            Defines the default drawing style of the labels.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.BarChart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.BarChart.Paint(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series)">
            <summary>
            Paint Bar Chart.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.BarChart.Select(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            Gets information, such as series and data point index of a point on the chart.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.BarChart.ProcessChartType(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            Calculates position of each bar in all series and either draws it or checks the selection.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.BarChart.DrawLabelsAndMarkers(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Axis,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,System.Drawing.RectangleF,Dundas.Charting.WinControl.DataPoint,Dundas.Charting.WinControl.Series,System.Double,System.Double,System.Double,System.Int32,System.Int32@)">
            <summary>
            Draws labels and markers.
            </summary>
            <param name="area">Chart area for this chart.</param>
            <param name="hAxis">Horizontal Axis for labels and markers</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="rectSize">Bar rectangle.</param>
            <param name="point">Data point.</param>
            <param name="ser">Data series.</param>
            <param name="barStartPosition">The zero position or the bottom of bars.</param>
            <param name="barSize">The Height of bars.</param>
            <param name="width">The width of bars.</param>
            <param name="pointIndex">Point index.</param>
            <param name="markerIndex">Marker index reference.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.BarChart.GetYValue(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series,Dundas.Charting.WinControl.DataPoint,System.Int32,System.Int32)">
            <summary>
            Helper function, which returns the Y value of the point.
            </summary>
            <param name="common">Chart common elements.</param>
            <param name="area">Chart area the series belongs to.</param>
            <param name="series">Sereis of the point.</param>
            <param name="point">Point object.</param>
            <param name="pointIndex">Index of the point.</param>
            <param name="yValueIndex">Index of the Y value to get.</param>
            <returns>Y value of the point.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.BarChart.ProcessChartType3D(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            Calculates position of each bar in all series and either draws it or checks the selection in 3D space.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.BarChart.DrawMarkers3D(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Axis,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,System.Drawing.RectangleF,Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.Series,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Draws markers in 3D.
            </summary>
            <param name="area">Chart area for this chart.</param>
            <param name="hAxis">Horizontal Axis for labels and markers</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="rectSize">Bar rectangle.</param>
            <param name="pointEx">Data point.</param>
            <param name="ser">Data series.</param>
            <param name="barStartPosition">The zero position or the bottom of bars.</param>
            <param name="barSize">The Height of bars.</param>
            <param name="width">The width of bars.</param>
            <param name="pointIndex">Point index.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.BarChart.DrawLabels3D(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Axis,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,System.Drawing.RectangleF,Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.Series,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Draws labels in 3D.
            </summary>
            <param name="area">Chart area for this chart.</param>
            <param name="hAxis">Horizontal Axis for labels and markers</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="rectSize">Bar rectangle.</param>
            <param name="pointEx">Data point.</param>
            <param name="ser">Data series.</param>
            <param name="barStartPosition">The zero position or the bottom of bars.</param>
            <param name="barSize">The Height of bars.</param>
            <param name="width">The width of bars.</param>
            <param name="pointIndex">Point index.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BarChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BarChart.Image">
            <summary>
            Chart type image. Used in designer to set 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BarChart.Stacked">
            <summary>
            True if chart type is stacked
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BarChart.StackSign">
            <summary>
            True if stacked chart type should draw separately positive and 
            negative data points ( Bar and column Stacked types ).
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BarChart.RequireAxes">
            <summary>
            True if chart type supports axeses
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BarChart.SupportLogarithmicAxes">
            <summary>
            True if chart type supports logarithmic axes
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BarChart.SwitchValueAxes">
            <summary>
            True if chart type requires to switch the value (Y) axes position
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BarChart.SideBySideSeries">
            <summary>
            True if chart series can be placed side-by-side.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BarChart.ZeroCrossing">
            <summary>
            If the crossing value is auto Crossing value should be 
            automatically set to zero for some chart 
            types (Bar, column, area etc.)
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BarChart.DataPointsInLegend">
            <summary>
            True if each data point of a chart must be represented in the legend
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BarChart.ExtraYValuesConnectedToYAxis">
            <summary>
            Indicates that extra Y values are connected to the scale of the Y axis
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BarChart.HundredPercent">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BarChart.HundredPercentSupportNegative">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BarChart.ApplyPaletteColorsToPoints">
            <summary>
            True if palette colors should be applied for each data paoint.
            Otherwise the color is applied to the series.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BarChart.LegendImageStyle">
            <summary>
            How to draw series/points in legend:
            Filled rectangle, Line, Marker
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BarChart.YValuesPerPoint">
            <summary>
            Number of supported Y value(s) per point 
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.GanttChart.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.GanttChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.GanttChart.ZeroCrossing">
            <summary>
            If the crossing value is auto Crossing value should be 
            automatically set to zero for some chart 
            types (Bar, column, area etc.)
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.GanttChart.YValuesPerPoint">
            <summary>
            Number of supported Y value(s) per point 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.GanttChart.ExtraYValuesConnectedToYAxis">
            <summary>
            Indicates that extra Y values are connected to the scale of the Y axis
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.BarPointsDrawingOrderComparer">
            <summary>
            Used to compare Bar chart type points in array and sort them by drawing order.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.BarPointsDrawingOrderComparer.area">
            <summary>
            Chart area object reference.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.BarPointsDrawingOrderComparer.areaProjectionCenter">
            <summary>
            Area X position where visible sides are switched.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.BarPointsDrawingOrderComparer.selection">
            <summary>
            Selection mode. Points order should be reversed.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.BarPointsDrawingOrderComparer.#ctor(Dundas.Charting.WinControl.ChartArea,System.Boolean,Dundas.Charting.WinControl.COPCoordinates)">
            <summary>
            Public constructor.
            </summary>
            <param name="area">Chart area.</param>
            <param name="selection">Selection indicator.</param>
            <param name="coord">Which coordinate of COP (X, Y or Z) to test for surface everlapping.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.BarPointsDrawingOrderComparer.Compare(System.Object,System.Object)">
            <summary>
            Comarer method.
            </summary>
            <param name="o1">First object.</param>
            <param name="o2">Second object.</param>
            <returns>Comparison result.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.BubbleChart">
            <summary>
            Bubble Chart type.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.BubbleChart.#ctor">
            <summary>
            Class public constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.BubbleChart.ProcessChartType(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            This method recalculates size of the bars. This method is used 
            from Paint or Select method.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active</param>
            <param name="graph">The Chart Graphics object</param>
            <param name="common">The Common elements object</param>
            <param name="area">Chart area for this chart</param>
            <param name="x">x coordinate position</param>
            <param name="y">y coordinate position</param>
            <param name="selSeries">Selected data series</param>
            <param name="selPoint">Selected data point</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.BubbleChart.GetMarkerBorderSize(Dundas.Charting.WinControl.DataPoint)">
            <summary>
            Gets marker border size.
            </summary>
            <param name="point">Data point.</param>
            <returns>Marker border size.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.BubbleChart.GetMarkerSize(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.DataPoint,System.Int32,System.String)">
            <summary>
            Returns marker size.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="point">Data point.</param>
            <param name="markerSize">Marker size.</param>
            <param name="markerImage">Marker image.</param>
            <returns>Marker width and height.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.BubbleChart.ScaleBubbleSize(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Double)">
            <summary>
            Scales the value used to determine the size of the Bubble.
            </summary>
            <param name="graph">The Chart Graphics object</param>
            <param name="common">The Common elements object</param>
            <param name="area">Chart area for this chart</param>
            <param name="value">Value to scale.</param>
            <returns>Scaled values.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BubbleChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BubbleChart.YValuesPerPoint">
            <summary>
            Number of supported Y value(s) per point 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.BubbleChart.Image">
            <summary>
            Chart type image. Used in designer to set 
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.ChartTypeRegistry">
            <summary>
            Keep track of all registered chart types.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.ChartTypeRegistry.#ctor">
            <summary>
            Default private constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.ChartTypeRegistry.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Chart types registry public constructor.
            </summary>
            <param name="container">Reference to the service container.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.ChartTypeRegistry.GetService(System.Type)">
            <summary>
            Returns chart type registry service object.
            </summary>
            <param name="serviceType">Service type to get.</param>
            <returns>Chart type registry service.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.ChartTypeRegistry.Register(System.String,System.Type)">
            <summary>
            Adds chart type into the registry.
            </summary>
            <param name="name">Chart type name.</param>
            <param name="chartType">Chart class type.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.ChartTypeRegistry.GetChartType(System.String)">
            <summary>
            Returns chart type object by name.
            </summary>
            <param name="name">Chart type name.</param>
            <returns>Chart type object derived from IChartType.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.ChartTypeRegistry.ResourceManager">
            <summary>
            Chart images resource manager.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.ColumnChart">
            <summary>
            This class provides member functions for working 
            with Column chart type.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.ColumnChart.pointWidthSize">
            <summary>
            Defines the point width  
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.ColumnChart.shiftedX">
            <summary>
            Labels and markers have to be shifted if there 
            is more than one series for column chart.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.ColumnChart.shiftedSerName">
            <summary>
            Labels and markers have to be shifted if there 
            is more than one series for column chart. This property 
            will give a name of the series, which is used, for 
            labels and markers. Point chart 
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.ColumnChart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.ColumnChart.Paint(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series)">
            <summary>
            Paint Column Chart.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.ColumnChart.Select(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            Gets information, such as series and data point index of a point on the chart.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.ColumnChart.ProcessChartType(System.Boolean,System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            This method recalculates size of the columns and paint them or do the hit test.
            This method is used from Paint or Select method.
            </summary>
            <param name="labels">Mode which draws only labels and markers.</param>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.ColumnChart.GetAutoLabelPosition(Dundas.Charting.WinControl.Series,System.Int32)">
            <summary>
            Gets label position for the column depending on the Y value.
            </summary>
            <returns>Return automaticly detected label position.</returns>
            <param name="series">Data series.</param>
            <param name="pointIndex">Point index.</param>
            <returns>Label aligning.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.ColumnChart.ShouldDrawMarkerOnViewEdgeX">
            <summary>
            Indicates that markers are drawnd on the X edge of the data view.
            </summary>
            <returns>False. Column chart never draws markers on the edge.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.ColumnChart.ProcessChartType3D(System.Boolean,System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            This method recalculates size of the columns and paint them or do the hit test in 3d space.
            This method is used from Paint or Select method.
            </summary>
            <param name="labels">Mode which draws only labels and markers.</param>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.ColumnChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.ColumnChart.Image">
            <summary>
            Chart type image. Used in designer to set 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.ColumnChart.Stacked">
            <summary>
            True if chart type is stacked
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.ColumnChart.RequireAxes">
            <summary>
            True if chart type supports axeses
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.ColumnChart.SupportLogarithmicAxes">
            <summary>
            True if chart type supports logarithmic axes
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.ColumnChart.SwitchValueAxes">
            <summary>
            True if chart type requires to switch the value (Y) axes position
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.ColumnChart.SideBySideSeries">
            <summary>
            True if chart series can be placed side-by-side.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.ColumnChart.DataPointsInLegend">
            <summary>
            True if each data point of a chart must be represented in the legend
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.ColumnChart.ExtraYValuesConnectedToYAxis">
            <summary>
            Indicates that extra Y values are connected to the scale of the Y axis
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.ColumnChart.ApplyPaletteColorsToPoints">
            <summary>
            True if palette colors should be applied for each data paoint.
            Otherwise the color is applied to the series.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.ColumnChart.LegendImageStyle">
            <summary>
            How to draw series/points in legend:
            Filled rectangle, Line, Marker
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.ColumnChart.YValuesPerPoint">
            <summary>
            Number of supported Y value(s) per point 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.ColumnChart.ZeroCrossing">
            <summary>
            If the crossing value is auto Crossing value should be 
            automatically set to zero for some chart 
            types (Bar, column, area etc.)
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.ColumnChart.ShiftedX">
            <summary>
            Labels and markers have to be shifted if there 
            is more than one series for column chart.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.ColumnChart.ShiftedSerName">
            <summary>
            Labels and markers have to be shifted if there 
            is more than one series for column chart. This property 
            will give a name of the series, which is used, for 
            labels and markers.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.DoughnutChart">
            <summary>
            This class provides member functions for working 
            with Doughnut chart type.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.PieChart">
            <summary>
            This class provides member functions for working 
            with Pie chart type.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.Paint(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series)">
            <summary>
            Paint Pie Chart
            </summary>
            <param name="graph">The Chart Graphics object</param>
            <param name="common">The Common elements object</param>
            <param name="area">Chart area for this chart</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.Select(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            Function, which returns selected data point and 
            selected series from x, and y coordinate position.
            </summary>
            <param name="graph">The Chart Graphics object</param>
            <param name="common">The Common elements object</param>
            <param name="area">Chart area for this chart</param>
            <param name="x">x coordinate position</param>
            <param name="y">y coordinate position</param>
            <param name="selSeries">Selected data series</param>
            <param name="selPoint">Selected data point</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.SizeCorrection(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea)">
            <summary>
            Method that is used to resize pie 
            because of labels.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.ProcessChartType(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.Boolean,Dundas.Charting.WinControl.ChartTypes.PieChart.LabelsMode,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            This method recalculates position of pie slices 
            or checks if pie slice is selected.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active</param>
            <param name="graph">The Chart Graphics object</param>
            <param name="common">The Common elements object</param>
            <param name="area">Chart area for this chart</param>
            <param name="x">x coordinate position</param>
            <param name="y">y coordinate position</param>
            <param name="shadow">Draw pie shadow</param>
            <param name="labels">Pie labels</param>
            <param name="selSeries">Selected data series</param>
            <param name="selPoint">Selected data point</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.DrawLabels(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.PointF,System.Drawing.SizeF,System.Single,System.Single,Dundas.Charting.WinControl.DataPoint,System.Single,System.Boolean,Dundas.Charting.WinControl.ChartArea)">
            <summary>
            Draw Pie labels.
            </summary>
            <param name="graph">Chart Graphics object</param>
            <param name="middlePoint">Center of the pie chart</param>
            <param name="relativeSize">Size of the square, which will be used for drawing pie.</param>
            <param name="startAngle">Starting angle of a pie slice</param>
            <param name="sweepAngle">Sweep angle of a pie slice</param>
            <param name="point">Data point</param>
            <param name="doughnutRadius">Radius for Doughnut Chart in %</param>
            <param name="exploded">The pie slice is exploded</param>
            <param name="area">Chart area</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.GetLabelStyle(Dundas.Charting.WinControl.DataPoint)">
            <summary>
            This method returns Pie Label Style enumeration 
            from Data Point Custom attribute.
            </summary>
            <param name="point">Data Point</param>
            <returns>Pie label style enumeration</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.EstimateLabels(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.PointF,System.Drawing.SizeF,System.Single,System.Single,Dundas.Charting.WinControl.DataPoint,System.Single,System.Boolean,Dundas.Charting.WinControl.ChartArea)">
            <summary>
            Estimate Labels.
            </summary>
            <param name="graph">Chart Graphics object</param>
            <param name="middlePoint">Center of the pie chart</param>
            <param name="relativeSize">Size of the square, which will be used for drawing pie.</param>
            <param name="startAngle">Starting angle of a pie slice</param>
            <param name="sweepAngle">Sweep angle of a pie slice</param>
            <param name="point">Data point</param>
            <param name="doughnutRadius">Radius for Doughnut Chart in %</param>
            <param name="exploded">The pie slice is exploded</param>
            <param name="area">Chart area</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.GetYValue(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series,Dundas.Charting.WinControl.DataPoint,System.Int32,System.Int32)">
            <summary>
            Helper function, which returns the Y value of the point.
            </summary>
            <param name="common">Chart common elements.</param>
            <param name="area">Chart area the series belongs to.</param>
            <param name="series">Sereis of the point.</param>
            <param name="point">Point object.</param>
            <param name="pointIndex">Index of the point.</param>
            <param name="yValueIndex">Index of the Y value to get.</param>
            <returns>Y value of the point.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.ProcessChartType3D(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.Boolean,Dundas.Charting.WinControl.ChartTypes.PieChart.LabelsMode,System.String@,System.Int32@,Dundas.Charting.WinControl.Series,System.Single)">
            <summary>
            This method recalculates position of pie slices 
            or checks if pie slice is selected.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active</param>
            <param name="graph">The Chart Graphics object</param>
            <param name="common">The Common elements object</param>
            <param name="area">Chart area for this chart</param>
            <param name="x">x coordinate position</param>
            <param name="y">y coordinate position</param>
            <param name="shadow">Draw pie shadow</param>
            <param name="labels">Pie labels</param>
            <param name="selSeries">Selected data series</param>
            <param name="selPoint">Selected data point</param>
            <param name="seriesToDraw">Chart series to draw.</param>
            <param name="pieWidth">Pie width.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.Draw3DPie(System.Int32,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.DataPoint,Dundas.Charting.WinControl.ChartArea,System.Drawing.RectangleF,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Int32,System.Int32,System.Boolean@,System.Boolean,System.Boolean)">
            <summary>
            This method draws a part of a pie slice. Which part is drown 
            depend on turn. There is special case if there is a big pie 
            slice (>180) when one pie slice has to be split on parts 
            and between that other small pie slices has to be drawn.
            </summary>
            <param name="turn">Turn for drawing.</param>
            <param name="graph">Chart Graphics</param>
            <param name="point">Data Point to draw</param>
            <param name="area">Chart area</param>
            <param name="rectangle">Rectangle used for drawing pie clice.</param>
            <param name="startAngle">Start angle for pie slice</param>
            <param name="sweepAngle">End angle for pie slice</param>
            <param name="doughnutRadius">Inner Radius if chart is doughnut</param>
            <param name="pieWidth">Width of the pie</param>
            <param name="selection">Selection mode is active</param>
            <param name="x">selected x coordinate</param>
            <param name="y">selected y coordinate</param>
            <param name="isSelected">true if pie slice is selected</param>
            <param name="sameBackFront">Pie slice is >180 and same pie slice is back and front slice</param>
            <param name="exploded">Pie slice is exploded</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.GetPiePoints(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.ChartArea,System.Single,System.Drawing.RectangleF,System.Single,System.Single,System.Boolean,System.Single,System.Boolean)">
            <summary>
            This method transforms in 3D space important points for 
            doughnut or pie slice.
            </summary>
            <param name="graph">Chart Graphics</param>
            <param name="area">Chart Area</param>
            <param name="pieWidth">The width of a pie.</param>
            <param name="rectangle">Rectangle used for drawing pie clice.</param>
            <param name="startAngle">Start angle for pie slice.</param>
            <param name="sweepAngle">End angle for pie slice.</param>
            <param name="relativeCoordinates">true if relative coordinates has to be returned.</param>
            <param name="doughnutRadius">Doughnut Radius</param>
            <param name="exploded">Exploded pie slice</param>
            <returns>Returns 3D Transformed pie or doughnut points.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.DrawPieCurves(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.DataPoint,System.Single,System.Single,System.Drawing.PointF[],System.Drawing.SolidBrush,System.Drawing.Pen,System.Boolean,System.Int32,System.Int32,System.Boolean@,System.Boolean,System.Boolean)">
            <summary>
            This method is used for drawing curve around pie slices. This is 
            the most complex part of 3D Pie slice. There is special case if 
            pie slice is bigger then 180 degree.
            </summary>
            <param name="graph">Chart Grahics.</param>
            <param name="area">Chart Area.</param>
            <param name="dataPoint">Data Point used for pie slice.</param>
            <param name="startAngle">Start angle of a pie slice.</param>
            <param name="sweepAngle">Sweep angle of a pie slice.</param>
            <param name="points">Important 3d points of a pie slice.</param>
            <param name="brushWithoutLight">Brush without lithing efects.</param>
            <param name="pen">Pen used for border.</param>
            <param name="selection">Selection mode is active.</param>
            <param name="x">x coordinate used for selection.</param>
            <param name="y">y coordinate used for selection.</param>
            <param name="isSelected">true if pie curve is selected.</param>
            <param name="rightPosition">Position of the curve of big pie slice. Big pie slice coud have to visible curves - left and right</param>
            <param name="sameBackFront">This is big pie slice which is in same time back and front slice.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.DrawPieCurvesBigSlice(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.DataPoint,System.Single,System.Single,System.Drawing.PointF[],System.Drawing.Brush,System.Drawing.Pen,System.Boolean,System.Int32,System.Int32,System.Boolean@,System.Boolean,System.Boolean)">
            <summary>
            This method is used for special case when big pie slice has to be drawn.
            </summary>
            <param name="graph">Chart Grahics.</param>
            <param name="area">Chart Area.</param>
            <param name="dataPoint">Data Point used for pie slice.</param>
            <param name="startAngle">Start angle of a pie slice.</param>
            <param name="sweepAngle">Sweep angle of a pie slice.</param>
            <param name="points">Important 3d points of a pie slice.</param>
            <param name="brush">Brush without lithing efects.</param>
            <param name="pen">Pen used for border.</param>
            <param name="selection">Selection mode is active.</param>
            <param name="x">x coordinate used for selection.</param>
            <param name="y">y coordinate used for selection.</param>
            <param name="isSelected">true if pie curve is selected.</param>
            <param name="rightPosition">Position of the curve of big pie slice. Big pie slice coud have to visible curves - left and right</param>
            <param name="sameBackFront">This is big pie slice which is in same time back and front slice.</param>		
            <returns>True if slice is special case and it is drawn as a special case.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.DrawDoughnutCurves(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.DataPoint,System.Single,System.Single,System.Drawing.PointF[],System.Drawing.SolidBrush,System.Drawing.Pen,System.Boolean,System.Int32,System.Int32,System.Boolean@,System.Boolean,System.Boolean)">
            <summary>
            This method is used for drawing curve around doughnut slices - inner curve. 
            This is the most complex part of 3D Doughnut slice. There is special case if 
            pie slice is bigger then 180 degree.
            </summary>
            <param name="graph">Chart Grahics.</param>
            <param name="area">Chart Area.</param>
            <param name="dataPoint">Data Point used for pie slice.</param>
            <param name="startAngle">Start angle of a pie slice.</param>
            <param name="sweepAngle">Sweep angle of a pie slice.</param>
            <param name="points">Important 3d points of a pie slice.</param>
            <param name="brushWithoutLight">Brush without lithing efects.</param>
            <param name="pen">Pen used for border.</param>
            <param name="selection">Selection mode is active.</param>
            <param name="x">x coordinate used for selection.</param>
            <param name="y">y coordinate used for selection.</param>
            <param name="isSelected">true if pie curve is selected.</param>
            <param name="rightPosition">Position of the curve of big pie slice. Big pie slice coud have to visible curves - left and right</param>
            <param name="sameBackFront">This is big pie slice which is in same time back and front slice.</param>		
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.DrawDoughnutCurvesBigSlice(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.DataPoint,System.Single,System.Single,System.Drawing.PointF[],System.Drawing.Brush,System.Drawing.Pen,System.Boolean,System.Int32,System.Int32,System.Boolean@,System.Boolean,System.Boolean)">
            <summary>
            This method is used for special case when big doughnut slice has to be drawn.
            </summary>
            <param name="graph">Chart Grahics.</param>
            <param name="area">Chart Area.</param>
            <param name="dataPoint">Data Point used for pie slice.</param>
            <param name="startAngle">Start angle of a pie slice.</param>
            <param name="sweepAngle">Sweep angle of a pie slice.</param>
            <param name="points">Important 3d points of a pie slice.</param>
            <param name="brush">Brush without lithing efects.</param>
            <param name="pen">Pen used for border.</param>
            <param name="selection">Selection mode is active.</param>
            <param name="x">x coordinate used for selection.</param>
            <param name="y">y coordinate used for selection.</param>
            <param name="isSelected">true if pie curve is selected.</param>
            <param name="rightPosition">Position of the curve of big pie slice. Big pie slice coud have to visible curves - left and right</param>
            <param name="sameBackFront">This is big pie slice which is in same time back and front slice.</param>		
            <returns>True if slice is special case and it is drawn as a special case.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.PointOrder(Dundas.Charting.WinControl.Series,Dundas.Charting.WinControl.ChartArea,System.Single[]@,System.Single[]@,System.Int32[]@,System.Boolean@)">
            <summary>
            This method sort data points on specific way. Because 
            of order of drawing in 3D space, the back data point 
            (point which pass throw 270 degree has to be drawn first. 
            After that side data points have to be drawn. At the end 
            front data point (data point which pass throw 0 degree) 
            has to be drawn. There is special case if there is big 
            data point, which is back and front point in same time.
            </summary>
            <param name="series">Data series</param>
            <param name="area">Chart area</param>
            <param name="newStartAngleList">Unsorted List of Start angles.</param>
            <param name="newSweepAngleList">Unsorted List of Sweep angles.</param>
            <param name="newPointIndexList">Data Point index list</param>
            <param name="sameBackFrontPoint">Beck and Fron Points are same - There is a big pie slice.</param>
            <returns>Sorted data point list.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.SwitchPoints(System.Int32,Dundas.Charting.WinControl.DataPoint[]@,System.Single[]@,System.Single[]@,System.Int32[]@,System.Boolean)">
            <summary>
            This method switches order of data points in the array of points.
            </summary>
            <param name="numOfPoints">Number of data points</param>
            <param name="points">Array of Data points</param>
            <param name="newStartAngleList">List of start angles which has to be switched together with data points</param>
            <param name="newSweepAngleList">List of sweep angles which has to be switched together with data points</param>
            <param name="newPointIndexList">Indexes (position) of data points in the series</param>
            <param name="sameBackFront">There is big pie slice which has same back and front pie slice</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.InitPieSize(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.ChartArea,System.Drawing.RectangleF@,System.Single@,Dundas.Charting.WinControl.DataPoint[],System.Single[],System.Single[],System.Int32[],Dundas.Charting.WinControl.Series,System.Single)">
            <summary>
            This method calculates initial pie size if outside 3D labels is active.
            </summary>
            <param name="graph">Chart Graphics object.</param>
            <param name="area">Chart Area.</param>
            <param name="pieRectangle">Rectangle which is used for drawing pie.</param>
            <param name="pieWidth">Width of pie slice.</param>
            <param name="dataPoints">List of data points.</param>
            <param name="startAngleList">List of start angles.</param>
            <param name="sweepAngleList">List of sweep angles.</param>
            <param name="pointIndexList">List of point indexes.</param>
            <param name="series">Data series used for drawing pie chart.</param>
            <param name="labelLineSize">Custom Attribute for label line size.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.FillPieLabelOutside(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.ChartArea,System.Drawing.RectangleF,System.Single,Dundas.Charting.WinControl.DataPoint,System.Single,System.Single,System.Int32,System.Single,System.Boolean)">
            <summary>
            This method inserts outside 3D labels into array of Label column class.
            </summary>
            <param name="graph">Chart Graphics object.</param>
            <param name="area">Chart Area.</param>
            <param name="pieRectangle">Rectangle used for drawing pie slices.</param>
            <param name="pieWidth">Width of a pie slice.</param>
            <param name="point">Data Point.</param>
            <param name="startAngle">Start angle of a pie slice.</param>
            <param name="sweepAngle">Sweep angle of a pie slice.</param>
            <param name="pointIndx">Data point index.</param>
            <param name="doughnutRadius">Inner Radius of the doughnut.</param>
            <param name="exploded">true if pie slice is exploded.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.Draw3DOutsideLabels(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.ChartArea,System.Drawing.Pen,System.Drawing.PointF[],Dundas.Charting.WinControl.DataPoint,System.Single)">
            <summary>
            This method draws outside labels with lines, which 
            connect labels with pie slices.
            </summary>
            <param name="graph">Chart Graphics object</param>
            <param name="area">Chart Area</param>
            <param name="pen">Pen object</param>
            <param name="points">Important pie points</param>
            <param name="point">Data point</param>
            <param name="midAngle">Middle Angle for pie slice</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.Draw3DInsideLabels(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.PointF[],Dundas.Charting.WinControl.DataPoint)">
            <summary>
            This method draws inside labels.
            </summary>
            <param name="graph">Chart Graphics object</param>
            <param name="points">Important pie points</param>
            <param name="point">Data point</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.GetLabelText(Dundas.Charting.WinControl.DataPoint)">
            <summary>
            Take formated text from label or axis label
            </summary>
            <param name="point">Data point which is used.</param>
            <returns>Formated text</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PieChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PieChart.Image">
            <summary>
            Chart type image. Used in designer to set 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PieChart.Stacked">
            <summary>
            True if chart type is stacked
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PieChart.StackSign">
            <summary>
            True if stacked chart type should draw separately positive and 
            negative data points ( Bar and column Stacked types ).
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PieChart.RequireAxes">
            <summary>
            True if chart type supports axeses
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PieChart.SupportLogarithmicAxes">
            <summary>
            True if chart type supports logarithmic axes
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PieChart.SwitchValueAxes">
            <summary>
            True if chart type requires to switch the value (Y) axes position
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PieChart.SideBySideSeries">
            <summary>
            True if chart series can be placed side-by-side.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PieChart.ZeroCrossing">
            <summary>
            If the crossing value is auto Crossing value should be 
            automatically set to zero for some chart 
            types (Bar, column, area etc.)
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PieChart.DataPointsInLegend">
            <summary>
            True if each data point of a chart must be represented in the legend
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PieChart.ExtraYValuesConnectedToYAxis">
            <summary>
            Indicates that extra Y values are connected to the scale of the Y axis
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PieChart.HundredPercent">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PieChart.HundredPercentSupportNegative">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PieChart.ApplyPaletteColorsToPoints">
            <summary>
            True if palette colors should be applied for each data paoint.
            Otherwise the color is applied to the series.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PieChart.LegendImageStyle">
            <summary>
            How to draw series/points in legend:
            Filled rectangle, Line, Marker
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PieChart.YValuesPerPoint">
            <summary>
            Number of supported Y value(s) per point 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.PieChart.Doughnut">
            <summary>
            Chart is Doughnut or Pie type
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.PieChart.LabelsMode">
            <summary>
            Labels Mode for preparing data
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PieChart.LabelsMode.Off">
            <summary>
            There are no labels
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PieChart.LabelsMode.Draw">
            <summary>
            Drawing labels mode
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PieChart.LabelsMode.Estimate">
            <summary>
            Labels Estimation mode
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.PieChart.LabelColumn">
            <summary>
            LabelColumn class is used for labels manipulation - outside label style
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.LabelColumn.#ctor(System.Drawing.RectangleF)">
            <summary>
            Constructor
            </summary>
            <param name="position">Chart Area position.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.LabelColumn.GetLabelIndex(System.Single)">
            <summary>
            Return index of label position in the column.
            </summary>
            <param name="y">y coordinate</param>
            <returns>Index of column</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.LabelColumn.Sort">
            <summary>
            This method sorts labels by y Position
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.LabelColumn.GetLabelPosition(System.Int32)">
            <summary>
            Returns label position y coordinate from index position
            </summary>
            <param name="index">Index position of the row</param>
            <returns>Y coordinate row position</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.LabelColumn.GetLabelPosition(Dundas.Charting.WinControl.DataPoint)">
            <summary>
            This method finds X and Y position for outside 
            labels. There is discrete number of cells and 
            Y position depends on cell position. X position 
            is connected with angle between invisible 
            line (which connects center of a pie and label) 
            and any horizontal line.
            </summary>
            <param name="dataPoint">Data Point</param>
            <returns>Position of a label</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.LabelColumn.InsertLabel(Dundas.Charting.WinControl.DataPoint,System.Single,System.Int32)">
            <summary>
            This method inserts outside labels in Column label list. Column label 
            list has defined number of cells. This method has to put labels on 
            the best position in the list. If two labels according to their 
            positions belong to same cell of the list, this method should 
            assign to them different positions.
            </summary>
            <param name="point">Data Point which label has to be inserted</param>
            <param name="yCoordinate">Y coordinate which is the best position for this label</param>
            <param name="pointIndx">Point index of this data point in the series</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.LabelColumn.MoveLabels(System.Int32,System.Boolean)">
            <summary>
            This method is used for inserting labels. When label is inserted 
            and that position was previously used, labels have to be 
            moved on proper way. 
            </summary>
            <param name="position">Position which has to be free</param>
            <param name="upDirection">Direction for moving labels</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.LabelColumn.AdjustPositions">
            <summary>
            This method is used to center labels in 
            the middle of chart area (vertically).
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.LabelColumn.CheckFreeSpace(System.Int32,System.Boolean)">
            <summary>
            Check if there is empty cell Labels column in 
            specified direction from specified position
            </summary>
            <param name="position">Start Position for testing</param>
            <param name="upDirection">True if direction is upward, false if downward</param>
            <returns>True if there is empty cell</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.PieChart.LabelColumn.Initialize(System.Drawing.RectangleF,System.Boolean,System.Int32,System.Single)">
            <summary>
            This method initialize label column.
            </summary>
            <param name="rectangle">Rectangle used for labels</param>
            <param name="rightPosition">True if labels are on the right side of chart area.</param>
            <param name="maxNumOfRows">Maximum nuber of rows.</param>
            <param name="labelLineSize">Value for label line size from custom attribute.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.DoughnutChart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.DoughnutChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.DoughnutChart.Image">
            <summary>
            Chart type image. Used in designer to set 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.DoughnutChart.Stacked">
            <summary>
            True if chart type is stacked
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.DoughnutChart.RequireAxes">
            <summary>
            True if chart type supports axeses
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.DoughnutChart.SupportLogarithmicAxes">
            <summary>
            True if chart type supports logarithmic axes
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.DoughnutChart.SwitchValueAxes">
            <summary>
            True if chart type requires to switch the value (Y) axes position
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.DoughnutChart.SideBySideSeries">
            <summary>
            True if chart series can be placed side-by-side.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.DoughnutChart.ZeroCrossing">
            <summary>
            If the crossing value is auto Crossing value should be 
            automatically set to zero for some chart 
            types (Bar, column, area etc.)
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.DoughnutChart.DataPointsInLegend">
            <summary>
            True if each data point of a chart must be represented in the legend
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.DoughnutChart.ExtraYValuesConnectedToYAxis">
            <summary>
            Indicates that extra Y values are connected to the scale of the Y axis
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.DoughnutChart.ApplyPaletteColorsToPoints">
            <summary>
            True if palette colors should be applied for each data paint.
            Otherwise the color is applied to the series.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.DoughnutChart.LegendImageStyle">
            <summary>
            How to draw series/points in legend:
            Filled rectangle, Line, Marker
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.DoughnutChart.YValuesPerPoint">
            <summary>
            Number of supported Y value(s) per point 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.DoughnutChart.Doughnut">
            <summary>
            Chart is Doughnut or Pie type
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.PieLabelStyle">
            <summary>
            Pie Labels style
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PieLabelStyle.Inside">
            <summary>
            Labels are inside pie slice
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PieLabelStyle.Outside">
            <summary>
            Labels are outside pie slice
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PieLabelStyle.Disabled">
            <summary>
            Labels are disabled
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.PieLabelStyle.Ellipse">
            <summary>
            Labels are set on the border of an ellipse
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.SplineRangeChart">
            <summary>
            Spline area chart.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.RangeChart">
            <summary>
            Range chart.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.RangeChart.gradientFill">
            <summary>
            Fields used to fill area with gradient 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.RangeChart.areaBottomPath">
            <summary>
            Shape of the low values
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.RangeChart.areaPath">
            <summary>
            Coordinates of the area path
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.RangeChart.series">
            <summary>
            Reference to the current series object
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.RangeChart.lowPoints">
            <summary>
            Array of low line values
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.RangeChart.indexedBasedX">
            <summary>
            Check if series are indexed based
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.RangeChart.thirdPointY2Value">
            <summary>
            Secondary Y coordinate that should be used for bottom line of the range (left point)
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.RangeChart.fourthPointY2Value">
            <summary>
            Secondary Y coordinate that should be used for bottom line of the range (right point)
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.RangeChart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.RangeChart.GetDefaultTension">
            <summary>
            Gets default line tension.
            </summary>
            <returns>Line tension.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.RangeChart.FillLastSeriesGradient(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Fills last series area with gradient.
            If gradient is used as a back color of the series it must be drawn 
            at the same time.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.RangeChart.ProcessChartType(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            This method recalculates position of the end points of lines. This method 
            is used from Paint or Select method.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.RangeChart.DrawLine(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.DataPoint,Dundas.Charting.WinControl.Series,System.Drawing.PointF[],System.Int32,System.Single)">
            <summary>
            Override line drawing method to fill the range and draw lines.
            </summary>
            <param name="graph">Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="point">Point to draw the line for.</param>
            <param name="series">Point series.</param>
            <param name="points">Array of oints coordinates.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="tension">Line tension.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.RangeChart.SelectLine(Dundas.Charting.WinControl.ChartGraphics,System.Int32,System.Drawing.PointF[],System.Int32,System.Double,System.Double,System.Single)">
            <summary>
            This method recalculates whether selected 
            position is close to a line.
            </summary>
            <param name="graph">Chart Graphics</param>
            <param name="borderWidth">Width of the line.</param>
            <param name="points">Array of oints coordinates.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="x">Selected x absolute pixel position.</param>
            <param name="y">Selected y absolute pixel position.</param>
            <param name="tension">Line tension.</param>
            <returns>True if line is selected.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.RangeChart.Draw3DSurface(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.Matrix3D,Dundas.Charting.WinControl.LightStyle,Dundas.Charting.WinControl.DataPoint3D,System.Single,System.Single,System.Collections.ArrayList,System.Int32,System.Int32,System.Single,Dundas.Charting.WinControl.DrawingOperationType)">
            <summary>
            Draws a 3D surface connecting the two specified points in 2D space.
            Used to draw Line based charts.
            </summary>
            <param name="area">Chart area reference.</param>
            <param name="graph">Chart graphics.</param>
            <param name="matrix">Coordinates transformation matrix.</param>
            <param name="lightStyle">Light style (None, Simplistic, Realistic).</param>
            <param name="prevDataPointEx">Previous data point object.</param>
            <param name="positionZ">Z position of the back side of the 3D surface.</param>
            <param name="depth">Depth of the 3D surface.</param>
            <param name="points">Array of points.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="pointLoopIndex">Index of points loop.</param>
            <param name="tension">Line tension.</param>
            <param name="operationType">Type of operation Drawing, Calculating Path or Both</param>
            <returns>Returns elemnt shape path if operationType parameter is set to CalcElementPath, otherwise Null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.RangeChart.Draw3DSurface(Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.DataPoint3D,System.Boolean,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.Matrix3D,Dundas.Charting.WinControl.LightStyle,Dundas.Charting.WinControl.DataPoint3D,System.Single,System.Single,System.Collections.ArrayList,System.Int32,System.Int32,System.Single,Dundas.Charting.WinControl.DrawingOperationType,Dundas.Charting.WinControl.LineSegmentType)">
            <summary>
            Draws a 3D surface connecting the two specified points in 2D space.
            Used to draw Line based charts.
            </summary>
            <param name="firstPoint">First data point.</param>
            <param name="secondPoint">Second data point.</param>
            <param name="reversed">Points are in reverse order.</param>
            <param name="area">Chart area reference.</param>
            <param name="graph">Chart graphics.</param>
            <param name="matrix">Coordinates transformation matrix.</param>
            <param name="lightStyle">Light style (None, Simplistic, Realistic).</param>
            <param name="prevDataPointEx">Previous data point object.</param>
            <param name="positionZ">Z position of the back side of the 3D surface.</param>
            <param name="depth">Depth of the 3D surface.</param>
            <param name="points">Array of points.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="pointLoopIndex">Index of points loop.</param>
            <param name="tension">Line tension.</param>
            <param name="operationType">Type of operation Drawing, Calculating Path or Both</param>
            <param name="surfaceSegmentType">Define surface segment type if it consists of several segments.</param>
            <returns>Returns elemnt shape path if operationType parameter is set to CalcElementPath, otherwise Null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.RangeChart.GetTopSurfaceVisibility(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.DataPoint3D,System.Boolean,System.Single,System.Single,Dundas.Charting.WinControl.Matrix3D,Dundas.Charting.WinControl.SurfaceName@)">
            <summary>
            Gets visibility of the top surface.
            </summary>
            <param name="area">Chart area object.</param>
            <param name="firstPoint">First data point of the line.</param>
            <param name="secondPoint">Second data point of the line.</param>
            <param name="upSideDown">Indicates that Y values of the data points are below axis line.</param>
            <param name="positionZ">Z coordinate of the back side of the cube.</param>
            <param name="depth">Cube depth.</param>
            <param name="matrix">Coordinate transformation matrix.</param>
            <param name="visibleSurfaces">Surface visibility reference. Initialized with bounary cube visibility.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.RangeChart.GetBottomPointsPosition(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Single,Dundas.Charting.WinControl.DataPoint3D@,Dundas.Charting.WinControl.DataPoint3D@,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            Gets position ob the bottom points in area chart.
            </summary>
            <param name="common">Chart common elements.</param>
            <param name="area">Chart area the series belongs to.</param>
            <param name="axisPosition">Axis position.</param>
            <param name="firstPoint">First top point coordinates.</param>
            <param name="secondPoint">Second top point coordinates.</param>
            <param name="thirdPoint">Returns third bottom point coordinates.</param>
            <param name="fourthPoint">Returns fourth bottom point coordinates.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.RangeChart.Draw3DSplinePolygon(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.ChartArea,System.Single,System.Drawing.Color,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.DataPoint3D,System.Collections.ArrayList,System.Int32,System.Single,Dundas.Charting.WinControl.DrawingOperationType,Dundas.Charting.WinControl.LineSegmentType,System.Boolean)">
            <summary>
            Draws a 3D polygon defined by 4 points in 2D space.
            Top and Bottom lines are drawn as splines of specified tension.
            </summary>
            <param name="area">Chart area reference.</param>
            <param name="graph">Chart graphics.</param>
            <param name="positionZ">Z position of the back side of the 3D surface.</param>
            <param name="backColor">Color of rectangle</param>
            <param name="borderColor">Border Color</param>
            <param name="borderWidth">Border Width</param>
            <param name="borderStyle">Border Style</param>
            <param name="firstPoint">First point.</param>
            <param name="secondPoint">Second point.</param>
            <param name="thirdPoint">Third point.</param>
            <param name="fourthPoint">Fourth point.</param>
            <param name="points">Array of points.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="tension">Line tension.</param>
            <param name="operationType">Type of operation Drawing, Calculating Path or Both</param>
            <param name="lineSegmentType">Type of line segment. Used for step lines and splines.</param>
            <param name="forceThinBorder">Thin border will be drawn on all segments.</param>
            <returns>Returns elemnt shape path if operationType parameter is set to CalcElementPath, otherwise Null.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.RangeChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.RangeChart.YValuesPerPoint">
            <summary>
            Number of supported Y value(s) per point 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.RangeChart.ExtraYValuesConnectedToYAxis">
            <summary>
            Indicates that extra Y values are connected to the scale of the Y axis
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.RangeChart.LegendImageStyle">
            <summary>
            How to draw series/points in legend:
            Filled rectangle, Line, Marker
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.RangeChart.Image">
            <summary>
            Chart type image. Used in designer to set 
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.SplineRangeChart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.SplineRangeChart.GetDefaultTension">
            <summary>
            Gets default line tension.
            </summary>
            <returns>Default line tension.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.SplineRangeChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.SplineRangeChart.Image">
            <summary>
            Chart type image. Used in designer to set 
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedAreaChart">
            <summary>
            This class provides member functions for working 
            with Hundred Percent Stacked Column chart type.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.StackedAreaChart">
            <summary>
            StackedAreaChart class.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.StackedAreaChart.stackedData">
            <summary>
            Stacked data buffer
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.StackedAreaChart.areaBottomPath">
            <summary>
            Shape of the previous series
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.StackedAreaChart.prevPositionY">
            <summary>
            Previous Y value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedAreaChart.#ctor">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedAreaChart.GetDefaultTension">
            <summary>
            Gets default line tension.
            </summary>
            <returns>Line tension.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedAreaChart.Paint(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series)">
            <summary>
            Paint Area Chart.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedAreaChart.ProcessChartType(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            This method calculates position of the area and either draws it or checks selection.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedAreaChart.Draw3DSurface(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.Matrix3D,Dundas.Charting.WinControl.LightStyle,Dundas.Charting.WinControl.DataPoint3D,System.Single,System.Single,System.Collections.ArrayList,System.Int32,System.Int32,System.Single,Dundas.Charting.WinControl.DrawingOperationType)">
            <summary>
            Draws a 3D surface connecting the two specified points in 2D space.
            Used to draw Line based charts.
            </summary>
            <param name="area">Chart area reference.</param>
            <param name="graph">Chart graphics.</param>
            <param name="matrix">Coordinates transformation matrix.</param>
            <param name="lightStyle">Light style (None, Simplistic, Realistic).</param>
            <param name="prevDataPointEx">Previous data point object.</param>
            <param name="positionZ">Z position of the back side of the 3D surface.</param>
            <param name="depth">Depth of the 3D surface.</param>
            <param name="points">Array of points.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="pointLoopIndex">Index of points loop.</param>
            <param name="tension">Line tension.</param>
            <param name="operationType">Type of operation Drawing, Calculating Path or Both</param>
            <returns>Returns elemnt shape path if operationType parameter is set to CalcElementPath, otherwise Null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedAreaChart.GetTopSurfaceVisibility(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.DataPoint3D,System.Boolean,System.Single,System.Single,Dundas.Charting.WinControl.Matrix3D,Dundas.Charting.WinControl.SurfaceName@)">
            <summary>
            Gets visibility of the top surface.
            </summary>
            <param name="area">Chart area object.</param>
            <param name="firstPoint">First data point of the line.</param>
            <param name="secondPoint">Second data point of the line.</param>
            <param name="upSideDown">Indicates that Y values of the data points are below axis line.</param>
            <param name="positionZ">Z coordinate of the back side of the cube.</param>
            <param name="depth">Cube depth.</param>
            <param name="matrix">Coordinate transformation matrix.</param>
            <param name="visibleSurfaces">Surface visibility reference. Initialized with bounary cube visibility.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedAreaChart.GetBottomPointsPosition(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Single,Dundas.Charting.WinControl.DataPoint3D@,Dundas.Charting.WinControl.DataPoint3D@,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            Gets position ob the bottom points in area chart.
            </summary>
            <param name="common">Chart common elements.</param>
            <param name="area">Chart area the series belongs to.</param>
            <param name="axisPosition">Axis position.</param>
            <param name="firstPoint">First top point coordinates.</param>
            <param name="secondPoint">Second top point coordinates.</param>
            <param name="thirdPoint">Returns third bottom point coordinates.</param>
            <param name="fourthPoint">Returns fourth bottom point coordinates.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedAreaChart.GetPointLoopNumber(System.Boolean,System.Collections.ArrayList)">
            <summary>
            Returns how many loops through all data points is required (1 or 2)
            </summary>
            <param name="selection">Selection indicator.</param>
            <param name="pointsArray">Points array list.</param>
            <returns>Number of loops (1 or 2).</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedAreaChart.DrawLabels3D(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.DataPoint3D,System.Single,System.Single)">
            <summary>
            This method draws labels in point chart.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="pointEx">Data point 3D.</param>
            <param name="positionZ">Z position of the back side of the 3D surface.</param>
            <param name="depth">Depth of the 3D surface.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedAreaChart.GetYValue(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series,Dundas.Charting.WinControl.DataPoint,System.Int32,System.Int32)">
            <summary>
            Helper function, which returns the Y value of the point.
            </summary>
            <param name="common">Chart common elements.</param>
            <param name="area">Chart area the series belongs to.</param>
            <param name="series">Sereis of the point.</param>
            <param name="point">Point object.</param>
            <param name="pointIndex">Index of the point.</param>
            <param name="yValueIndex">Index of the Y value to get.  Set to -1 to get the height.</param>
            <returns>Y value of the point.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedAreaChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedAreaChart.Stacked">
            <summary>
            True if chart type is stacked
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedAreaChart.Image">
            <summary>
            Chart type image. Used in designer.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedAreaChart.Paint(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series)">
            <summary>
            Paint Column Chart
            </summary>
            <param name="graph">The Chart Graphics object</param>
            <param name="common">The Common elements object</param>
            <param name="area">Chart area for this chart</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedAreaChart.Select(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            Function, which returns selected data point and 
            selected series from x, and y coordinate position.
            </summary>
            <param name="graph">The Chart Graphics object</param>
            <param name="common">The Common elements object</param>
            <param name="area">Chart area for this chart</param>
            <param name="x">x coordinate position</param>
            <param name="y">y coordinate position</param>
            <param name="selSeries">Selected data series</param>
            <param name="selPoint">Selected data point</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedAreaChart.GetYValue(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series,Dundas.Charting.WinControl.DataPoint,System.Int32,System.Int32)">
            <summary>
            Helper function, which returns the Y value of the point
            </summary>
            <param name="common">Chart common elements.</param>
            <param name="area">Chart area the series belongs to.</param>
            <param name="series">Sereis of the point.</param>
            <param name="point">Point object.</param>
            <param name="pointIndex">Index of the point.</param>
            <param name="yValueIndex">Index of the Y value to get.</param>
            <returns>Y value of the point.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedAreaChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedAreaChart.HundredPercent">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedBarChart">
            <summary>
            This class provides member functions for working 
            with Hundred Percent Stacked Column chart type.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.StackedBarChart">
            <summary>
            This class provides member functions for working 
            with Stacked Bar chart type.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.pointWidthSize">
            <summary>
            Defines the point width  
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.prevPosY">
            <summary>
            Previous stacked positive Y values.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.prevNegY">
            <summary>
            Previous stacked negative Y values.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.Paint(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series)">
            <summary>
            Paint Stacked Bar Chart.
            </summary>
            <param name="graph">The Chart Graphics object</param>
            <param name="common">The Common elements object</param>
            <param name="area">Chart area for this chart</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.ProcessChartType(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,System.Boolean,Dundas.Charting.WinControl.Series)">
            <summary>
            This method recalculates size of the stacked bars. This method is used 
            from Paint or Select method.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="shadow">True if shadow mode is active.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.Select(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            Function, which returns selected data point and 
            selected series from x, and y coordinate position.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.DrawLabels(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.DataPoint,System.Int32,Dundas.Charting.WinControl.Series,System.Drawing.RectangleF)">
            <summary>
            Draw Stacked Column labels.
            </summary>
            <param name="common">Chart common elements.</param>
            <param name="graph">Chart Graphics.</param>
            <param name="area">Chart area the series belongs to.</param>
            <param name="point">Data point.</param>
            <param name="pointIndex">Data point index.</param>
            <param name="series">Data series.</param>
            <param name="rectangle">Column rectangle.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.GetYValue(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series,Dundas.Charting.WinControl.DataPoint,System.Int32,System.Int32)">
            <summary>
            Helper function, which returns the Y value of the point.
            </summary>
            <param name="common">Chart common elements.</param>
            <param name="area">Chart area the series belongs to.</param>
            <param name="series">Sereis of the point.</param>
            <param name="point">Point object.</param>
            <param name="pointIndex">Index of the point.</param>
            <param name="yValueIndex">Index of the Y value to get. Set to -1 to get the height.</param>
            <returns>Y value of the point.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.ProcessChartType3D(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,System.Boolean,Dundas.Charting.WinControl.Series)">
            <summary>
            This method recalculates size of the stacked bars in 3D space. This method is used 
            from Paint or Select method.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="shadow">True if shadow mode is active.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.DrawLabels3D(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Axis,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,System.Drawing.RectangleF,Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.Series,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Draws labels in 3D.
            </summary>
            <param name="area">Chart area for this chart.</param>
            <param name="hAxis">Horizontal Axis for labels and markers</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="rectSize">Bar rectangle.</param>
            <param name="pointEx">Data point.</param>
            <param name="ser">Data series.</param>
            <param name="barStartPosition">The zero position or the bottom of bars.</param>
            <param name="barSize">The Height of bars.</param>
            <param name="width">The width of bars.</param>
            <param name="pointIndex">Point index.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.Image">
            <summary>
            Chart type image. Used in designer to set 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.Stacked">
            <summary>
            True if chart type is stacked
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.StackSign">
            <summary>
            True if stacked chart type should draw separately positive and 
            negative data points ( Bar and column Stacked types ).
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.RequireAxes">
            <summary>
            True if chart type supports axeses
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.SupportLogarithmicAxes">
            <summary>
            True if chart type supports logarithmic axes
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.SwitchValueAxes">
            <summary>
            True if chart type requires to switch the value (Y) axes position
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.SideBySideSeries">
            <summary>
            True if chart series can be placed side-by-side.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.ZeroCrossing">
            <summary>
            If the crossing value is auto Crossing value should be 
            automatically set to zero for some chart 
            types (Bar, column, area etc.)
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.DataPointsInLegend">
            <summary>
            True if each data point of a chart must be represented in the legend
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.ExtraYValuesConnectedToYAxis">
            <summary>
            Indicates that extra Y values are connected to the scale of the Y axis
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.HundredPercent">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.HundredPercentSupportNegative">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.ApplyPaletteColorsToPoints">
            <summary>
            True if palette colors should be applied for each data paoint.
            Otherwise the color is applied to the series.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.LegendImageStyle">
            <summary>
            How to draw series/points in legend:
            Filled rectangle, Line, Marker
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedBarChart.YValuesPerPoint">
            <summary>
            Number of supported Y value(s) per point 
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedBarChart.Paint(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series)">
            <summary>
            Paint Column Chart.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedBarChart.Select(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            Function, which returns selected data point and 
            selected series from x, and y coordinate position.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedBarChart.GetYValue(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series,Dundas.Charting.WinControl.DataPoint,System.Int32,System.Int32)">
            <summary>
            Helper function, which returns the Y value of the point.
            </summary>
            <param name="common">Chart common elements.</param>
            <param name="area">Chart area the series belongs to.</param>
            <param name="series">Sereis of the point.</param>
            <param name="point">Point object.</param>
            <param name="pointIndex">Index of the point.</param>
            <param name="yValueIndex">Index of the Y value to get.</param>
            <returns>Y value of the point.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedBarChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedBarChart.HundredPercent">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedBarChart.HundredPercentSupportNegative">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedColumnChart">
            <summary>
            This class provides member functions for working 
            with Hundred Percent Stacked Column chart type.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart">
            <summary>
            This class provides member functions for working 
            with Stacked Column chart type.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.pointWidthSize">
            <summary>
            Defines the point width  
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.prevPosY">
            <summary>
            Previous stacked positive Y values.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.prevNegY">
            <summary>
            Previous stacked negative Y values.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.Paint(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series)">
            <summary>
            Paint Column Chart
            </summary>
            <param name="graph">The Chart Graphics object</param>
            <param name="common">The Common elements object</param>
            <param name="area">Chart area for this chart</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.ProcessChartType(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,System.Boolean,System.Boolean,Dundas.Charting.WinControl.Series)">
            <summary>
            This method recalculates size of the Columns. This method is used 
            from Paint or Select method.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics objec.t</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="shadow">True if shadow mode is active.</param>
            <param name="labels">Labels drawing mode.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.Select(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            Function, which returns selected data point and 
            selected series from x, and y coordinate position.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.DrawLabels(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.DataPoint,System.Int32,Dundas.Charting.WinControl.Series,System.Drawing.RectangleF)">
            <summary>
            Draw Stacked Column labels.
            </summary>
            <param name="common">Chart common elements.</param>
            <param name="graph">Chart Graphics.</param>
            <param name="area">Chart area the series belongs to.</param>
            <param name="point">Data point.</param>
            <param name="pointIndex">Data point index.</param>
            <param name="series">Data series.</param>
            <param name="rectangle">Column rectangle.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.GetYValue(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series,Dundas.Charting.WinControl.DataPoint,System.Int32,System.Int32)">
            <summary>
            Helper function, which returns the Y value of the point.
            </summary>
            <param name="common">Chart common elements.</param>
            <param name="area">Chart area the series belongs to.</param>
            <param name="series">Sereis of the point.</param>
            <param name="point">Point object.</param>
            <param name="pointIndex">Index of the point.</param>
            <param name="yValueIndex">Index of the Y value to get.  Set to -1 to get the height.</param>
            <returns>Y value of the point.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.ProcessChartType3D(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,System.Boolean,Dundas.Charting.WinControl.Series)">
            <summary>
            This method recalculates size of the Columns. This method is used 
            from Paint or Select method in 3D space.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics objec.t</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="labels">Labels drawing mode.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.DrawLabels3D(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.DataPoint3D,System.Int32,Dundas.Charting.WinControl.Series,System.Drawing.RectangleF)">
            <summary>
            Draw Stacked Column labels.
            </summary>
            <param name="common">Chart common elements.</param>
            <param name="graph">Chart Graphics.</param>
            <param name="area">Chart area the series belongs to.</param>
            <param name="pointEx">Data point.</param>
            <param name="pointIndex">Data point index.</param>
            <param name="series">Data series.</param>
            <param name="rectangle">Column rectangle.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.Image">
            <summary>
            Chart type image. Used in designer to set 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.Stacked">
            <summary>
            True if chart type is stacked
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.StackSign">
            <summary>
            True if stacked chart type should draw separately positive and 
            negative data points ( Bar and column Stacked types ).
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.RequireAxes">
            <summary>
            True if chart type supports axeses
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.SupportLogarithmicAxes">
            <summary>
            True if chart type supports logarithmic axes
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.SwitchValueAxes">
            <summary>
            True if chart type requires to switch the value (Y) axes position
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.SideBySideSeries">
            <summary>
            True if chart series can be placed side-by-side.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.DataPointsInLegend">
            <summary>
            True if each data point of a chart must be represented in the legend
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.ExtraYValuesConnectedToYAxis">
            <summary>
            Indicates that extra Y values are connected to the scale of the Y axis
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.HundredPercent">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.HundredPercentSupportNegative">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.ApplyPaletteColorsToPoints">
            <summary>
            True if palette colors should be applied for each data paoint.
            Otherwise the color is applied to the series.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.LegendImageStyle">
            <summary>
            How to draw series/points in legend:
            Filled rectangle, Line, Marker
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.YValuesPerPoint">
            <summary>
            Number of supported Y value(s) per point 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StackedColumnChart.ZeroCrossing">
            <summary>
            If the crossing value is auto Crossing value should be 
            automatically set to zero for some chart 
            types (Bar, column, area etc.)
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedColumnChart.Paint(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series)">
            <summary>
            Paint Column Chart.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedColumnChart.Select(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            Function, which returns selected data point and 
            selected series from x, and y coordinate position.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedColumnChart.GetYValue(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series,Dundas.Charting.WinControl.DataPoint,System.Int32,System.Int32)">
            <summary>
            Helper function, which returns the Y value of the point
            </summary>
            <param name="common">Chart common elements.</param>
            <param name="area">Chart area the series belongs to.</param>
            <param name="series">Sereis of the point.</param>
            <param name="point">Point object.</param>
            <param name="pointIndex">Index of the point.</param>
            <param name="yValueIndex">Index of the Y value to get.</param>
            <returns>Y value of the point.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedColumnChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedColumnChart.HundredPercent">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.HundredPercentStackedColumnChart.HundredPercentSupportNegative">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.StepLineChart">
            <summary>
            StepLineChart class.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StepLineChart.#ctor">
            <summary>
            StepLineChart class constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StepLineChart.DrawLine(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.DataPoint,Dundas.Charting.WinControl.Series,System.Drawing.PointF[],System.Int32,System.Single)">
            <summary>
            Draw chart line using horisontal and vertical lines.
            </summary>
            <param name="graph">Graphics object.</param>
            <param name="common">The Common elements object</param>
            <param name="point">Point to draw the line for.</param>
            <param name="series">Point series.</param>
            <param name="points">Array of points coordinates.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="tension">Line tension</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StepLineChart.SelectLine(Dundas.Charting.WinControl.ChartGraphics,System.Int32,System.Drawing.PointF[],System.Int32,System.Double,System.Double,System.Single)">
            <summary>
            This method recalculates whether selected 
            position is close to a line.
            </summary>
            <param name="graph">Chart Graphics</param>
            <param name="borderWidth">Width of the line</param>
            <param name="points">Array of points coordinates.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="x">Selected x absolute pixel position</param>
            <param name="y">Selected y absolute pixel position</param>
            <param name="tension">Line tension</param>
            <returns>True if line is selected</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StepLineChart.Draw3DSurface(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.Matrix3D,Dundas.Charting.WinControl.LightStyle,Dundas.Charting.WinControl.DataPoint3D,System.Single,System.Single,System.Collections.ArrayList,System.Int32,System.Int32,System.Single,Dundas.Charting.WinControl.DrawingOperationType)">
            <summary>
            Draws a 3D surface connecting the two specified points in 2D space.
            Used to draw Line based charts.
            </summary>
            <param name="area">Chart area reference.</param>
            <param name="graph">Chart graphics.</param>
            <param name="matrix">Coordinates transformation matrix.</param>
            <param name="lightStyle">Light style (None, Simplistic, Realistic).</param>
            <param name="prevDataPointEx">Previous data point object.</param>
            <param name="positionZ">Z position of the back side of the 3D surface.</param>
            <param name="depth">Depth of the 3D surface.</param>
            <param name="points">Array of points.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="pointLoopIndex">Index of points loop.</param>
            <param name="tension">Line tension.</param>
            <param name="operationType">Type of operation Drawing, Calculating Path or Both</param>
            <returns>Returns elemnt shape path if operationType parameter is set to CalcElementPath, otherwise Null.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StepLineChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StepLineChart.Image">
            <summary>
            Chart type image. Used in designer to set 
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.StockOpenCloseMarkStyle">
            <summary>
            Style of the Open-Close marks in the stock chart
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.StockOpenCloseMarkStyle.Line">
            <summary>
            Line
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.StockOpenCloseMarkStyle.Triangle">
            <summary>
            Triangle
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.StockOpenCloseMarkStyle.CandleStick">
            <summary>
            CandleStick. Color of the bar depends if Open value was bigger than Close value.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.CandleStickChart">
            <summary>
            CandleStick Chart.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartTypes.StockChart">
            <summary>
            Stock Chart.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.StockChart.pointWidthSize">
            <summary>
            Defines the point width
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.StockChart.vAxis">
            <summary>
            Vertical axis
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.StockChart.hAxis">
            <summary>
            Horizontal axis
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.StockChart.openCloseStyle">
            <summary>
            Default open-close style
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartTypes.StockChart.forceCandleStick">
            <summary>
            Indicates that only candle-stick type of the open-close marks should be used
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StockChart.#ctor">
            <summary>
            Stock chart constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StockChart.#ctor(Dundas.Charting.WinControl.ChartTypes.StockOpenCloseMarkStyle)">
            <summary>
            Stock chart constructor.
            </summary>
            <param name="style">Open-close marks default style.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StockChart.Paint(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series)">
            <summary>
            Paint stock chart.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StockChart.Select(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            Gets information, such as series and data point index of a point on the chart.
            </summary>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StockChart.ProcessChartType(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            This method recalculates size of the bars. This method is used 
            from Paint or Select method.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StockChart.DrawOpenCloseMarks(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series,Dundas.Charting.WinControl.DataPoint,System.Single,System.Single)">
            <summary>
            Draws stock chart open-close marks depending on selected style.
            </summary>
            <param name="graph">Chart graphics object.</param>
            <param name="area">Chart area.</param>
            <param name="ser">Data point series.</param>
            <param name="point">Data point to draw.</param>
            <param name="xPosition">X position.</param>
            <param name="width">Point width.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StockChart.DrawLabel(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.Series,Dundas.Charting.WinControl.DataPoint,System.Drawing.PointF)">
            <summary>
            Draws stock chart data point label.
            </summary>
            <param name="graph">Chart graphics object.</param>
            <param name="ser">Data point series.</param>
            <param name="point">Data point to draw.</param>
            <param name="position">Label position.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StockChart.ProcessChartType3D(System.Boolean,Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.Series)">
            <summary>
            This method recalculates size of the bars. This method is used 
            from Paint or Select method.
            </summary>
            <param name="selection">If True selection mode is active, otherwise paint mode is active.</param>
            <param name="graph">The Chart Graphics object.</param>
            <param name="common">The Common elements object.</param>
            <param name="area">Chart area for this chart.</param>
            <param name="x">x coordinate position.</param>
            <param name="y">y coordinate position.</param>
            <param name="selSeries">Selected data series.</param>
            <param name="selPoint">Selected data point.</param>
            <param name="seriesToDraw">Chart series to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StockChart.DrawOpenCloseMarks3D(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series,Dundas.Charting.WinControl.DataPoint,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws stock chart open-close marks depending on selected style.
            </summary>
            <param name="graph">Chart graphics object.</param>
            <param name="area">Chart area.</param>
            <param name="ser">Data point series.</param>
            <param name="point">Data point to draw.</param>
            <param name="xPosition">X position.</param>
            <param name="width">Point width.</param>
            <param name="zPosition">Series Z position.</param>
            <param name="depth">Series depth.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.StockChart.GetYValue(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Series,Dundas.Charting.WinControl.DataPoint,System.Int32,System.Int32)">
            <summary>
            Helper function, which returns the Y value of the point.
            </summary>
            <param name="common">Chart common elements.</param>
            <param name="area">Chart area the series belongs to.</param>
            <param name="series">Sereis of the point.</param>
            <param name="point">Point object.</param>
            <param name="pointIndex">Index of the point.</param>
            <param name="yValueIndex">Index of the Y value to get.</param>
            <returns>Y value of the point.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StockChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StockChart.Stacked">
            <summary>
            True if chart type is stacked
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StockChart.StackSign">
            <summary>
            True if stacked chart type should draw separately positive and 
            negative data points ( Bar and column Stacked types ).
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StockChart.RequireAxes">
            <summary>
            True if chart type supports axeses
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StockChart.SupportLogarithmicAxes">
            <summary>
            True if chart type supports logarithmic axes
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StockChart.SwitchValueAxes">
            <summary>
            True if chart type requires to switch the value (Y) axes position
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StockChart.SideBySideSeries">
            <summary>
            True if chart series can be placed side-by-side.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StockChart.DataPointsInLegend">
            <summary>
            True if each data point of a chart must be represented in the legend
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StockChart.ZeroCrossing">
            <summary>
            If the crossing value is auto Crossing value should be 
            automatically set to zero for some chart 
            types (Bar, column, area etc.)
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StockChart.ApplyPaletteColorsToPoints">
            <summary>
            True if palette colors should be applied for each data paoint.
            Otherwise the color is applied to the series.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StockChart.ExtraYValuesConnectedToYAxis">
            <summary>
            Indicates that extra Y values are connected to the scale of the Y axis
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StockChart.HundredPercent">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StockChart.HundredPercentSupportNegative">
            <summary>
            Indicates that it's a hundredred percent chart.
            Axis scale from 0 to 100 percent should be used.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StockChart.LegendImageStyle">
            <summary>
            How to draw series/points in legend:
            Filled rectangle, Line, Marker
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StockChart.YValuesPerPoint">
            <summary>
            Number of supported Y value(s) per point 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.StockChart.Image">
            <summary>
            Chart type image. Used in designer to set 
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartTypes.CandleStickChart.#ctor">
            <summary>
            CandleStick chart constructor.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.CandleStickChart.Name">
            <summary>
            Chart type name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartTypes.CandleStickChart.Image">
            <summary>
            Chart type image. Used in designer to set 
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Data.DataManager">
            <summary>
            Data Manager.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.#ctor">
            <summary>
            Default private constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Data manager public constructor
            </summary>
            <param name="container">Service container object.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.GetService(System.Type)">
            <summary>
            Returns Data Manager service object.
            </summary>
            <param name="serviceType">Service type requested.</param>
            <returns>Data Manager service object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.Initialize">
            <summary>
            Initialize data manger object
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.ChartPicture_BeforePaint(System.Object,Dundas.Charting.WinControl.ChartPaintEventArgs)">
            <summary>
            Event fired when chart picture is going to be painted.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.ChartPicture_AfterPaint(System.Object,Dundas.Charting.WinControl.ChartPaintEventArgs)">
            <summary>
            Event fired after chart picture was painted.
            </summary>
            <param name="sender">Sebder object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.ApplyPaletteColors">
            <summary>
            Apply palette colors to the data series if UsePaletteColors property is set.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.PrepareData(System.Boolean,System.Boolean,System.String[])">
            <summary>
            Called just before the data from the series to be used to perform these operations:
             - apply palette colors to the data series
             - prepare data in series
            </summary>
            <param name="seriesApplyPaletteColors">If true each data series will be assigned a color from the palette (if it's set)</param>
            <param name="pointsApplyPaletteColors">If true each data point will be assigned a color from the palette (if it's set)</param>
            <param name="series">List of series indexes, which requires data preparation</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.IsPointSkipped(Dundas.Charting.WinControl.DataPoint)">
            <summary>
            This method checks if data point should be skipped. This 
            method will return true if data point is empty.
            </summary>
            <param name="point">Data point</param>
            <returns>This method returns true if data point is empty.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.GetNumberOfPoints(System.String[])">
            <summary>
            Gets max number of data points in specified series.
            </summary>
            <param name="series">Series IDs</param>
            <returns>Maximum number of data points</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.GetMaxYValue(System.Int32,System.String[])">
            <summary>
            Gets maximum Y value from many series
            </summary>
            <param name="valueIndex">Index of Y value to use</param>
            <param name="series">Series IDs</param>
            <returns>Maximum Y value</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.GetMaxYValue(System.String[])">
            <summary>
            Gets maximum Y value from many series
            </summary>
            <param name="series">Series IDs</param>
            <returns>Maximum Y value</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.GetMaxXValue(System.String[])">
            <summary>
            Gets maximum X value from many series
            </summary>
            <param name="series">Series IDs</param>
            <returns>Maximum X value</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.GetMaxStackedYValue(System.Int32,System.String[])">
            <summary>
            Gets maximum stacked Y value from many series
            </summary>
            <param name="valueIndex">Index of Y value to use</param>
            <param name="series">Series IDs</param>
            <returns>Maximum stacked Y value</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.GetMaxUnsignedStackedYValue(System.Int32,System.String[])">
            <summary>
            Gets maximum Unsigned stacked Y value from many series ( Stacked Area chart )
            </summary>
            <param name="valueIndex">Index of Y value to use</param>
            <param name="series">Series IDs</param>
            <returns>Maximum stacked Y value</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.GetMaxStackedXValue(System.String[])">
            <summary>
            Gets maximum stacked X value from many series
            </summary>
            <param name="series">Series IDs</param>
            <returns>Maximum stacked X value</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.GetMinYValue(System.Int32,System.String[])">
            <summary>
            Gets minimum Y value from many series
            </summary>
            <param name="valueIndex">Index of Y value to use</param>
            <param name="series">Series IDs</param>
            <returns>Minimum Y value</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.GetMinYValue(System.String[])">
            <summary>
            Gets minimum Y value from many series
            </summary>
            <param name="series">Series IDs</param>
            <returns>Minimum Y value</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.GetMinXValue(System.String[])">
            <summary>
            Gets minimum X value from many series
            </summary>
            <param name="series">Series IDs</param>
            <returns>Minimum X value</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.GetMinStackedYValue(System.Int32,System.String[])">
            <summary>
            Gets minimum stacked Y value from many series
            </summary>
            <param name="valueIndex">Index of Y value to use</param>
            <param name="series">Series IDs</param>
            <returns>Minimum stacked Y value</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.GetMinUnsignedStackedYValue(System.Int32,System.String[])">
            <summary>
            Gets minimum Unsigned stacked Y value from many series
            </summary>
            <param name="valueIndex">Index of Y value to use</param>
            <param name="series">Series IDs</param>
            <returns>Minimum stacked Y value</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.GetMinStackedXValue(System.String[])">
            <summary>
            Gets minimum stacked X value from many series
            </summary>
            <param name="series">Series IDs</param>
            <returns>Minimum stacked X value</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.GetMaxHundredPercentStackedYValue(System.Boolean,System.Int32,System.String[])">
            <summary>
            Gets maximum hundred percent stacked Y value
            </summary>
            <param name="supportNegative">Indicates that negative values are shown on the other side of the axis.</param>
            <param name="valueIndex">Index of Y value to use</param>
            <param name="series">Series names</param>
            <returns>Maximum 100% stacked Y value</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Data.DataManager.GetMinHundredPercentStackedYValue(System.Boolean,System.Int32,System.String[])">
            <summary>
            Gets minimum hundred percent stacked Y value
            </summary>
            <param name="supportNegative">Indicates that negative values are shown on the other side of the axis.</param>
            <param name="valueIndex">Index of Y value to use</param>
            <param name="series">Series names</param>
            <returns>Minimum 100% stacked Y value</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.Data.DataManager.Series">
            <summary>
            Chart series collection.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Data.DataManager.Palette">
            <summary>
            Color palette to use
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.DataPointComparer">
            <summary>
            Data points comparer class
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointComparer.#ctor">
            <summary>
            Private default constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointComparer.#ctor(Dundas.Charting.WinControl.Series,Dundas.Charting.WinControl.PointsSortOrder,System.String)">
            <summary>
            Data points comparer class constructor.
            </summary>
            <param name="series">Data series.</param>
            <param name="order">Sorting order.</param>
            <param name="sortBy">Value used for sorting ("X", "Y or Y1", "Y2", ...).</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two data points.
            </summary>
            <param name="point1">First data point.</param>
            <param name="point2">Second data point.</param>
            <returns>Zero if equal, less than zero if point1 less than point2, otherwise more than zero.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.DataPointCollection">
            <summary>
            Data points collection
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.#ctor">
            <summary>
            Data Point Collection object constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.#ctor(Dundas.Charting.WinControl.Series)">
            <summary>
            Data Point Collection object constructor.
            </summary>
            <param name="series">Series object, which the Data Point Collection belongs to.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.DataPointInit(Dundas.Charting.WinControl.DataPoint@)">
            <summary>
            Initialize data point series and name.
            </summary>
            <param name="dataPoint">Reference to the data point object to initialize.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.DataBindY(System.Collections.IEnumerable[])">
            <summary>
            Data bind Y values of the data points to the data source.
            Data source can be the Array, Collection, Ole(SQL)DataReader, DataView, DataSet, DataTable or DataRow.
            </summary>
            <param name="yValue">One or more enumerable objects with Y values.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.DataBindXY(System.Collections.IEnumerable,System.Collections.IEnumerable[])">
            <summary>
            Data bind X and Y values of the data points to the data source.
            Data source can be the Array, Collection, Ole(SQL)DataReader, DataView, DataSet, DataTable or DataRow.
            </summary>
            <param name="xValue">Enumerable objects with X values.</param>
            <param name="yValues">One or more enumerable objects with Y values.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.DataBindY(System.Collections.IEnumerable,System.String)">
            <summary>
            Data bind Y values of the data points to the data source.
            Data source can be the Array, Collection, Ole(SQL)DataReader, DataView, DataSet, DataTable or DataRow.
            </summary>
            <param name="yValue">Enumerable objects with Y values.</param>
            <param name="yFields">Name of the field(s) for Y value(s).</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.DataBindXY(System.Collections.IEnumerable,System.String,System.Collections.IEnumerable,System.String)">
            <summary>
            Data bind X and Y values of the data points to the data source.
            Data source can be the Array, Collection, Ole(SQL)DataReader, DataView, DataSet, DataTable or DataRow.
            </summary>
            <param name="xValue">Enumerable object with X values.</param>
            <param name="xField">Name of the field for X values.</param>
            <param name="yValue">Enumerable objects with Y values.</param>
            <param name="yFields">Comma separated name(s) of the field(s) for Y value(s).</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.AddY(System.Double)">
            <summary>
            Adds one data point with one Y value.
            </summary>
            <param name="yValue">Y value of the data point.</param>
            <returns>Index of newly added data point.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.AddY(System.Object[])">
            <summary>
            Adds one data point with one or more Y values.
            </summary>
            <param name="yValue">Comma separated Y values of the data point.</param>
            <returns>Index of newly added data point.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.AddXY(System.Double,System.Double)">
            <summary>
            Adds one data point with X value and one Y value.
            </summary>
            <param name="yValue">Y value of the data point.</param>
            <param name="xValue">X value of the data point.</param>
            <returns>Index of newly added data poit.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.AddXY(System.Object,System.Object[])">
            <summary>
            Adds one data point with X value and one or more Y values.
            </summary>
            <param name="yValue">List of Y values of the data point.</param>
            <param name="xValue">X value of the data point.</param>
            <returns>Index of newly added data poit.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.InsertXY(System.Int32,System.Object,System.Object[])">
            <summary>
            Insert one data point with X value and one or more Y values.
            </summary>
            <param name="index">Index after wich to insert the data point.</param>
            <param name="xValue">X value of the data point.</param>
            <param name="yValue">List of Y values of the data point.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.InsertY(System.Int32,System.Object[])">
            <summary>
            Insert one data point with one or more Y values.
            </summary>
            <param name="index">Index after wich to insert the data point.</param>
            <param name="yValue">List of Y values of the data point.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.GetDataSourceEnumerator(System.Collections.IEnumerable)">
            <summary>
            Get data source enumerator object helper function.
            </summary>
            <param name="dataSource">Data source.</param>
            <returns>Returns data source enumerator.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.ConvertEnumerationItem(System.Object,System.String)">
            <summary>
            Convert enumeration item object from DataRow and DataRowView 
            to the actual value of specified column in row
            </summary>
            <param name="item">Enumeration item.</param>
            <param name="fieldName">Converted item.</param>
            <returns></returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.AutoDetectValuesType(System.Collections.IEnumerator,System.String,System.Collections.IEnumerator,System.String)">
            <summary>
            Auto detects the X and Y(s) values type
            </summary>
            <param name="xEnumerator">X values enumerator.</param>
            <param name="xField">X value field.</param>
            <param name="yEnumerator">Y values enumerator.</param>
            <param name="yField">Y value field.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.GetValueType(System.Collections.IEnumerator,System.String)">
            <summary>
            Return value type.
            </summary>
            <param name="enumerator">Values enumerator.</param>
            <param name="field">Value field.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.FindValue(System.Double,System.String,System.Int32@)">
            <summary>
            Find first point with Max value from specified index.
            </summary>
            <param name="valueToFind">Point value to find.</param>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <param name="startFromIndex">Index of the point to start looking from. Returns index of found point or -1.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.FindValue(System.Double,System.String)">
            <summary>
            Find first point with Max value from specified index.
            </summary>
            <param name="valueToFind">Point value to find.</param>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.FindValue(System.Double)">
            <summary>
            Find first point with Max value from specified index.
            </summary>
            <param name="valueToFind">Point value to find.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.FindMaxValue(System.String,System.Int32@)">
            <summary>
            Find first point with Max value from specified index.
            </summary>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <param name="startFromIndex">Index of the point to start looking from. Returns index of found point or -1.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.FindMaxValue(System.String)">
            <summary>
            Find first point with Max value from specified index.
            </summary>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.FindMaxValue">
            <summary>
            Find first point with Max value from specified index.
            </summary>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.FindMinValue(System.String,System.Int32@)">
            <summary>
            Find first point with Min value from specified index.
            </summary>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <param name="startFromIndex">Index of the point to start looking from. Returns index of found point or -1.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.FindMinValue(System.String)">
            <summary>
            Find first point with Min value from specified index.
            </summary>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.FindMinValue">
            <summary>
            Find first point with Min value from specified index.
            </summary>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.Contains(System.Object)">
            <summary>
            Check if specified object exsists in the collection.
            </summary>
            <param name="value">Object to check.</param>
            <returns>True if object exsist.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.IndexOf(System.Object)">
            <summary>
            Gets first index of the collection item equal to the object provided.
            </summary>
            <param name="value">Object to look for.</param>
            <returns>Index of found object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.Remove(System.Object)">
            <summary>
            Remove object from the collection
            </summary>
            <param name="value">Value to be removed.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.RemoveAt(System.Int32)">
            <summary>
            Remove item from the collection by index.
            </summary>
            <param name="index">Zero based index.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.Add(Dundas.Charting.WinControl.DataPoint)">
            <summary>
            Add data point object into the collection.
            </summary>
            <param name="value">Data point to add.</param>
            <returns>Index of the newly added object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.Add(System.Object)">
            <summary>
            Add data point object into the collection.
            </summary>
            <param name="value">Data point to add.</param>
            <returns>Index of the newly added object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.Insert(System.Int32,Dundas.Charting.WinControl.DataPoint)">
            <summary>
            Insert data point object into the collection.
            </summary>
            <param name="index">Zero based index.</param>
            <param name="value">Data point to insert.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.Insert(System.Int32,System.Object)">
            <summary>
            Insert data point object into the collection.
            </summary>
            <param name="index">Zero based index.</param>
            <param name="value">Data point to insert.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the current collection to the specified one-dimensional 
            collection starting at the specified destination index.
            </summary>
            <param name="array">Destination collection.</param>
            <param name="index">The index in collection at which copying begins.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointCollection.GetEnumerator">
            <summary>
            Get collection enumerator.
            </summary>
            <returns>Collection enumerator.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointCollection.Item(System.Int32)">
            <summary>
            Indexer of the class. Returns the Data Point object by integer index.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.DataPoint">
            <summary>
            Stores values and attributes of one Data Point in the Data series.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.DataPointAttributes">
            <summary>
            Stores attributes of one Data Point and Data series.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.#ctor">
            <summary>
            Data Point Attributes object constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.#ctor(Dundas.Charting.WinControl.Series)">
            <summary>
            Data Point Attributes object constructor.
            </summary>
            <param name="series">Series object, which the Data Point belongs to.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.IsAttributeSet(System.String)">
            <summary>
            Checks if attribute with specified name was set.
            </summary>
            <param name="name">Name of the attribute to check.</param>
            <returns>True if attribute was set.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.DeleteAttribute(System.String)">
            <summary>
            Delete Data Point attribute with specified name.
            </summary>
            <param name="name">Name of the atribute to delete.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.GetAttribute(System.String)">
            <summary>
            Returns an attribute of the Data Point. If required attribute is not set
            in the Data Point the default attribute of the Data series is returned.
            </summary>
            <param name="name">Attribute name.</param>
            <returns>Attribute value as string.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.GetAttributeObject(System.String)">
            <summary>
            Returns an attribute object of the Data Point. If required attribute is not set
            in the Data Point the default attribute of the Data series is returned.
            </summary>
            <param name="name">Attribute name.</param>
            <returns>Attribute value.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.SetAttribute(System.String,System.String)">
            <summary>
            Sets an attribute of the Data Point. 
            </summary>
            <param name="name">Attribute name.</param>
            <param name="attributeValue">Attribute new value.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.SetAttributeObject(System.String,System.Object)">
            <summary>
            Sets an attribute of the Data Point as an object. 
            </summary>
            <param name="name">Attribute name.</param>
            <param name="attributeValue">Attribute new value.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.SetDefault(System.Boolean)">
            <summary>
            Set default attributes of the data point.
            <param name="clearAll">Indicates that previous attributes must be cleared.</param>
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeLabel">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeAxisLabel">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeLabelFormat">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeShowLabelAsValue">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeColor">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeBorderColor">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeBorderStyle">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeBorderWidth">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeBackImage">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeBackImageMode">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeBackImageTranspColor">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeBackImageAlign">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeBackGradientType">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeBackGradientEndColor">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeBackHatchStyle">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeFont">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeFontColor">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeFontAngle">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeMarkerStyle">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeMarkerSize">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeMarkerImage">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeMarkerImageTranspColor">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeMarkerColor">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeMarkerBorderColor">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeToolTip">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeHref">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeMapAreaAttributes">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeShowInLegend">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeLegendText">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeLegendToolTip">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeLegendHref">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ShouldSerializeLegendMapAreaAttributes">
            <summary>
            Returns true if property should be serialized.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetLabel">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetAxisLabel">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetLabelFormat">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetShowLabelAsValue">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetColor">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetBorderColor">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetBorderStyle">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetBorderWidth">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetBackImage">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetBackImageMode">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetBackImageTranspColor">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetBackImageAlign">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetBackGradientType">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetBackGradientEndColor">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetBackHatchStyle">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetFont">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetFontColor">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetFontAngle">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetMarkerStyle">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetMarkerSize">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetMarkerImage">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetMarkerImageTranspColor">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetMarkerColor">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetMarkerBorderColor">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetToolTip">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetHref">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetMapAreaAttributes">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetShowInLegend">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetLegendText">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetLegendToolTip">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetLegendHref">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.ResetLegendMapAreaAttributes">
            <summary>
            Resets property to it's default value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPointAttributes.Invalidate(System.Boolean)">
            <summary>
            Invalidate chart area.
            </summary>
            <param name="invalidateLegend">Invalidate legend area only.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.Item(System.Int32)">
            <summary>
            Attributes indexer, which returns Attribute Name by index.
            </summary>
            <param name="index">Index of the atribute name.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.Item(System.String)">
            <summary>
            Attributes indexer, which returns Attribute Value by Attribute Name.
            </summary>
            <param name="name">Name of the atribute.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.Label">
            <summary>
            Data point label text.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.AxisLabel">
            <summary>
            Data point X axis label text.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.LabelFormat">
            <summary>
            Data point label format string
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.ShowLabelAsValue">
            <summary>
            If true shows point's value as a label.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.Color">
            <summary>
            Data point color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.BorderColor">
            <summary>
            Data point border color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.BorderStyle">
            <summary>
            Data point border style
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.BorderWidth">
            <summary>
            Data point border width
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.BackImage">
            <summary>
            Data point background image
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.BackImageMode">
            <summary>
            Data point background image drawing mode.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.BackImageTranspColor">
            <summary>
            Background image transparent color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.BackImageAlign">
            <summary>
            Background image alignment used by ClampUnscale drawing mode.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.BackGradientType">
            <summary>
            Data point background gradient type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.BackGradientEndColor">
            <summary>
            Data point background gradient end color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.BackHatchStyle">
            <summary>
            Data point hatch style
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.Font">
            <summary>
            Data point font
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.FontColor">
            <summary>
            Data point line color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.FontAngle">
            <summary>
            Data point font angle
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.MarkerStyle">
            <summary>
            Data point marker style
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.MarkerSize">
            <summary>
            Data point marker size
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.MarkerImage">
            <summary>
            Data point marker image
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.MarkerImageTranspColor">
            <summary>
            Data point marker image transparent color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.MarkerColor">
            <summary>
            Data point marker color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.MarkerBorderColor">
            <summary>
            Data point marker border color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.CustomAttributes">
            <summary>
            Custom Data Point attributes specified as: AttrName1=Value1, AttrName2=Value2, ...  
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.ToolTip">
            <summary>
            The tooltip.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.ShowInLegend">
            <summary>
            Indicates that item is shown in the legend.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.LegendText">
            <summary>
            Text of the item in the legend
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPointAttributes.LegendToolTip">
            <summary>
            Tooltip of the item in the legend
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPoint.#ctor">
            <summary>
            Data Point object constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPoint.#ctor(Dundas.Charting.WinControl.Series)">
            <summary>
            Data Point object constructor.
            </summary>
            <param name="series">series object, which the Data Point belongs to.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPoint.#ctor(System.Double,System.String)">
            <summary>
            Data Point object constructor.
            </summary>
            <param name="xValue">Point X value.</param>
            <param name="yValues">String of comma separated Y values.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPoint.#ctor(System.Double,System.Double)">
            <summary>
            Data Point object constructor.
            </summary>
            <param name="xValue">Point X value.</param>
            <param name="yValue">Point Y value.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPoint.ValueConverter(System.Object)">
            <summary>
            Converts object to double.
            </summary>
            <param name="value">Object to convert.</param>
            <returns>Double value.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPoint.SetValueXY(System.Object,System.Object[])">
            <summary>
            Set X value and one or more Y values of the data point.
            </summary>
            <param name="xValue">X value of the data point.</param>
            <param name="yValue">Y value(s) of the data point. Separate multiple values with commas.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPoint.SetValueY(System.Object[])">
            <summary>
            Set one or more Y values of the data point.
            </summary>
            <param name="yValue">Y value(s) of the data point. Separate multiple values with commas.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPoint.Clone">
            <summary>
            Returned a copy of the DataPoint object.
            </summary>
            <returns>Copy of the data point.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPoint.ResizeYValueArray(System.Int32)">
            <summary>
            Resize Y values array.
            </summary>
            <param name="newSize">New number of Y valuesin array.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPoint.GetValueY(System.Int32)">
            <summary>
            Gets on of the data points Y values by index.
            </summary>
            <param name="yValueIndex">Y value index.</param>
            <returns>Y value</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPoint.SetValueY(System.Int32,System.Double)">
            <summary>
            Sets on of the data points Y values by index.
            </summary>
            <param name="yValueIndex">Y value index.</param>
            <param name="yValue">Y value.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPoint.GetValueByName(System.String)">
            <summary>
            Helper function, which returns point value by it's name.
            </summary>
            <param name="valueName">Point value names. X, Y, Y2,...</param>
            <returns>Point value.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPoint.ReplaceKeywords(System.String)">
            <summary>
            Replaces predefined keyword inside the string with their values.
            </summary>
            <param name="strOriginal">Original string with keywords.</param>
            <returns>Modified string.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPoint.ResetYValues">
            <summary>
            Resets point's Y values.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPoint.XValue">
            <summary>
            X value of the series data point
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPoint.YValues">
            <summary>
            Y value(s) of the series data point
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPoint.Empty">
            <summary>
            Empty data point flag
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.DataPoint.Name">
            <summary>
            Data point name. For internal use only!
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPoint.DataPointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            This method overrides CanConvertTo from TypeConverter. This is called when someone
            wants to convert an instance of object to another type.  Here,
            only conversion to an InstanceDescriptor is supported.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="destinationType">Destination type.</param>
            <returns>True if object can be converted.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataPoint.DataPointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            This code performs the actual conversion from an object to an InstanceDescriptor.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Object value.</param>
            <param name="destinationType">Destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.DataPoint3D">
            <summary>
            Class stores additional information about the data point in 3D space.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DataPoint3D.dataPoint">
            <summary>
            Reference to the 2D data point object
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DataPoint3D.index">
            <summary>
            Data point index.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DataPoint3D.xPosition">
            <summary>
            Point X position in relative coordinates.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DataPoint3D.yPosition">
            <summary>
            Point Y position in relative coordinates.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DataPoint3D.xCenterVal">
            <summary>
            Point X center position in relative coordinates. Used for side-by-side charts.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DataPoint3D.zPosition">
            <summary>
            Point Z position in relative coordinates.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DataPoint3D.width">
            <summary>
            Point width.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DataPoint3D.height">
            <summary>
            Point height.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DataPoint3D.depth">
            <summary>
            Point depth.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DataPoint3D.indexedSeries">
            <summary>
            Indicates that point belongs to indexed series.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.AxisType">
            <summary>
            Chart axis type (Primary or Secondary). 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AxisType.Primary">
            <summary>
            Primary axis. For X axis - bottom, for Y axis - left.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AxisType.Secondary">
            <summary>
            Secondary axis. For X axis - top, for Y axis - right.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.PointsSortOrder">
            <summary>
            Sorting order (Ascending or Descending).
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PointsSortOrder.Ascending">
            <summary>
            Ascending sorting order
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PointsSortOrder.Descending">
            <summary>
            Descending sorting order
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.SeriesCollection">
            <summary>
            Data series collection
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.SeriesCollection.#ctor">
            <summary>
            Data series collection object default constructor is unaccessable.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.SeriesCollection.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Data series collection object constructor.
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Dundas.Charting.WinControl.SeriesCollection.GetIndex(System.String)">
            <summary>
            Get series index by name.
            </summary>
            <param name="name">Name of the data series.</param>
            <returns>Index of the data series or -1 if it does not exist.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.SeriesCollection.Add(System.String)">
            <summary>
            Add new data series.
            </summary>
            <param name="name">Name of the new data series.</param>
            <returns>Newly added data series object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.SeriesCollection.Add(System.String,System.Int32)">
            <summary>
            Add new data series.
            </summary>
            <param name="name">Name of the new data series.</param>
            <param name="yValuesPerPoint">Number of Y values per data point.</param>
            <returns>Newly added data series object</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.SeriesCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.SeriesCollection.Contains(System.Object)">
            <summary>
            Check if specified object exsists in the collection.
            </summary>
            <param name="value">Object to check.</param>
            <returns>True if object exsist.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.SeriesCollection.IndexOf(System.Object)">
            <summary>
            Gets first index of the collection item equal to the object provided.
            </summary>
            <param name="value">Object to look for.</param>
            <returns>Index of found object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.SeriesCollection.Remove(System.Object)">
            <summary>
            Remove object from the collection
            </summary>
            <param name="value">Value to be removed.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.SeriesCollection.RemoveAt(System.Int32)">
            <summary>
            Remove item from the collection by index.
            </summary>
            <param name="index">Zero based index.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.SeriesCollection.Add(System.Object)">
            <summary>
            Add series object into the collection.
            </summary>
            <param name="value">Series to add.</param>
            <returns>Index of the newly added object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.SeriesCollection.Insert(System.Int32,Dundas.Charting.WinControl.Series)">
            <summary>
            Insert series object into the collection.
            </summary>
            <param name="index">Zero based index.</param>
            <param name="value">Series to insert.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.SeriesCollection.Insert(System.Int32,System.Object)">
            <summary>
            Insert series object into the collection.
            </summary>
            <param name="index">Zero based index.</param>
            <param name="value">Series to insert.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.SeriesCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the current collection to the specified one-dimensional 
            collection starting at the specified destination index.
            </summary>
            <param name="array">Destination collection.</param>
            <param name="index">The index in collection at which copying begins.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.SeriesCollection.GetEnumerator">
            <summary>
            Get collection enumerator.
            </summary>
            <returns>Collection enumerator.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.SeriesCollection.Invalidate(System.String)">
            <summary>
            Invalidate chart (or just chart area ) when collection is changed.
            </summary>
            <param name="chartArea">Invalidate chart area only.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.SeriesCollection.Item(System.Object)">
            <summary>
            Indexer of the class. Returns the Data Series object
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.SeriesCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.SeriesCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.SeriesCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.SeriesCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.SeriesCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Series">
            <summary>
            Stores data points and default series attributes.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.#cctor">
            <summary>
            Data Series static constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.#ctor">
            <summary>
            Data Series object constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.#ctor(System.String)">
            <summary>
            Data Series object constructor.
            </summary>
            <param name="name">Name of the data series</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.#ctor(System.String,System.Int32)">
            <summary>
            Data Series object constructor.
            </summary>
            <param name="name">Name of the data series.</param>
            <param name="yValues">Number of y value(s) per data point.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.InitProperties(System.String,System.Int32)">
            <summary>
            Initialize series properties
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.CheckSupportedTypes(System.Type)">
            <summary>
            Throws exception if specified value type is not supported.
            </summary>
            <param name="type">Value type to check.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.ApplyPaletteColors">
            <summary>
            Apply palette colors to the data series points if UsePaletteColors property is set.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.GetDummyData(Dundas.Charting.WinControl.ChartValueTypes)">
            <summary>
            Gets design time dummy data.
            </summary>
            <param name="type">Type of the data to get.</param>
            <returns>Dummy data for chart in design-time.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.GetTotalYValue">
            <summary>
            Returns total of the Y values.
            </summary>
            <returns>Y values total.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.ReplaceKeywords(System.String)">
            <summary>
            Replaces predefined keyword inside the string with their values.
            </summary>
            <param name="strOriginal">Original string with keywords.</param>
            <returns>Modified string.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.ReplaceOneKeyword(System.String,System.String,System.Double,Dundas.Charting.WinControl.ChartValueTypes,System.String)">
            <summary>
            Helper function which replaces one keyword.
            </summary>
            <param name="strOriginal">Original string.</param>
            <param name="keyword">Keyword to replace.</param>
            <param name="value">Value to replace with.</param>
            <param name="valueType">Type of value.</param>
            <param name="defaultFormat">Default format string.</param>
            <returns>Result string.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.TraceWrite(System.String,System.String)">
            <summary>
            Writes trace information to the trace log.
            </summary>
            <param name="category">The trace category that receives the message. </param>
            <param name="message">The trace message to write to the log. </param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.Sort(Dundas.Charting.WinControl.PointsSortOrder,System.String)">
            <summary>
            Sorts points in the series.
            </summary>
            <param name="order">Sorting order.</param>
            <param name="sortBy">Value used for sorting (X, Y, Y2, ...).</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.Sort(Dundas.Charting.WinControl.PointsSortOrder)">
            <summary>
            Sorts points in the series.
            </summary>
            <param name="order">Sorting order.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.Sort(System.Collections.IComparer)">
            <summary>
            Sorts points in the series using IComparer interface.
            </summary>
            <param name="comparer">IConparer interface.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.UnPrepareData(System.ComponentModel.ISite)">
            <summary>
            Called after the series was drawn.
            </summary>
            <param name="controlSite">Site interface of the control.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.ResetAutoValues">
            <summary>
            Reset auto calculated series values.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.PrepareData(System.ComponentModel.ISite,System.Boolean)">
            <summary>
            Called just before the data from the series to be used to perform these operations:
             - apply palette colors to the data points
             - fill empty data points
             - provide fake data in design mode
             - retreving data from the DataSource
            </summary>
            <param name="controlSite">Site interface of the control</param>
            <param name="applyPaletteColors">If true each data point will be assigned a color from the palette (if it's set)</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.Invalidate(System.Boolean,System.Boolean)">
            <summary>
            Invalidate chart or just a chart area and/or legend when collection is changed
            </summary>
            <param name="invalidateAreaOnly">Invalidate chart area only.</param>
            <param name="invalidateLegend">Invalidate legend area only.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.Series.Name">
            <summary>
            Data series name.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Series.XValueType">
            <summary>
            Type of values stored on the X axes
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Series.XValueIndexed">
            <summary>
            Indicates that a data point index (1,2,...) will be used for the X value.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Series.YValueType">
            <summary>
            Type of values stored on the Y axes
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Series.YValuesPerPoint">
            <summary>
            Number of Y values stored for each Data Point.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Series.Points">
            <summary>
            Series Data Points collection.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Series.Palette">
            <summary>
            Color palette to use
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Series.MarkerStep">
            <summary>
            Specify how often to diaplay data point markers
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Series.ShadowOffset">
            <summary>
            Series shadow offset.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Series.ShadowColor">
            <summary>
            Data shadow color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Series.XAxisType">
            <summary>
            Type of horizontal axes.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Series.YAxisType">
            <summary>
            Type of vertical axes.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Series.ChartType">
            <summary>
            Chart type used to draw the series.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Series.ChartArea">
            <summary>
            Chart area in which this series is drawn
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Series.AxisLabel">
            <summary>
            Data point X axis label text
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.SeriesConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            This method overrides CanConvertTo from TypeConverter. This is called when someone
            wants to convert an instance of object to another type.  Here,
            only conversion to an InstanceDescriptor is supported.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="destinationType">Destination type.</param>
            <returns>True if object can be converted.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Series.SeriesConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            This code performs the actual conversion from an object to an InstanceDescriptor.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Object value.</param>
            <param name="destinationType">Destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.AreaCollectionEditor">
            <summary>
            Designer editor for the chart areas collection.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.ChartCollectionEditor">
            <summary>
            Collection editor that supports property help in the property grid
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ChartCollectionEditor.#ctor(System.Type)">
            <summary>
            Object constructor.
            </summary>
            <param name="type">Type.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ChartCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edit object's value.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="provider">Service provider.</param>
            <param name="value">Value to edit.</param>
            <returns>The new value of the object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ChartCollectionEditor.ShowHelp">
            <summary>
            Displaying help for the curently selected item in the property grid
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ChartCollectionEditor.CreateCollectionForm">
            <summary>
            Cretaes form for collection editing.
            </summary>
            <returns>Form object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ChartCollectionEditor.OnOkClicked(System.Object,System.EventArgs)">
            <summary>
            Update design-time HTML when OK button is clicked in the collection editor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ChartCollectionEditor.OnControlAddedRemoved(System.Object,System.Windows.Forms.ControlEventArgs)">
            <summary>
            Update design-time HTML when propery is added or removed
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ChartCollectionEditor.OnPropertyChanged(System.Object,System.Windows.Forms.PropertyValueChangedEventArgs)">
            <summary>
            Update design-time HTML when propery is changed
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Design.ChartCollectionEditor.HelpTopic">
            <summary>
            Ovveride the HelpTopic property to provide different topics,
            depending on selected property.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AreaCollectionEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AreaCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edit area value. 
            Saves a referense to the chart descriptor context.
            </summary>
            <param name="context">Editing context.</param>
            <param name="provider">Provider.</param>
            <param name="value">Value to edit.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.AxesArrayEditor">
            <summary>
            Designer editor for the chart areas collection.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxesArrayEditor.#ctor">
            <summary>
            Object constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxesArrayEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edit object's value.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="provider">Service provider.</param>
            <param name="value">Calue.</param>
            <returns>Object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxesArrayEditor.ShowHelp">
            <summary>
            Displaying help for the curently selected item in the property grid
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxesArrayEditor.CreateCollectionForm">
            <summary>
            Creates editor's form.
            </summary>
            <returns>Collection form.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.Design.AxesArrayEditor.HelpTopic">
            <summary>
            Ovveride the HelpTopic property to provide different topics,
            depending on selected property.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.AxesArrayConverter">
            <summary>
            Converter object of axes array
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxesArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Subproperties NOT suported.
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Always false.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxesArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overrides the ConvertTo method of TypeConverter.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value.</param>
            <param name="destinationType">Destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.AxisLabelDateValueConverter">
            <summary>
            Converts labels, grid and ticks start position to support dates format
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisLabelDateValueConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert Min and Max values to string if step type is set to one of the DateTime type
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Convertion destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisLabelDateValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert Min and Max values from string if step type is set to one of the DateTime type
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert from.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.AxisCrossingValueConverter">
            <summary>
            Converts crossing property of the axis. 
            Possible values: double, date, "Auto", "Min", "Max"
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.AxisMinMaxValueConverter">
            <summary>
            Converts min and max properties of the axis depending on the values type
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisMinMaxValueConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert Min and Max values to string if step type is set to one of the DateTime type
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Convertion destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisMinMaxValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert Min and Max values from string if step type is set to one of the DateTime type
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert from.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisCrossingValueConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values supported - return true.
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Standard values supported.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisCrossingValueConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values are not exclusive - return false
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Non exclusive standard values.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisCrossingValueConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Fill in the list of standart values.
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Standart values collection.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisCrossingValueConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert crossing value to string.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Convertion destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisCrossingValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert crossing values from string
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert from.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.AxisMinMaxAutoValueConverter">
            <summary>
            Converts maximum and minimum property of the axis. 
            Possible values: double, date, "Auto",
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisMinMaxAutoValueConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values supported - return true
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Standard values supported.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisMinMaxAutoValueConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values are not exclusive - return false
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Non exclusive standard values.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisMinMaxAutoValueConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Fill in the list of data series names.
            </summary>
            <param name="context">Descriptor context.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisMinMaxAutoValueConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert minimum or maximum value to string
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Convertion destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisMinMaxAutoValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert minimum or maximum values from string
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.StripLineTitleAngleConverter">
            <summary>
            Converts title angle property of the strip line
            Possible values: 0, 90, 180, 270
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.StripLineTitleAngleConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values supported - return true
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Standard values supported.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.StripLineTitleAngleConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values are not exclusive - return false
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Non exclusive standard values.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.StripLineTitleAngleConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Fill in the list of data series names.
            </summary>
            <param name="context">Descriptor context.</param>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.AxisIntervalValueConverter">
            <summary>
            Converts Interval and IntervalOffset properties of the axis
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Design.AxisIntervalValueConverter.hideNotSet">
            <summary>
            Inicates that "NotSet" option is available
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisIntervalValueConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values supported - return true.
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Standard values supported.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisIntervalValueConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values are not exclusive - return false
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Non exclusive standard values.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisIntervalValueConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Fill in the list of standart values.
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Standart values collection.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisIntervalValueConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert crossing value to string.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Convertion destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisIntervalValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert crossing values from string
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert from.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.AxisElementIntervalValueConverter">
            <summary>
            Converts Interval and IntervalOffset properties of the label style, tick marks and grids
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AxisElementIntervalValueConverter.#ctor">
            <summary>
            Show the NotSet option for interval
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.ColorPaletteEditor">
            <summary>
            Type editor for the palette properties.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ColorPaletteEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Override this function to support palette colors drawing
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Can paint values.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ColorPaletteEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Override this function to support palette colors drawing
            </summary>
            <param name="e">Paint value event arguments.</param>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.SeriesAreaNameConverter">
            <summary>
            Chart area name converter. Displays list of available areas names
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.SeriesAreaNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values supported - return true
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Standard values supported.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.SeriesAreaNameConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values are not exclusive - return false
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Non exclusive standard values.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.SeriesAreaNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Fill in the list of the chart areas for the series.
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Standart values collection.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.ChartTypeEditor">
            <summary>
            Chart type editor. Paint chart type image in the property grid.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ChartTypeEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Override this function to support chart type drawing
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Can paint values.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ChartTypeEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Override this function to support chart type drawing
            </summary>
            <param name="e">Paint value event arguments.</param>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.ChartTypeConverter">
            <summary>
            Chart type converter. Displays list of available chart type names
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ChartTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values supported - return true
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Standard values supported.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ChartTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values are not exclusive - return false
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Non exclusive standard values.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ChartTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Fill in the list of chart type names.
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Standard values collection.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.SeriesNameConverter">
            <summary>
            Data series name converter. Displays list of available series names
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.SeriesNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values supported - return true
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Standard values supported.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.SeriesNameConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values are not exclusive - return false
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Non exclusive standard values.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.SeriesNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Fill in the list of data series names.
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Standard values collection.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.AngleValueEditor">
            <summary>
            Editor for angles
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AngleValueEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edit angle value by showing the AngleTrackForm form
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="provider">Service provider.</param>
            <param name="value">Value to edit.</param>
            <returns>The new value of the object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AngleValueEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Angle value editor type is "DropDown"
            </summary>
            <param name="context">Descriptor context.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AngleValueEditor.ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Close dropdown form when value was changed.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Dundas.Charting.WinControl.Design.AngleTrackForm.components">
            <summary>
               Required designer variable.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AngleTrackForm.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AngleTrackForm.Dispose(System.Boolean)">
            <summary>
               Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AngleTrackForm.InitializeComponent">
            <summary>
               Required method for Designer support—do not modify
               the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AngleTrackForm.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse button down
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AngleTrackForm.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse button up
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AngleTrackForm.OnDoubleClick(System.EventArgs)">
            <summary>
            Mouse double clicked
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AngleTrackForm.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse move
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AngleTrackForm.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draw content of the angle tracking form
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.AngleTrackForm.OnValueChanged(System.EventArgs)">
            <summary>
            Value changed evnt.
            </summary>
            <param name="e">Arguments.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.Design.AngleTrackForm.Angle">
            <summary>
               Value of the angle in degrees
            </summary>
        </member>
        <member name="E:Dundas.Charting.WinControl.Design.AngleTrackForm.ValueChanged">
            <summary>
            Value changed event.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.NoNameExpandableObjectConverter">
            <summary>
            Data point attributes converter
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.NoNameExpandableObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overrides the ConvertTo method of TypeConverter.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Convertion destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.DoubleArrayConverter">
            <summary>
            Converter for the array of doubles
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DoubleArrayConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overrides the CanConvertFrom method of TypeConverter.
            The ITypeDescriptorContext interface provides the context for the
            conversion. Typically this interface is used at design time to 
            provide information about the design-time container.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="sourceType">Convertion source type.</param>
            <returns>Indicates if convertion is possible.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DoubleArrayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overrides the ConvertFrom method of TypeConverter.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert from.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DoubleArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overrides the ConvertTo method of TypeConverter.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Convertion destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.DataPointValueConverter">
            <summary>
            Converts data point values to and from date string format
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DataPointValueConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert values to date string
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Convertion destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DataPointValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert values from date string.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert from.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.DataPointCollectionEditor">
            <summary>
            Designer editor for the data points collection.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DataPointCollectionEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DataPointCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Do not allow to edit if multiple series selected.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="provider">Service provider.</param>
            <param name="value">Value to edit.</param>
            <returns>The new value of the object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DataPointCollectionEditor.CreateInstance(System.Type)">
            <summary>
            Create instance of data point object
            </summary>
            <param name="itemType">Item type.</param>
            <returns>New item instance.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.SeriesCollectionEditor">
            <summary>
            Designer editor for the data series collection.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.SeriesCollectionEditor.#ctor">
            <summary>
            Object constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.SeriesCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edit series value.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="provider">Service provider.</param>
            <param name="value">Value to edit.</param>
            <returns>The new value of the object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.SeriesCollectionEditor.CreateInstance(System.Type)">
            <summary>
            Create series instance in the editor 
            </summary>
            <param name="itemType">Item type.</param>
            <returns>Newly created item.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.SeriesYValueTypeConverter">
            <summary>
            Removes the String type for Y axes
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.SeriesYValueTypeConverter.#ctor(System.Type)">
            <summary>
            Public constructor
            </summary>
            <param name="type">Enumeration type.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.SeriesYValueTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Fill in the list of data series names.
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Standard values collection.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.ElementPositionConverter">
            <summary>
            Element position converter.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ElementPositionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overrides the CanConvertFrom method of TypeConverter.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="sourceType">Convertion source type.</param>
            <returns>Indicates if convertion is possible.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ElementPositionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overrides the CanConvertTo method of TypeConverter.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="destinationType">Destination type.</param>
            <returns>Indicates if convertion is possible.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ElementPositionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overrides the ConvertTo method of TypeConverter.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Convertion destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ElementPositionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overrides the ConvertFrom method of TypeConverter.
            Converts from string with comma separated values.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert from.</param>
            <returns>Indicates if convertion is possible.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.FlagsEnumUITypeEditor">
            <summary>
            UI type editor for the enumerations with Flags attribute
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.FlagsEnumUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Display a drop down list with check boxes.
            </summary>
            <param name="context">Editing context.</param>
            <param name="provider">Provider.</param>
            <param name="value">Value to edit.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.FlagsEnumUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets editing style.
            </summary>
            <param name="context">Editing context.</param>
            <returns>Editor style.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.FlagsEnumCheckedListBox">
            <summary>
            Checked list box, which is used for the UI type editing.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.FlagsEnumCheckedListBox.#ctor(System.Object)">
            <summary>
            Public constructor.
            </summary>
            <param name="editValue">Value to edit.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.FlagsEnumCheckedListBox.FillList">
            <summary>
            Fills checked list items
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.FlagsEnumCheckedListBox.GetNewValue">
            <summary>
            Gets new enumeration value.
            </summary>
            <returns>New enum value.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.GradientEditor">
            <summary>
            Type editor for the gradient type.
            Paints a rectangle with gradient sample.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.GradientEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Override this function to support palette colors drawing
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Can paint values.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.GradientEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Override this function to support palette colors drawing
            </summary>
            <param name="e">Paint value event arguments.</param>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.HatchStyleEditor">
            <summary>
            Type editor for the hatch type.
            Paints a rectangle with hatch sample.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.HatchStyleEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Override this function to support palette colors drawing
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Can paint values.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.HatchStyleEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Override this function to support palette colors drawing
            </summary>
            <param name="e">Paint value event arguments.</param>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.ImageValueEditor">
            <summary>
            Image string editor class.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ImageValueEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Override this function to support palette colors drawing
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Can paint values.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.ImageValueEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Override this function to support palette colors drawing
            </summary>
            <param name="e">Paint value event arguments.</param>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.LabelFormatEditor">
            <summary>
            Editor for labels format
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LabelFormatEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edit label format by showing the form
            </summary>
            <param name="context">Editing context.</param>
            <param name="provider">Provider.</param>
            <param name="value">Value to edit.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LabelFormatEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Show modal form.
            </summary>
            <param name="context">Editing context.</param>
            <returns>Editor style.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.LabelFormatEditorForm">
            <summary>
            Summary description for LabelFormatEditorForm.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Design.LabelFormatEditorForm.resultFormat">
            <summary>
            Result format
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Design.LabelFormatEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LabelFormatEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LabelFormatEditorForm.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LabelFormatEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LabelFormatEditorForm.UpdateNumericSample">
            <summary>
            Updates numeric sample on the form.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LabelFormatEditorForm.LabelFormatEditorForm_Load(System.Object,System.EventArgs)">
            <summary>
            Form loading
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Argument.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LabelFormatEditorForm.textBoxPrecision_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Precision changed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Argument.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LabelFormatEditorForm.comboBoxDateForamat_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Date format changed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Argument.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LabelFormatEditorForm.textBoxFormatString_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Format changed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Argument.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LabelFormatEditorForm.comboBoxCustomFormatType_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Custom format changed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Argument.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LabelFormatEditorForm.UpdateCustomExample">
            <summary>
            Updates custom formatting sample.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LabelFormatEditorForm.tabControl_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Tab control changed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Argument.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LabelFormatEditorForm.buttonOk_Click(System.Object,System.EventArgs)">
            <summary>
            Ok button clicked.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Argument.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LabelFormatEditorForm.buttonCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Cancel button clicked.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Argument.</param>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.LegendAreaNameConverter">
            <summary>
            Chart area name converter. Displays list of available areas names
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LegendAreaNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values supported - return true
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Standard values supported.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LegendAreaNameConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values are not exclusive - return false
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Non exclusive standard values.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LegendAreaNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Fill in the list of data series names.
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Standart values collection.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.LegendConverter">
            <summary>
            Legend converter
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LegendConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overrides the GetPropertiesSupported method of TypeConverter.
            Save reference to the descriptor context.
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Indicates if properties are supported.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.LegendCollectionEditor">
            <summary>
            Designer editor for the custom legend items collection.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LegendCollectionEditor.#ctor">
            <summary>
            Object constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.LegendCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edit object's value.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="provider">Service provider.</param>
            <param name="value">Calue.</param>
            <returns>Object.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.MarkerStyleEditor">
            <summary>
            Type editor for the marker style.
            Paints a rectangle with marker sample.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.MarkerStyleEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Override this function to support palette colors drawing
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Can paint values.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.MarkerStyleEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Override this function to support palette colors drawing
            </summary>
            <param name="e">Paint value event arguments.</param>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.RectangleFConverter">
            <summary>
            Converter for the RectangleF class.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.RectangleFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overrides the GetPropertiesSupported method of TypeConverter.
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Support properties.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.RectangleFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Overrides the GetPropertiesSupported method of TypeConverter.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="value">Value.</param>
            <param name="attributes">Attributes.</param>
            <returns>Property descriptor collection.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.RectangleFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overrides the CanConvertFrom method of TypeConverter.
            The ITypeDescriptorContext interface provides the context for the
            conversion. Typically this interface is used at design time to 
            provide information about the design-time container.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="sourceType">Convertion source type.</param>
            <returns>Indicates if convertion is possible.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.RectangleFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overrides the CanConvertTo method of TypeConverter.
            </summary>
            <param name="context">Context.</param>
            <param name="destinationType">Destination type.</param>
            <returns>Indicates if convertion is possible.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.RectangleFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overrides the ConvertTo method of TypeConverter.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Convertion destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.RectangleFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert values from string.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert from.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.WinChartDesigner">
            <summary>
            Dundas chart windows forms control designer
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.WinChartDesigner.OnSetComponentDefaults">
            <summary>
            Set default values for properties of the component.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Design.WinChartDesigner.wizardAssembly">
            <summary>
            Wizard assembly.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.WinChartDesigner.OnWizard(System.Object,System.EventArgs)">
            <summary>
            Wizard verb was selected.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.WinChartDesigner.ShowWizard(System.Object,System.Boolean)">
            <summary>
            Shows Wizard form
            </summary>
            <param name="chart">Chart control.</param>
            <param name="loadData">Load data flag.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.Design.WinChartDesigner.Verbs">
            <summary>
            Control's verbs
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.WinChartDesignerSerializer">
            <summary>
            Windows forms chart control designer class.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.WinChartDesignerSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            Serializes the specified object into a CodeDOM object.
            </summary>
            <param name="manager">A serialization manager interface that is used during the deserialization process.</param>
            <param name="value">The object to serialize.</param>
            <returns>A CodeDOM object representing the object that has been serialized.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.WinChartDesignerSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            Deserializes the specified serialized CodeDOM object into an object.
            </summary>
            <param name="manager">A serialization manager interface that is used during the deserialization process.</param>
            <param name="codeObject">A serialized CodeDOM object to deserialize.</param>
            <returns>The deserialized CodeDOM object.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.AxisName">
            <summary>
            Axis Name
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AxisName.X">
            <summary>
            Primary X Axis
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AxisName.Y">
            <summary>
            Primary Y Axis
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AxisName.X2">
            <summary>
            Secondary X Axis
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AxisName.Y2">
            <summary>
            Secondary Y Axis
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Axis">
            <summary>
            This class gives information to chart series about 
            position in the chart area and keeps all necessary 
            information about axes.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.AxisLabels">
            <summary>
            This class provides functionality for 
            drawing axis labels.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.AxisScale">
            <summary>
            This class keeps information about minimum, maximum 
            and interval values and it is responsible for setting 
            these values automatically. It also recalculates crossing
            logarithmic and reverse axis.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartElement">
            <summary>
            Chart Element class is base class for: AxisScale, 
            ChartArea, etc.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElement.MaxNumOfGridlines">
            <summary>
            Maximum number of grid lines per Axis
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElement.plotAreaPosition">
            <summary>
            Plot area position
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElement.common">
            <summary>
            Reference to the Common elements
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartElement.#ctor">
            <summary>
            Chart Element default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartElement.AlignIntervalStart(System.Double,System.Double,Dundas.Charting.WinControl.DateTimeIntervalType)">
            <summary>
            Adjust the beginnin of the first interval depending on the type and size.
            </summary>
            <param name="start">Original start point.</param>
            <param name="intervalSize">Interval size.</param>
            <param name="type">Type of the interval (Month, Year, ...).</param>
            <returns>Adjusted interval start position as double.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartElement.AlignIntervalStart(System.Double,System.Double,Dundas.Charting.WinControl.DateTimeIntervalType,Dundas.Charting.WinControl.Series)">
            <summary>
            Adjust the beginnin of the first interval depending on the type and size.
            </summary>
            <param name="start">Original start point.</param>
            <param name="intervalSize">Interval size.</param>
            <param name="type">Type of the interval (Month, Year, ...).</param>
            <param name="series">First series connected to the axis.</param>
            <returns>Adjusted interval start position as double.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartElement.GetIntervalSize(System.Double,System.Double,Dundas.Charting.WinControl.DateTimeIntervalType)">
            <summary>
            Gets interval size as double number.
            </summary>
            <param name="current">Current value.</param>
            <param name="interval">Interval size.</param>
            <param name="type">Type of the interval (Month, Year, ...).</param>
            <returns>Interval size as double.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartElement.GetIntervalSize(System.Double,System.Double,Dundas.Charting.WinControl.DateTimeIntervalType,Dundas.Charting.WinControl.Series,System.Double,Dundas.Charting.WinControl.DateTimeIntervalType,System.Boolean)">
            <summary>
            Gets interval size as double number.
            </summary>
            <param name="current">Current value.</param>
            <param name="interval">Interval size.</param>
            <param name="type">Type of the interval (Month, Year, ...).</param>
            <param name="series">First series connected to the axis.</param>
            <param name="intervalOffset">Offset size.</param>
            <param name="intervalOffsetType">Offset type(Month, Year, ...).</param>
            <param name="forceIntIndex">Force Integer indexed</param>
            <returns>Interval size as double.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartElement.IndexedSeries(Dundas.Charting.WinControl.Series)">
            <summary>
            Check if series is indexed. XValueIndexed flag is set or all X values are zeros.
            </summary>
            <param name="series">Data series to test.</param>
            <returns>True if series is indexed.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartElement.SeriesXValuesZeros(Dundas.Charting.WinControl.Series)">
            <summary>
            Check if all data points in the series have X value set to 0.
            </summary>
            <param name="series">Data series to check.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartElement.IndexedSeries(System.String[])">
            <summary>
            Check if any series is indexed. XValueIndexed flag is set or all X values are zeros.
            </summary>
            <param name="series">Data series names.</param>
            <returns>True if any series is indexed.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartElement.SeriesXValuesZeros(System.String[])">
            <summary>
            Check if all data points in many series have X value set to 0.
            </summary>
            <param name="series">Data series.</param>
            <returns>True if all data points have value 0.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartElement.IntersectLineRect(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Single)">
            <summary>
            This method is used to test if horizontal or vertical lines 
            intersect with rectangle
            </summary>
            <param name="pointFirst">First point of the line</param>
            <param name="pointSecond">Second point of the line</param>
            <param name="hitPoint">Point which will be used for rectangle</param>
            <param name="size">Size which will be used for rectangle</param>
            <returns>True if line intersect rectangle</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartElement.Common">
            <summary>
            Common Element 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartElement.PlotAreaPosition">
            <summary>
            Plot Area Position
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AxisScale.type">
            <summary>
            Axis position: Left, Right, Top Bottom
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AxisScale.oppositeAxis">
            <summary>
            Opposite Axis for this Axis. Necessary for Crossing.		
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.GetViewMinimum">
            <summary>
            Gets axis data view minimum position.
            </summary>
            <returns>Axis data view minimum position.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.GetViewMaximum">
            <summary>
            Gets axis data view minimum position.
            </summary>
            <returns>Axis data view minimum position.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.GetPosition(System.Double)">
            <summary>
            This function converts axis value to relative position (0-100%). 
            If an axis has logarithmic scale, value is converted to a linear scale.
            </summary>
            <param name="axisValue">Value from axis.</param>
            <returns>Relative position (0-100%).</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.ValueToPosition(System.Double)">
            <summary>
            This function converts axis value to relative position (0-100%). 
            If an axis has logarithmic scale, value is converted to a linear scale.
            </summary>
            <param name="axisValue">Axis value.</param>
            <returns>Relative position (0-100%).</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.ValueToPixelPosition(System.Double)">
            <summary>
            This function converts axis value to pixel position. 
            If an axis has logarithmic scale, value is converted to a linear scale.
            </summary>
            <param name="axisValue">Value from axis.</param>
            <returns>Pixel position.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.PositionToValue(System.Double)">
            <summary>
            This function converts relative position to axis value.
            If an axis has logarithmic scale, value is converted to a linear scale.
            </summary>
            <param name="position">Relative position (0-100%).</param>
            <returns>Axis value.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.PixelPositionToValue(System.Double)">
            <summary>
            This function converts pixel position to axis value.
            If an axis has logarithmic scale, value is converted to a linear scale.
            </summary>
            <param name="position">Pixel position.</param>
            <returns>Axis value.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.SetAxisPosition">
            <summary>
            Sets axis position. Axis position depends 
            on crossing and reverse value.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.RoundedValues(System.Double,System.Boolean,System.Boolean,System.Double@,System.Double@)">
            <summary>
            This function will create auto maximum and minimum values 
            using interval. This function will make a gap between 
            data points and border of the chart area.
            </summary>
            <param name="inter">Interval</param>
            <param name="autoMax">Maximum is auto</param>
            <param name="autoMin">Minimum is auto</param>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
            <returns>Interval</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.CalcInterval(System.Double)">
            <summary>
            Recalculates a intelligent interval from real interval.
            </summary>
            <param name="diff">Real interval.</param>
            <returns>Inteligent interval.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.CalcInterval(System.Double,System.Double)">
            <summary>
            Recalculates a intelligent interval from real interval 
            obtained from maximum and minimum values
            </summary>
            <param name="min">Minimum</param>
            <param name="max">Maximum</param>
            <returns>Auto Interval</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.CalcInterval(System.Double,System.Double,System.Boolean,Dundas.Charting.WinControl.DateTimeIntervalType@)">
            <summary>
            Recalculates a intelligent interval from real interval 
            obtained from maximum, minimum and date type if 
            the values is date-time value.
            </summary>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <param name="date">True if date.</param>
            <param name="type">Date time interval type.</param>
            <returns>Auto Interval.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.CalcYearInterval(System.Double)">
            <summary>
            Recalculates a intelligent interval for years
            </summary>
            <param name="years">Number of years</param>
            <returns>Interval in years</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.GetNumOfUnits(System.Double,System.Double,Dundas.Charting.WinControl.DateTimeIntervalType)">
            <summary>
            This method returns the number of units 
            between min and max.
            </summary>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <param name="type">Date type.</param>
            <returns>Number of units.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.IsDateType">
            <summary>
            This method checks if value type is date.
            </summary>
            <returns>True if type is date.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.GetCrossing">
            <summary>
            This method removes "Auto", "min", "max" from crossing
            value and creates a double value.
            </summary>
            <returns>Crossing value</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.SetAutoMinimum(System.Double)">
            <summary>
            Set auto minimum number. The minimum number 
            which was sent to this function will be used to 
            estimate a rounded minimum.
            </summary>
            <param name="min"> This value is a recommendation for the minimum value. </param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.SetAutoMaximum(System.Double)">
            <summary>
            Set auto maximum number. The maximum number 
            which was sent to this function will be used to 
            estimate a rounded maximum.
            </summary>
            <param name="max">This value is a recommendation for the maximum value.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.GetOppositeAxis">
            <summary>
            Find opposite axis of this axis.  What is opposite 
            axis depend on first series in chart area and primary 
            and secondary X and Y axes for the first series.
            </summary>
            <returns>Opposite axis</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.Invalidate">
            <summary>
            Invalidate chart are the axis belong to
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.GetLinearPosition(System.Double)">
            <summary>
            This function converts Values from Axes to 
            linear relative positions.
            </summary>
            <param name="axisValue">Value from axis.</param>
            <returns>Relative position.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.EstimateAxis">
            <summary>
            This function recalculates minimum maximum and interval. 
            The function uses current values for minimum and maximum to 
            find rounding values. If the value from the data source for the 
            maximum value is 376.5 this function will return 380. This function 
            also set interval type for date
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.EstimateAxis(System.Double@,System.Double@,System.Boolean,System.Boolean)">
            <summary>
            This function recalculates minimum maximum and interval. 
            The function uses current values for minimum and maximum to 
            find rounding values. If the value from the data source for the 
            maximum value is 376.5 this function will return 380. This function 
            also set interval type for date
            </summary>
            <param name="minimum">Minimum</param>
            <param name="maximum">Maximum</param>
            <param name="autoMaximum">Maximum value is Auto</param>
            <param name="autoMinimum">Minimum value is Auto</param>
            <returns>Interval</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.EstimateLogarithmicAxis(System.Double@,System.Double@,System.Double,System.Boolean,System.Boolean)">
            <summary>
            This function recalculates minimum maximum and interval for 
            logaritmic axis. The function uses current values for minimum and 
            maximum to find new rounding values.
            </summary>
            <param name="minimum">Current Minimum value</param>
            <param name="maximum">Current Maximum value</param>
            <param name="crossing">Crossing value</param>
            <param name="autoMaximum">Maximum value is Auto</param>
            <param name="autoMinimum">Minimum value is Auto</param>
            <returns>Interval</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.EstimateDateAxis(System.Double@,System.Double@,System.Double,System.Boolean,System.Boolean)">
            <summary>
            This function recalculates minimum maximum and interval for 
            Date axis. The function uses current values for minimum and 
            maximum to find new rounding values.
            </summary>
            <param name="minimum">Current Minimum value</param>
            <param name="maximum">Current Maximum value</param>
            <param name="crossing">Crossing value</param>
            <param name="autoMaximum">Maximum value is Auto</param>
            <param name="autoMinimum">Minimum value is Auto</param>
            <returns>Interval</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScale.EstimateNumberAxis(System.Double@,System.Double@,System.Double,System.Boolean,System.Boolean)">
            <summary>
            This function recalculates minimum maximum and interval for 
            number type axis. The function uses current values for minimum and 
            maximum to find new rounding values.
            </summary>
            <param name="minimum">Current Minimum value</param>
            <param name="maximum">Current Maximum value</param>
            <param name="crossing">Crossing value</param>
            <param name="autoMaximum">Maximum value is Auto</param>
            <param name="autoMinimum">Minimum value is Auto</param>
            <returns>Interval</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScale.Reverse">
            <summary>
            The values on the axis are in reverse order. 
            The direction of values on the axis is flipped.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScale.StartFromZero">
            <summary>
            If true, this property will set auto minimum value to zero 
            if all data point values are positive. Otherwise, minimum 
            value from data points will be used.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScale.Margin">
            <summary>
            If true a space is added between the first and the last data 
            points and the border of chart area.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScale.InternalIntervalType">
            <summary>
            Date and time interval type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScale.SetInterval">
            <summary>
            Set auto interval values to grids, tick marks
            and labels
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScale.Maximum">
            <summary>
            Maximum axis value
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScale.Minimum">
            <summary>
            The Minimum Axis value
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScale.Crossing">
            <summary>
            Point where axis is crossed by another axis.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScale.Enabled">
            <summary>
            Enables or disables the axis.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScale.Logarithmic">
            <summary>
            Logarithmic scale recalculate the values shown in the Minimum, Maximum, 
            boxes as powers of 10 for the value axis, based on the range of data. 
            No zeros or negative data values are permitted on logarithmic charts. 
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScale.View">
            <summary>
            Axis data view settings.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScale.ScrollBar">
            <summary>
            Axis scroll bar settings.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisLabels.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisLabels.IsCustomGridLines">
            <summary>
            Indicates that custom grid lines should be painted.
            </summary>
            <returns>Indicates that custom grid lines should be painted.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisLabels.IsCustomTickMarks">
            <summary>
            Indicates that custom tick marks should be painted.
            </summary>
            <returns>Indicates that custom tick marks should be painted.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisLabels.FillLabels">
            <summary>
            Fill labels from data from data manager or 
            from axis scale.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisLabels.GetPointLabel(Dundas.Charting.WinControl.Series,System.Double,System.Boolean,System.Boolean)">
            <summary>
            This method checks if there is a data point which has value X equal 
            to valuePosition, and returns label from data point if such value exist. 
            If data point with this value not exists empty string will be returned. 
            If all data points have X value zero, index is used instead of X value.
            </summary>
            <param name="series">Data series</param>
            <param name="valuePosition">A value which should be found in data points x values</param>
            <param name="nonZeroXValues">Series X values are not zeros.</param>
            <param name="indexedSeries">Series is indexed. All X values are zeros or XValueIndexed flag set.</param>
            <returns>Label</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisLabels.LabelStyle">
            <summary>
            Label object
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisLabels.CustomLabels">
            <summary>
            Custom labels collection.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Axis.interlaced">
            <summary>
            Indicates that interlaced strip lines will be displayed for the axis.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Axis.interlacedColor">
            <summary>
            Color used to draw interlaced strip lines for the axis.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Axis.intervalOffset">
            <summary>
            Axis interval offset.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Axis.interval">
            <summary>
            Axis interval.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Axis.intervalType">
            <summary>
            Axis interval units type.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Axis.intervalOffsetType">
            <summary>
            Axis interval offset units type.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.Initialize(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.AxisName)">
            <summary>
            Initialize axis class
            </summary>
            <param name="chartArea">Chart area the axis belongs to.</param>
            <param name="axisType">Axis type.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.SetName">
            <summary>
            Set Axis Name
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.PrePaint(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Paint Axis elements on the back of the 3D scene.
            </summary>
            <param name="graph">Reference to the Chart Graphics object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.Paint(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Paint Axis
            </summary>
            <param name="graph">Reference to the Chart Graphics object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.Select(Dundas.Charting.WinControl.ChartGraphics,System.Int32,System.Int32,System.Object@,Dundas.Charting.WinControl.ChartElementType@)">
            <summary>
            Axis Selection
            </summary>
            <param name="graph">Reference to the Chart Graphics object</param>
            <param name="x">Selected x position</param>
            <param name="y">Selected y position</param>
            <param name="obj">Selected object</param>
            <param name="type">Chart Element Type</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.PreSelect(Dundas.Charting.WinControl.ChartGraphics,System.Int32,System.Int32,System.Object@,Dundas.Charting.WinControl.ChartElementType@)">
            <summary>
            Axis Selection
            </summary>
            <param name="graph">Reference to the Chart Graphics object</param>
            <param name="x">Selected x position</param>
            <param name="y">Selected y position</param>
            <param name="obj">Selected object</param>
            <param name="type">Chart Element Type</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.DrawAxisTitle(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Draw axis title
            </summary>
            <param name="graph">Reference to the Chart Graphics object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.DrawAxis3DTitle(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Draw axis title in 3D.
            </summary>
            <param name="graph">Reference to the Chart Graphics object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.DrawAxisLine(Dundas.Charting.WinControl.ChartGraphics,System.Boolean)">
            <summary>
            Draw the axis lines
            </summary>
            <param name="graph">Reference to the Chart Graphics</param>
            <param name="backElements">Back elements of the axis should be drawn in 3D scene.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.DrawAxisLine(Dundas.Charting.WinControl.ChartGraphics,System.Int32,System.Int32,System.Object@,System.Boolean,System.Boolean)">
            <summary>
            Select Axis line
            </summary>
            <param name="graph">Reference to the Chart Graphics</param>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="obj">Selected object (Axis)</param>
            <param name="selectionMode">Selection Mode</param>
            <param name="backElements">Back elements of the axis should be drawn in 3D scene.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.Draw3DAxisLine(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.PointF,System.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean,System.Drawing.PointF,System.Boolean@)">
            <summary>
            Draws axis line in 3D space.
            </summary>
            <param name="graph">Reference to the Chart Graphics object.</param>
            <param name="point1">First line point.</param>
            <param name="point2">Second line point.</param>
            <param name="horizontal">Indicates that tick mark line is horisontal.</param>
            <param name="backElements">Only back elements of axis should be drawn.</param>
            <param name="selectionMode">Selection mode is active</param>
            <param name="hitPoint">Point below mouse</param>
            <param name="selected">True if axis line is below mouse</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.GetMarksZPosition(System.Boolean@)">
            <summary>
            Gets Z position of axis tick marks and labels.
            </summary>
            <param name="axisOnEdge">Returns true if axis is on the edge.</param>
            <returns>Marks Z position.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.PaintGrids(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Paint Axis Grid lines
            </summary>
            <param name="graph">Reference to the Chart Graphics object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.PaintGrids(Dundas.Charting.WinControl.ChartGraphics,System.Boolean,System.Int32,System.Int32,System.Object@)">
            <summary>
            Paint Axis Grid lines or 
            hit test function for grid lines
            </summary>
            <param name="graph">Reference to the Chart Graphics object</param>
            <param name="selectionMode">The selection mode is active</param>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="obj">Returns selected grid object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.PaintStrips(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Paint Axis Strip lines
            </summary>
            <param name="graph">Reference to the Chart Graphics object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.PaintStrips(Dundas.Charting.WinControl.ChartGraphics,System.Boolean,System.Int32,System.Int32,System.Object@)">
            <summary>
            Paint Axis Strip lines or 
            hit test function for Strip lines
            </summary>
            <param name="graph">Reference to the Chart Graphics object</param>
            <param name="selectionMode">The selection mode is active</param>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="obj">Returns selected grid object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.AddInterlacedStrip">
            <summary>
            Helper function which adds temp. strip lines into the collection
            to display interlaced lines in axis.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.RoundAxisValues">
            <summary>
            This function will create auto maximum and minimum values 
            using interval. This function will make a gap between 
            data points and border of the chart area.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.ReCalc(Dundas.Charting.WinControl.ElementPosition)">
            <summary>
            Recalculate axis.
            </summary>
            <param name="position">Ploatting area position.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.StoreAxisValues">
            <summary>
            This method store Axis values as minimum, maximum, 
            crossing, etc. Axis auto algorithm changes these 
            values and they have to be set to default values 
            after painting.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.ResetAxisValues">
            <summary>
            This method reset Axis values as minimum, maximum, 
            crossing, etc. Axis auto algorithm changes these 
            values and they have to be set to default values 
            after painting.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.ResetAutoValues">
            <summary>
            Reset auto calculated axis values
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.Resize(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.ElementPosition,System.Drawing.RectangleF,System.Single,System.Boolean)">
            <summary>
            Calculate size of the axis elements like title, labels and marks.
            </summary>
            <param name="chartGraph">Chart graphics object.</param>
            <param name="chartAreaPosition">The Chart area position.</param>
            <param name="plotArea">Plotting area size.</param>
            <param name="axesNumber">Number of axis of the same orientation.</param>
            <param name="autoPlotPosition">Indicates that inner plot position is automatic.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.AdjustLabelFontAtSecondPass(Dundas.Charting.WinControl.ChartGraphics,System.Boolean)">
            <summary>
            Adjust labels font size at secon pass of auto fitting.
            </summary>
            <param name="chartGraph">Chart graphics object.</param>
            <param name="autoPlotPosition">Indicates that inner plot position is automatic.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.GetLogValue(System.Double)">
            <summary>
            Check if axis is logarithmic
            </summary>
            <param name="yValue">Y value from data</param>
            <returns>Corected Y value if axis is logarithmic</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.CheckLabelsFit(Dundas.Charting.WinControl.ChartGraphics,System.Single,System.Boolean)">
            <summary>
            Checks if labels fit using current auto fit attributes
            </summary>
            <param name="chartGraph">Chart graphics object.</param>
            <param name="otherElementsSize">Axis title and marks size.</param>
            <param name="autoPlotPosition">Indicates auto calculation of plotting area.</param>
            <returns></returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.GetRequiredLabelSize(Dundas.Charting.WinControl.ChartGraphics,System.Single,System.Single@)">
            <summary>
            Calculates the best size for labels area.
            </summary>
            <param name="chartGraph">Chart graphics object.</param>
            <param name="maxLabelSize">Maximum labels area size.</param>
            <param name="resultSize">Label size without angle = 0.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.GetRequiredLabelRow2Size(Dundas.Charting.WinControl.ChartGraphics,System.Single)">
            <summary>
            Calculates the best size for labels in the second row
            </summary>
            <param name="chartGraph">Chart graphics object.</param>
            <param name="maxLabelSize">Maximum labels area size.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.GetAxisIntervalType">
            <summary>
            Gets axis auto interval type.
            </summary>
            <returns>Axis interval type.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.GetAxisValuesType">
            <summary>
            Gets axis values type depending on the series attached
            </summary>
            <returns>Axis values type.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.GetArrowSize(Dundas.Charting.WinControl.ArrowOrientation@)">
            <summary>
            Returns Arrow size
            </summary>
            <param name="arrowOrientation">Return arrow orientation.</param>
            <returns>Size of arrow</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.IsArrowInAxis(Dundas.Charting.WinControl.ArrowOrientation,Dundas.Charting.WinControl.AxisPosition)">
            <summary>
            Checks if arrow with specified orientation will require space
            in axis with specified position
            </summary>
            <param name="arrowOrientation">Arrow orientation.</param>
            <param name="axisPosition">Axis position.</param>
            <returns>True if arrow will be drawn in axis space</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.GetPixelInterval(System.Double)">
            <summary>
            This function converts real Interval to 
            absolute Interval
            </summary>
            <param name="realInterval">A interval represented as double value</param>
            <returns>A interval represented in pixels</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.IsAxisOnAreaEdge">
            <summary>
            Find if axis is on the edge of the chart plot area
            </summary>
            <returns>Axis is on the edge of the plot area.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.GetAxisPosition">
            <summary>
            Find axis position using crossing value
            </summary>
            <returns>Relative position</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Axis.GetAxisProjectionAngle">
            <summary>
            Returns angle between 2D axis line and it's 3D transformed projection.
            </summary>
            <returns>Axis projection angle.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.Interlaced">
            <summary>
            Indicates that interlaced strip lines will be displayed for the axis.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.InterlacedColor">
            <summary>
            Color used to draw interlaced strip lines for the axis.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.Name">
            <summary>
            Axis name. For internal use only!
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.Type">
            <summary>
            Axis name. For internal use only!
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.Arrows">
            <summary>
            Axis arrows
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.MajorGrid">
            <summary>
            Major Gridlines
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.MinorGrid">
            <summary>
            Minor Gridlines
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.MajorTickMark">
            <summary>
            Major Tick Mark
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.MinorTickMark">
            <summary>
            Minor Tick Mark
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.LabelsAutoFit">
            <summary>
            Set Auto Labels formating
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.MarksNextToAxis">
            <summary>
            Tick marks and labels move with axis when 
            the crossing value is changed.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.Title">
            <summary>
            Axis Title
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.TitleColor">
            <summary>
            Axis Title Color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.TitleAlignment">
            <summary>
            Axis Title Alignment
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.TitleFont">
            <summary>
            Axis Title Font
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.LineColor">
            <summary>
            Axis Line Color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.LineWidth">
            <summary>
            Axis Line Width
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.LineStyle">
            <summary>
            Axis Line Dash Style
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.StripLines">
            <summary>
            Custom labels collection.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.Interval">
            <summary>
            Axis interval size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.IntervalOffset">
            <summary>
            Axis interval offset.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.IntervalType">
            <summary>
            Axis interval type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Axis.IntervalOffsetType">
            <summary>
            Axis interval offset type.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.AxisPosition">
            <summary>
            Axis Position enumeration.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AxisPosition.Left">
            <summary>
            Left position
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AxisPosition.Right">
            <summary>
            Right position
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AxisPosition.Top">
            <summary>
            Top position
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AxisPosition.Bottom">
            <summary>
            Bottom position
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ArrowsType">
            <summary>
            Axis Arrow types
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ArrowsType.None">
            <summary>
            No arrow
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ArrowsType.Triangle">
            <summary>
            Triangle type
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ArrowsType.SharpTriangle">
            <summary>
            Sharp triangle type
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ArrowsType.Lines">
            <summary>
            Lines type
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ScrollBarButtonType">
            <summary>
            Defines scroll bar button types
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ScrollBarButtonType.ThumbTracker">
            <summary>
            Thumb tracker button
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ScrollBarButtonType.SmallDecrement">
            <summary>
            Scroll view by substracting small distance
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ScrollBarButtonType.SmallIncrement">
            <summary>
            Scroll view by adding small distance
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ScrollBarButtonType.LargeDecrement">
            <summary>
            Scroll view by substracting large distance
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ScrollBarButtonType.LargeIncrement">
            <summary>
            Scroll view by adding large distance
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ScrollBarButtonType.ZoomReset">
            <summary>
            Zoom reset button
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ScrollBarButtonStyle">
            <summary>
            Scroll bar buttons style flag.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ScrollBarButtonStyle.None">
            <summary>
            No buttons are shown.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ScrollBarButtonStyle.SmallScroll">
            <summary>
            Small increment/decrement buttons are shown.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ScrollBarButtonStyle.ResetZoom">
            <summary>
            Reset zoom buttons are shown.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ScrollBarButtonStyle.All">
            <summary>
            All button are shown. 
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.AxisScrollBar">
            <summary>
            Provides axis scroll bar properties, painting methods, scrolling functionality.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.#ctor">
            <summary>
            Axis default scroll bar constructor is private.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.#ctor(Dundas.Charting.WinControl.Axis)">
            <summary>
            Axis scroll bar constructor.
            </summary>
            <param name="axis">Reference to the axis class.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.Initialize">
            <summary>
            Initialize axis scroll bar class.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.IsVisible">
            <summary>
            Returns true if the scroll bar is visible.
            </summary>
            <returns>True if the scroll bar is visible.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.Select(System.Int32,System.Int32,System.Object@,Dundas.Charting.WinControl.ChartElementType@)">
            <summary>
            Hit test function for scroll bar elements.
            </summary>
            <param name="x">X coordinate in pixels.</param>
            <param name="y">Y coordinate in pixels.</param>
            <param name="obj">Selected object</param>
            <param name="type">Selected Chart Element Type</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.Paint(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Draws axis scroll bar.
            </summary>
            <param name="graph">Reference to the Chart Graphics object.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.PaintScrollBarConnectionRect(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.RectangleF,System.Int32)">
            <summary>
            Fills a connection rectangle between two scoll bars.
            </summary>
            <param name="graph">Chart graphics.</param>
            <param name="scrollBarRect">Scroll bar position.</param>
            <param name="borderWidth">Border width.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.PaintScrollBar3DButton(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.RectangleF,System.Boolean,Dundas.Charting.WinControl.ScrollBarButtonType)">
            <summary>
            Draws 3D button in the scroll bar
            </summary>
            <param name="graph">Chart graphics.</param>
            <param name="buttonRect">Button position.</param>
            <param name="pressedState">Indicates that button is pressed.</param>
            <param name="buttonType">Button type to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.ScrollBar_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse down event handler.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.ScrollBar_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse up event handler.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.ScrollBar_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse move event handler.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.ButtonClicked(Dundas.Charting.WinControl.ScrollBarButtonType,System.Int32,System.Int32)">
            <summary>
            Scroll bar button was clicked by the user.
            </summary>
            <param name="buttonType">Button type.</param>
            <param name="x">X click position in pixels.</param>
            <param name="y">Y click position in pixels.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.ScrollingTimerEventProcessor(System.Object,System.EventArgs)">
            <summary>
            This is the method to run when the timer is raised.
            Used to repetedly scroll data view while mouse button is pressed.
            </summary>
            <param name="myObject">Object.</param>
            <param name="myEventArgs">Event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.GetElementByPixelPosition(System.Single,System.Single,Dundas.Charting.WinControl.ScrollBarButtonType@)">
            <summary>
            Detects the scroll bar elements by pixel position.
            Possible elements are all scroll bar buttons and scroll bar background
            which performs PgUp/PgDn action.
            </summary>
            <param name="x">X coordinate in pixels.</param>
            <param name="y">Y coordinate in pixels.</param>
            <param name="buttonType">Return button type.</param>
            <returns>True if position is in the scroll bar.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.GetScrollBarButtonRect(System.Drawing.RectangleF,Dundas.Charting.WinControl.ScrollBarButtonType)">
            <summary>
            Returns scroll bar button rectangle position in relative coordinates.
            </summary>
            <param name="scrollBarClientRect">Scroll bar client rectangle.</param>
            <param name="buttonType">Scroll bar button type.</param>
            <returns>Scroll bar position.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.GetScrollBarRect">
            <summary>
            Returns scroll bar rectangle position in relative coordinates.
            </summary>
            <returns>Scroll bar position.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.GetScrollBarRelativeSize">
            <summary>
            Internal helper method which returns the relative scroll bar size.
            </summary>
            <returns>Relative scroll bar size.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.GetDataViewPercentage">
            <summary>
            Returns the percentage size (0-100%) of the data view comparing to 
            the axis scale minimum and maximum values.
            </summary>
            <returns>Size of the data view in percentage.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.GetDataViewPositionPercentage">
            <summary>
            Returns the the data view position in percentage (0-100%) using 
            the axis scale minimum and maximum values.
            </summary>
            <returns>Data view position in percentage.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.GetButtonsNumberAll">
            <summary>
            Get total number of buttons in the scroll bar (except tracker).
            </summary>
            <returns>Number of buttons.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.GetButtonsNumberTop">
            <summary>
            Get number of buttons in the top (left) part of the scroll bar.
            </summary>
            <returns>Number of buttons.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.GetButtonsNumberBottom">
            <summary>
            Get number of buttons in the bottom (right) part of the scroll bar.
            </summary>
            <returns>Number of buttons.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.GetAbsoluteSize(System.Drawing.SizeF)">
            <summary>
            Converts Relative size to Absolute size
            </summary>
            <param name="relative">Relative size in %</param>
            <returns>Absolute size</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisScrollBar.GetRelativeSize(System.Drawing.SizeF)">
            <summary>
            Converts Absolute size to Relative size
            </summary>
            <param name="size">Absolute size</param>
            <returns>Relative size</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScrollBar.Enabled">
            <summary>
            Indicates that axis view scroll bar is enabled.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScrollBar.ChartArea">
            <summary>
            Chart area, which contains this Scroll Bar.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScrollBar.Axis">
            <summary>
            Axis, which contains this Scroll Bar.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScrollBar.Buttons">
            <summary>
            Data view scroll bar buttons style.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScrollBar.Size">
            <summary>
            Data view scroll bar size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScrollBar.ButtonColor">
            <summary>
            Data view scroll bar buttons color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScrollBar.LineColor">
            <summary>
            Data view scroll bar line color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisScrollBar.BackColor">
            <summary>
            Data view scroll bar back color.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ScrollBarEventArgs">
            <summary>
            Axis data scroll bar event arguments.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ScrollBarEventArgs.#ctor(Dundas.Charting.WinControl.Axis,System.Int32,System.Int32,Dundas.Charting.WinControl.ScrollBarButtonType)">
            <summary>
            Creates axis data view event arguments.
            </summary>
            <param name="axis">Axis of the data view.</param>
            <param name="x">Mouse X position.</param>
            <param name="y">Mouse Y position.</param>
            <param name="buttonType">Button type clicked.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.ScrollBarEventArgs.Axis">
            <summary>
            Axis of the event.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ScrollBarEventArgs.ChartArea">
            <summary>
            Chart area of the event.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ScrollBarEventArgs.ButtonType">
            <summary>
            Type of the scroll button clicked.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ScrollBarEventArgs.Handled">
            <summary>
            Indicates that event is handled by user and no further processing is required.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ScrollBarEventArgs.MousePositionX">
            <summary>
            Mouse cursor X position.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ScrollBarEventArgs.MousePositionY">
            <summary>
            Mouse cursor Y position.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ViewEventHandler">
            <summary>
            Axis data view event handler delegate
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ScrollBarEventHandler">
            <summary>
            Axis scroll bar event handler delegate
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ScrollType">
            <summary>
            Scrolling type enumeration.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ScrollType.SmallDecrement">
            <summary>
            Scrolls by substracting one small size.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ScrollType.SmallIncrement">
            <summary>
            Scrolls by adding one small size.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ScrollType.LargeDecrement">
            <summary>
            Scrolls by substracting one view size.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ScrollType.LargeIncrement">
            <summary>
            Scrolls by adding one view size.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ScrollType.First">
            <summary>
            Scrolls to the first view.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ScrollType.Last">
            <summary>
            Scrolls to the last view.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.AxisDataView">
            <summary>
            Axis data view used for zooming and scrolling axis data.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.#ctor(Dundas.Charting.WinControl.Axis)">
            <summary>
            Public constructor.
            </summary>
            <param name="axis">Data view axis.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.GetViewMinimum">
            <summary>
            Gets axis data view minimum position.
            </summary>
            <returns>Axis data view minimum position.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.GetViewMaximum">
            <summary>
            Gets axis data view minimum position.
            </summary>
            <returns>Axis data view minimum position.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.Scroll(Dundas.Charting.WinControl.ScrollType)">
            <summary>
            Scrolls axis data view from current position.
            </summary>
            <param name="type">Direction and size to scroll.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.Scroll(Dundas.Charting.WinControl.ScrollType,System.Boolean)">
            <summary>
            Scrolls axis data view from current position.
            </summary>
            <param name="type">Direction and size to scroll.</param>
            <param name="fireChangeEvents">Fire view position events from this method.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.Scroll(System.Double)">
            <summary>
            Scrolls axis data view into specified position.
            </summary>
            <param name="newPosition">New data view position.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.Scroll(System.Double,System.Boolean)">
            <summary>
            Internal helper method for scrolling into specified position.
            </summary>
            <param name="newPosition">New data view position.</param>
            <param name="fireChangeEvents">Fire view position events from this method.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.Zoom(System.Double,System.Double,Dundas.Charting.WinControl.DateTimeIntervalType,System.Boolean)">
            <summary>
            Sets new axis data view size/position.
            </summary>
            <param name="viewPosition">New axis data view start position.</param>
            <param name="viewSize">New axis data view size.</param>
            <param name="viewSizeType">New axis data view size units type.</param>
            <param name="saveState">Indicates that current view size/position must be save, so it can be restored later.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.Zoom(System.Double,System.Double)">
            <summary>
            Sets new axis data view size/position.
            </summary>
            <param name="viewStart">New axis data view start position.</param>
            <param name="viewEnd">New axis data view end position.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.Zoom(System.Double,System.Double,Dundas.Charting.WinControl.DateTimeIntervalType)">
            <summary>
            Sets new axis data view size/position.
            </summary>
            <param name="viewPosition">New axis data view start position.</param>
            <param name="viewSize">New axis data view size.</param>
            <param name="viewSizeType">New axis data view size units type.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.ZoomReset(System.Int32)">
            <summary>
            Reset several zooming operation by restoring data view size/position.
            </summary>
            <param name="numberOfViews">How many view zoom operations to reset. Zero for all.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.ZoomReset">
            <summary>
            Reset one zooming operation by restoring data view size/position.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.ZoomReset(System.Int32,System.Boolean)">
            <summary>
            Reset several zooming operation by restoring data view size/position.
            </summary>
            <param name="numberOfViews">How many view zoom operations to reset. Zero for all.</param>
            <param name="fireChangeEvents">Fire view position events from this method.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.Zoom(System.Double,System.Double,Dundas.Charting.WinControl.DateTimeIntervalType,System.Boolean,System.Boolean)">
            <summary>
            Internal helper zooming method.
            </summary>
            <param name="viewPosition">New data view start posiion.</param>
            <param name="viewSize">New data view size.</param>
            <param name="viewSizeType">New data view size units type.</param>
            <param name="fireChangeEvents">Fire view position events from this method.</param>
            <param name="saveState">Indicates that current view size/position must be save, so it can be restored later.</param>
            <returns>True if zoom operation was made.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.LoadDataViewState(System.Int32,System.Boolean)">
            <summary>
            Saves current data view position/size/sizetype, so
            it can be restored later.
            </summary>
            <param name="numberOfViews">Number of time to reset zoom. Zero for all.</param>
            <param name="fireChangeEvents">Fire view position events from this method.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.SaveDataViewState">
            <summary>
            Saves current data view position/size/sizetype, so
            it can be restored later.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.GetCurrentViewSmallScrollSize">
            <summary>
            Initialize internal scrolling line size variables for later use.
            This size is used in to scroll chart one line up or down.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.GetScrollingLineSize">
            <summary>
            Returns the scroll line size.
            </summary>
            <returns>Scroll line size.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.GetScrollingLineSizeType">
            <summary>
            Returns the scroll line size units type.
            </summary>
            <returns>Scroll line size units type.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.ValidateViewPositionSize(System.Double@,System.Double@,Dundas.Charting.WinControl.DateTimeIntervalType@)">
            <summary>
            Helper method, which validates the axis data view position and size.
            Returns adjusted view position and size.
            </summary>
            <param name="viewPosition">View position.</param>
            <param name="viewSize">View size.</param>
            <param name="viewSizeType">View size units type.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.AxisDataView.GetChartObject">
            <summary>
            Helper function which returns a reference to the chart object.
            </summary>
            <returns>Chart object reference.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisDataView.Position">
            <summary>
            View position.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisDataView.Size">
            <summary>
            View size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisDataView.SizeType">
            <summary>
            View size type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisDataView.MinSize">
            <summary>
            View/scrolling minimum size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisDataView.MinSizeType">
            <summary>
            View/scrolling minimum size units type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisDataView.Zoomable">
            <summary>
            Indicates that data view zooming UI interface enabled.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisDataView.SmallScrollSize">
            <summary>
            View scrolling line size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisDataView.SmallScrollSizeType">
            <summary>
            View scrolling line size units type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisDataView.SmallScrollMinSize">
            <summary>
            View small scrolling minimum size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.AxisDataView.SmallScrollMinSizeType">
            <summary>
            View scrolling line minimum size units type.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ViewEventArgs">
            <summary>
            Axis data view position/size changing event arguments.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ViewEventArgs.#ctor(Dundas.Charting.WinControl.Axis,System.Double)">
            <summary>
            Creates axis data view event arguments.
            </summary>
            <param name="axis">Axis of the data view.</param>
            <param name="newPosition">New view start position.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ViewEventArgs.#ctor(Dundas.Charting.WinControl.Axis,System.Double,System.Double,Dundas.Charting.WinControl.DateTimeIntervalType)">
            <summary>
            Creates axis data view event arguments.
            </summary>
            <param name="axis">Axis of the data view.</param>
            <param name="newPosition">New view start position.</param>
            <param name="newSize">New view size.</param>
            <param name="newSizeType">New view size units type.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.ViewEventArgs.Axis">
            <summary>
            Axis of the event.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ViewEventArgs.ChartArea">
            <summary>
            Chart area of the event.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ViewEventArgs.NewPosition">
            <summary>
            New data view start position.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ViewEventArgs.NewSize">
            <summary>
            New data view size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ViewEventArgs.NewSizeType">
            <summary>
            New data view size units type.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.DoubleNanValueConverter">
            <summary>
            Designer converter class
            Converts Double.NaN values to/from "Not set".
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DoubleNanValueConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values supported - return true
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Standard values supported.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DoubleNanValueConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values are not exclusive - return false
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Non exclusive standard values.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DoubleNanValueConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Fill in the list of predefined values.
            </summary>
            <param name="context">Descriptor context.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DoubleNanValueConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert double.NaN to string "Not set"
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Convertion destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DoubleNanValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert minimum or maximum values from string
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Design.DoubleDateNanValueConverter">
            <summary>
            Designer converter class
            Converts Double.NaN values to/from "Not set".
            Converts value to/from date strings.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DoubleDateNanValueConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values supported - return true
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Standard values supported.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DoubleDateNanValueConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standart values are not exclusive - return false
            </summary>
            <param name="context">Descriptor context.</param>
            <returns>Non exclusive standard values.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DoubleDateNanValueConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Fill in the list of predefined values.
            </summary>
            <param name="context">Descriptor context.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DoubleDateNanValueConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert values to string if step type is set to one of the DateTime type
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Convertion destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Design.DoubleDateNanValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert Min and Max values from string if step type is set to one of the DateTime type
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Value to convert from.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartImage">
            <summary>
            This class create Image.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartPicture">
            <summary>
            This class draws chart
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartPicture.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartPicture.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Constructor.
            </summary>
            <param name="container">Service container</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartPicture.GetService(System.Type)">
            <summary>
            Returns Chart service object
            </summary>
            <param name="serviceType">Service Type</param>
            <returns>Chart picture</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartPicture.Dispose">
            <summary>
            Releases all resources used by this Pen object
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartPicture.Select(System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.ChartElementType@,System.Object@)">
            <summary>
            Function, which returns selected data point and 
            selected series from x, and y coordinate position.
            </summary>
            <param name="x">x coordinate position</param>
            <param name="y">y coordinate position</param>
            <param name="series">Selected data series</param>
            <param name="point">Selected data point</param>
            <param name="type">Chart element selectable type</param>
            <param name="obj">Selected object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartPicture.Select(System.Int32,System.Int32,System.String@,System.Int32@)">
            <summary>
            Function, which returns selected data point and 
            selected series from x, and y coordinate position.
            </summary>
            <param name="x">x coordinate position</param>
            <param name="y">y coordinate position</param>
            <param name="series">Selected data series</param>
            <param name="point">Selected data point</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartPicture.Paint(System.Drawing.Graphics,System.Boolean)">
            <summary>
            This function paints a chart.
            </summary>
            <param name="graph">The graph provides drawing object to the display device. A Graphics object is associated with a specific device context.</param>
            <param name="cursorsOnly">Indicates that only chart area cursors must be redrawn.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartPicture.DrawTitle(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Draw Chart picture title.
            </summary>
            <param name="graph">Chart graphics object.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartPicture.DrawTitle(Dundas.Charting.WinControl.ChartGraphics,System.Boolean,System.Int32,System.Int32,System.Object@)">
            <summary>
            Draw Chart picture title.
            </summary>
            <param name="graph">Chart graphics object.</param>
            <param name="selectionMode">Selection mode</param>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="obj">Selected object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartPicture.OnBeforePaint(Dundas.Charting.WinControl.ChartPaintEventArgs)">
            <summary>
            Invoke before paint delegates.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartPicture.OnAfterPaint(Dundas.Charting.WinControl.ChartPaintEventArgs)">
            <summary>
            Invoke after paint delegates.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartPicture.Resize(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Resize the chart picture.
            </summary>
            <param name="chartGraph">Chart graphics.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartPicture.Resize(Dundas.Charting.WinControl.ChartGraphics,System.Boolean)">
            <summary>
            Resize the chart picture.
            </summary>
            <param name="chartGraph">Chart graphics.</param>
            <param name="calcAreaPositionOnly">Indicates that only chart area position is calculated.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartPicture.ResetMinMaxFromData">
            <summary>
            Minimum and maximum do not have to be calculated 
            from data series every time. It is very time 
            consuming. Minimum and maximum are buffered 
            and only when this flags are set Minimum and 
            Maximum are refreshed from data.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartPicture.ReCalc">
            <summary>
            Recalculate the chart picture.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.BorderSkinAttributes">
            <summary>
            Chart border skin style.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.ChartAreas">
            <summary>
            Reference to chart area collection
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.BackColor">
            <summary>
            Back ground color for the Chart
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.BorderColor">
            <summary>
            Border color for the Chart
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.Width">
            <summary>
            Chart width
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.Legend">
            <summary>
            Reference to the legend object
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.DataManipulator">
            <summary>
            Series data manipulator
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.Height">
            <summary>
            Chart height
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.Title">
            <summary>
            Chart title
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.TitleFontColor">
            <summary>
            Font color of the title
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.TitleFont">
            <summary>
            Title font
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.BackHatchStyle">
            <summary>
            Back Hatch style
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.BackImage">
            <summary>
            Chart area background image
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.BackImageMode">
            <summary>
            Chart area background image drawing mode.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.BackImageTranspColor">
            <summary>
            Background image transparent color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.BackImageAlign">
            <summary>
            Background image alignment used by ClampUnscale drawing mode.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.SoftShadows">
            <summary>
            Indicates that smoothing is applied while drawing shadows.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.AntiAlias">
            <summary>
            Specifies whether smoothing (antialiasing) is applied while drawing chart.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.AntiAliasing">
            <summary>
            Specifies whether smoothing (antialiasing) is applied while drawing chart.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.BackGradientType">
            <summary>
            A type for the background gradient
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.BackGradientEndColor">
            <summary>
            The second color which is used for a gradient
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.BorderWidth">
            <summary>
            The width of the border line
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPicture.BorderStyle">
            <summary>
            The style of the border line
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartImage.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Chart public constructor.
            </summary>
            <param name="container">Service container</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartImage.GetImage">
            <summary>
            Create Image and draw chart picture
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartImage.Compression">
            <summary>
            Image compression value
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.PaintEventHandler">
            <summary>
            Chart paint event handler delegate.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartPaintEventArgs">
            <summary>
            Chart paint events arguments
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartPaintEventArgs.#ctor">
            <summary>
            Default construvtor is not accessible
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartPaintEventArgs.#ctor(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.ElementPosition)">
            <summary>
            Paint event arguments constructor.
            </summary>
            <param name="chartGraph">Chart graphics.</param>
            <param name="common">Common elements.</param>
            <param name="position">Position.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPaintEventArgs.ChartGraphics">
            <summary>
            Chart graphics object.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPaintEventArgs.CommonElements">
            <summary>
            Chart common elements.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPaintEventArgs.Position">
            <summary>
            Chart common elements.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartPaintEventArgs.Chart">
            <summary>
            Chart root object.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartArea">
            <summary>
            This class is used to create and display chart 
            area on the chart picture. The chart area is rectangle 
            area on the chart picture, which has 4 axes, 
            horizontal and vertical grids and different or 
            same chart types. A Chart area can contain more 
            than one different chart type.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartArea3D">
            <summary>
            Class provide all helper methods required to draw the 3D chart area scene
            including the 3D coordinates transformation matrix.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartAreaAxes">
            <summary>
            This class searches for all series, which belongs 
            to this chart area and sets axes minimum and 
            maximum values using data. This class also checks 
            for chart types, which belong to this chart area 
            and prepare axis scale according to them (Stacked 
            chart types have different max and min values). 
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaAxes.#ctor">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaAxes.SetDefaultAxesValues">
            <summary>
            Sets default axis values for all different chart type 
            groups. Chart type groups are sets of chart types.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaAxes.EnableAxes">
            <summary>
            Enable axes, which are
            used in chart area data series.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaAxes.Activate(Dundas.Charting.WinControl.Axis,System.Boolean)">
            <summary>
            Enable axis.
            </summary>
            <param name="axis">Axis.</param>
            <param name="active">True if axis is active.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaAxes.SetDefaultFromData(Dundas.Charting.WinControl.Axis)">
            <summary>
            This method sets default minimum and maximum 
            values from values in the data manager. This 
            case is used if X values are not equal to 0 or XValueIndexed flag is set.
            </summary>
            <param name="axis">Axis</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaAxes.GetValuesFromData(Dundas.Charting.WinControl.Axis,System.Double@,System.Double@)">
            <summary>
            This method claculates minimum and maximum from data series.
            </summary>
            <param name="axis">Axis which is used to find minimum and maximum</param>
            <param name="autoMinimum">Minimum value from data.</param>
            <param name="autoMaximum">Maximum value from data.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaAxes.GetNumberOfAllPoints">
            <summary>
            Find number of points for all series
            </summary>
            <returns>Number of points</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaAxes.SetDefaultFromIndexes(Dundas.Charting.WinControl.Axis)">
            <summary>
            This method sets default minimum and maximum values from 
            indexes. This case is used if all X values in a series 
            have 0 value or XValueIndexed flag is set.
            </summary>
            <param name="axis">Axis</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaAxes.SetData">
            <summary>
            Sets the names of all data series which belong to
            this chart area to collection and sets a list of all 
            different chart types.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaAxes.GetSeriesFromChartType(System.String)">
            <summary>
            Returns names of all series, which belong to this chart area 
            and have same chart type.
            </summary>
            <param name="chartType">Chart type</param>
            <returns>Collection with series names</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaAxes.GetSeries">
            <summary>
            Returns all series which belong to this chart area.
            </summary>
            <returns>Collection with series</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaAxes.GetXAxesSeries(Dundas.Charting.WinControl.AxisType)">
            <summary>
            Creates a list of series, which have same X axis type.
            </summary>
            <param name="type">Axis type</param>
            <returns>A list of series</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaAxes.GetYAxesSeries(Dundas.Charting.WinControl.AxisType)">
            <summary>
            Creates a list of series, which have same Y axis type.
            </summary>
            <param name="type">Axis type</param>
            <returns>A list of series</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaAxes.GetFirstSeries">
            <summary>
            Get first series from the chart area
            </summary>
            <returns>Data series</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaAxes.GetPointsInterval(System.Boolean)">
            <summary>
            This method returns minimum interval between 
            any two data points from series which belong
            to this chart area.
            </summary>
            <param name="logarithmic">Indicates logarithmic scale.</param>
            <returns>Minimum Interval</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaAxes.GetPointsInterval(System.Collections.ArrayList,System.Boolean,System.Boolean@)">
            <summary>
            This method returns minimum interval between 
            any two data points from specified series. 
            </summary>
            <param name="seriesList">List of series.</param>
            <param name="logarithmic">Indicates logarithmic scale.</param>
            <param name="sameInterval">Return true if interval is the same.</param>
            <returns>Minimum Interval</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaAxes.GetPointsInterval(System.Collections.ArrayList,System.Boolean,System.Boolean@,Dundas.Charting.WinControl.Series@)">
            <summary>
            This method returns minimum interval between 
            any two data points from specified series. 
            </summary>
            <param name="seriesList">List of series.</param>
            <param name="logarithmic">Indicates logarithmic scale.</param>
            <param name="sameInterval">Return true if interval is the same.</param>
            <param name="series">Series with the smallest interval between points.</param>
            <returns>Minimum Interval</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartAreaAxes.Series">
            <summary>
            Data series which belongs to this chart area.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartAreaAxes.ChartTypes">
            <summary>
            Chart types which belongs to this chart area.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartArea3D.reverseSeriesOrder">
            <summary>
            Indicates that series order should be reversed to simulate Y axis rotation.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartArea3D.oldReverseX">
            <summary>
            Old X axis reverse flag
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartArea3D.oldReverseY">
            <summary>
            Old Y axis reverse flag
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartArea3D.oldYAngle">
            <summary>
            Old Y axis rotation angle
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartArea3D.seriesDrawingOrder">
            <summary>
            Drawing order of series
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.TransformPoints(Dundas.Charting.WinControl.Point3D[])">
            <summary>
            Apply 3D transformations on the array of 3D Points. 
            </summary>
            <param name="points">3D Points array.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.DrawArea3DScene(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.RectangleF)">
            <summary>
            Draws chart area 3D scene, which consists of 3 or 2 walls.
            </summary>
            <param name="graph">Chart graphics object.</param>
            <param name="position">Chart area 2D position.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.IsBottomSceneWallVisible">
            <summary>
            Helper method which return True if bottom wall of the 
            chart area scene is visible.
            </summary>
            <returns>True if bottom wall is visible.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.IsMainSceneWallOnFront">
            <summary>
            Helper method which return True if main wall of the 
            chart area scene is displated on the front side.
            </summary>
            <returns>True if front wall is visible.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.IsSideSceneWallOnLeft">
            <summary>
            Helper method which return True if side wall of the 
            chart area scene is displated on the left side.
            </summary>
            <returns>True if bottom wall is visible.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.GetSeriesZPosition(Dundas.Charting.WinControl.Series)">
            <summary>
            Calculates the Z position of specified series center.
            </summary>
            <param name="series">Series object.</param>
            <returns>Returns series Z position (center).</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.GetSeriesDepth(Dundas.Charting.WinControl.Series)">
            <summary>
            Calculates the depth of specified series.
            </summary>
            <param name="series">Series object.</param>
            <returns>Returns series depth.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.GetArea3DSceneDepth">
            <summary>
            Calculates area 3D scene depth depending on the number of clustered 
            series and interval between points.
            </summary>
            <returns>Returns the depth of the chart area scene.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.GetSeriesZPositionAndDepth(Dundas.Charting.WinControl.Series,System.Double,System.Single@,System.Single@)">
            <summary>
            Calculates the depth and Z position for specified series.
            </summary>
            <param name="series">Series object.</param>
            <param name="pointWidthSize">Defines the width and depth of the point.</param>
            <param name="depth">Returns series depth.</param>
            <param name="positionZ">Returns series Z position.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.GetNumberOfClusters">
            <summary>
            Returns number of clusters on the Z axis.
            </summary>
            <returns>Number of clusters on the Z axis.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.GetSeriesClusterIndex(Dundas.Charting.WinControl.Series)">
            <summary>
            Get series cluster index.
            </summary>
            <param name="series">Series object.</param>
            <returns>Series cluster index.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.Estimate3DInterval(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Estimate Interval for 3D Charts. When scene is rotated the 
            number of labels should be changed.
            </summary>
            <param name="graph">Chart graphics object.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.GetRealYAngle">
            <summary>
            Calculates real Y angle from Y angle and reverseSeriesOrder field
            </summary>
            <returns>Real Y angle</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.ShouldDrawOnSurface(Dundas.Charting.WinControl.SurfaceName,System.Boolean,System.Boolean)">
            <summary>
            Check if surface element should be drawn on the Back or Front layer.
            </summary>
            <param name="surfaceName">Surface name.</param>
            <param name="backLayer">Back/front layer.</param>
            <param name="onEdge">Indicates that element is on the edje (drawn on the back layer).</param>
            <returns>True if element should be drawn.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.DrawPointsInReverseOrder">
            <summary>
            Indicates that data points in all series of this 
            chart area should be drawn in reverse order.
            </summary>
            <returns>True if series points should be drawn in reverse order.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.DrawPointsToCenter(Dundas.Charting.WinControl.COPCoordinates@)">
            <summary>
            Checks if points should be drawn from sides to center.
            </summary>
            <param name="coord">Which coordinate of COP (X, Y or Z) to test for surface everlapping.</param>
            <returns>True if points should be drawn from sides to center.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.DrawSeriesToCenter">
            <summary>
            Checks if series should be drawn from sides to center.
            </summary>
            <returns>True if series should be drawn from sides to center.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.PaintChartSeries3D(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Draws 3D series in the chart area.
            </summary>
            <param name="graph">Chart graphics object.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.SelectChartSeries3D(Dundas.Charting.WinControl.ChartGraphics,System.Int32,System.Int32,System.String@,System.Int32@)">
            <summary>
            Selects 3D series in the chart area.
            </summary>
            <param name="graph">Chart graphics object.</param>
            <param name="x">x coordinate position</param>
            <param name="y">y coordinate position</param>
            <param name="seriesName">Selected data series</param>
            <param name="point">Selected data point</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.GetSeriesDrawingOrder(System.Boolean)">
            <summary>
            Gets the series list in drawing order.
            </summary>
            <param name="reverseSeriesOrder">Series order shoud be reversed because of the Y axis angle.</param>
            <returns>Gets the series list in drawing order.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.GetDataPointDrawingOrder(System.Collections.ArrayList,Dundas.Charting.WinControl.ChartTypes.IChartType,System.Boolean,Dundas.Charting.WinControl.COPCoordinates,System.Collections.IComparer)">
            <summary>
            Determine the order of points drawing from one or several series of the same type.
            </summary>
            <param name="seriesNamesList">List of series names.</param>
            <param name="chartType">Chart type.</param>
            <param name="selection">If True selection mode is active (points order should be reversed).</param>
            <param name="coord">Which coordinate of COP (X, Y or Z) to test for surface everlapping.</param>
            <param name="comparer">Points comparer class. Can be Null.</param>
            <returns>Array list of points in drawing order.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.GetCenterOfProjection(Dundas.Charting.WinControl.COPCoordinates)">
            <summary>
            Returns one or many (X, Y, Z) coordinates of the center of projection.
            </summary>
            <param name="coord">Defines coordinates to return.</param>
            <returns>Center of projection. Value can be set to float.NaN if not defined or outside plotting area.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.CheckSurfaceOrientation(Dundas.Charting.WinControl.COPCoordinates,Dundas.Charting.WinControl.Point3D,Dundas.Charting.WinControl.Point3D,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Checks orientations of two normal surfaces for each coordinate X, Y and Z.
            </summary>
            <param name="coord">Defines coordinates to return.</param>
            <param name="point1">First point.</param>
            <param name="point2">Second point.</param>
            <param name="xSameOrientation">X surfaces orientation is the same.</param>
            <param name="ySameOrientation">Y surfaces orientation is the same.</param>
            <param name="zSameOrientation">Z surfaces orientation is the same.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea3D.Area3DStyle">
            <summary>
            Chart area 3D style.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartArea3D.PointsDrawingOrderComparer">
            <summary>
            Used to compare points in array and sort them by drawing order.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartArea3D.PointsDrawingOrderComparer.area">
            <summary>
            Chart area object reference.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartArea3D.PointsDrawingOrderComparer.areaProjectionCenter">
            <summary>
            Area X position where visible sides are switched.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartArea3D.PointsDrawingOrderComparer.selection">
            <summary>
            Selection mode. Points order should be reversed.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.PointsDrawingOrderComparer.#ctor(Dundas.Charting.WinControl.ChartArea,System.Boolean,Dundas.Charting.WinControl.COPCoordinates)">
            <summary>
            Public constructor.
            </summary>
            <param name="area">Chart area.</param>
            <param name="selection">Selection indicator.</param>
            <param name="coord">Which coordinate of COP (X, Y or Z) to test for surface everlapping.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3D.PointsDrawingOrderComparer.Compare(System.Object,System.Object)">
            <summary>
            Comarer method.
            </summary>
            <param name="o1">First object.</param>
            <param name="o2">Second object.</param>
            <returns>Comparison result.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.ShouldSerializeAxes">
            <summary>
            Avoid serialization of the axes array
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.Invalidate(System.Boolean)">
            <summary>
            Invalidate chart (or just chart area ) when collection is changed
            </summary>
            <param name="invalidateAreaOnly">Indicates that only chart area must be invalidated.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.Restore3DAnglesAndReverseMode">
            <summary>
            Restores series order and X axis reverse mode for the 3D charts.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.Set3DAnglesAndReverseMode">
            <summary>
            Sets series order and X axis reverse mode for the 3D charts.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.SetTempValues">
            <summary>
            Save all automatic values like Minimum and Maximum.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.GetTempValues">
            <summary>
            Load all automatic values like Minimum and Maximum with original values.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.Initialize">
            <summary>
            Initialize Chart area and axes
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.ResetMinMaxFromData">
            <summary>
            Minimum and maximum do not have to be calculated 
            from data series every time. It is very time 
            consuming. Minimum and maximum are buffered 
            and only when this flags are set Minimum and 
            Maximum are refreshed from data.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.ReCalc">
            <summary>
            Recalculate the chart area
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.ReCalcInternal">
            <summary>
            Recalculate the chart area
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.ResetAutoValues">
            <summary>
            Reset auto calculated chart area values.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.GetBackgroundPosition(System.Boolean)">
            <summary>
            Calculates Position for the background.
            </summary>
            <param name="withScrollBars">Calculate with scroll bars</param>
            <returns>Background rectangle</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.Paint(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Paint the chart area.
            </summary>
            <param name="graph">Chart graphics.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.PaintCursors(Dundas.Charting.WinControl.ChartGraphics,System.Boolean)">
            <summary>
            Paint the chart area cursors.
            </summary>
            <param name="graph">Chart graphics.</param>
            <param name="cursorOnly">Indicates that only cursors are redrawn.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.SetCommon(Dundas.Charting.WinControl.CommonElements)">
            <summary>
            Set common elements for chart area and axes.
            </summary>
            <param name="common">Common Elements</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.Resize(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Call when the chart area is resized.
            </summary>
            <param name="chartGraph">Chart graphics object.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.Select(Dundas.Charting.WinControl.ChartGraphics,System.Int32,System.Int32,System.String@,System.Int32@,Dundas.Charting.WinControl.ChartElementType@,System.Object@)">
            <summary>
            Function, which returns selected data point and 
            selected series from x, and y coordinate position.
            </summary>
            <param name="graph">Provides drawing object to the display device. A Graphics object is associated with a specific device context.</param>
            <param name="x">x coordinate position</param>
            <param name="y">y coordinate position</param>
            <param name="series">Selected data series</param>
            <param name="point">Selected data point</param>
            <param name="elementType">Selectable chart element type.</param>
            <param name="obj">Selected object</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.CursorX">
            <summary>
            Chart area X axis cursor and range selection.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.CursorY">
            <summary>
            Chart area Y axis cursor and range selection.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.Axes">
            <summary>
            Reference to the Axes
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.AxisY">
            <summary>
            Reference to the Primary Y Axis
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.AxisX">
            <summary>
            Reference to the Primary X axis
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.AxisX2">
            <summary>
            Reference to the Secondary X axis
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.AxisY2">
            <summary>
            Reference to the Secondary Y axis
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.Position">
            <summary>
            Chart area position
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.InnerPlotPosition">
            <summary>
            Chart area position
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.BackColor">
            <summary>
            Chart area Background color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.BackHatchStyle">
            <summary>
            Chart area Background Hatch Style
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.BackImage">
            <summary>
            Chart area background image
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.BackImageMode">
            <summary>
            Chart area background image drawing mode.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.BackImageTranspColor">
            <summary>
            Background image transparent color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.BackImageAlign">
            <summary>
            Background image alignment used by ClampUnscale drawing mode.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.BackGradientType">
            <summary>
            Chart area Background Gradient Type
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.BackGradientEndColor">
            <summary>
            The second color which is used for a gradient
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.ShadowColor">
            <summary>
            The color of the shadow. Use alpha value for real shadow
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.ShadowOffset">
            <summary>
            The distance between the chart area 
            and a shadow of the chart area
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.BorderColor">
            <summary>
            The border line color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.BorderWidth">
            <summary>
            The width of the border line
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.BorderStyle">
            <summary>
            The style of the border line
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.Name">
            <summary>
            The name of the chart area
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea.EquallySizedAxesFont">
            <summary>
            Indicates that same auto-fit font size will be used for all axes labels.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.ChartAreaConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            This method overrides CanConvertTo from TypeConverter. This is called when someone
            wants to convert an instance of object to another type.  Here,
            only conversion to an InstanceDescriptor is supported.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea.ChartAreaConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            This code performs the actual conversion from an object to an InstanceDescriptor.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.LightStyle">
            <summary>
            3D area light style.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LightStyle.None">
            <summary>
            No light.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LightStyle.Simplistic">
            <summary>
            Simplistic ligth.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LightStyle.Realistic">
            <summary>
            Realistic ligth.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.COPCoordinates">
            <summary>
            Coordinates of the Center Of Projection
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.COPCoordinates.X">
            <summary>
            Check X coordinate.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.COPCoordinates.Y">
            <summary>
            Check Y coordinate.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.COPCoordinates.Z">
            <summary>
            Check Z coordinate.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartArea3DStyle">
            <summary>
            Class is used to store 3D style properties of the chart area scene.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3DStyle.#ctor">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3DStyle.#ctor(Dundas.Charting.WinControl.ChartArea)">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartArea3DStyle.Initialize(Dundas.Charting.WinControl.ChartArea)">
            <summary>
            Initialize Chart area and axes
            </summary>
            <param name="chartArea">Chart area object.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea3DStyle.Enable3D">
            <summary>
            Enables/disables 3D chart types in the area.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea3DStyle.RightAngleAxes">
            <summary>
            Indicates that axes are set at the right angle independent of the rotation.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea3DStyle.Clustered">
            <summary>
            Indicates that series should be drawn as clustered.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea3DStyle.Light">
            <summary>
            3D area light style.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea3DStyle.Perspective">
            <summary>
            3D area perspective which controls the view of the chart depth.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea3DStyle.XAngle">
            <summary>
            Chart area rotation angle around the X axis.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea3DStyle.YAngle">
            <summary>
            Chart area rotation angle around the Y axis.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea3DStyle.WallWidth">
            <summary>
            Chart area walls width in pixels.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea3DStyle.PointDepth">
            <summary>
            Series points depth in percentages (0-1000%).
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartArea3DStyle.PointGapDepth">
            <summary>
            Series points gap depth in percentages (0-1000%).
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartAreaCollection">
            <summary>
            Chart area collection.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartAreaCollection.array">
            <summary>
            Reference to ArrayList class
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartAreaCollection.common">
            <summary>
            Reference to Common Elements
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaCollection.#ctor(Dundas.Charting.WinControl.CommonElements)">
            <summary>
            Constructor
            </summary>
            <param name="common">Common element</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaCollection.#ctor">
            <summary>
            Default collecton constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaCollection.GetIndex(System.String)">
            <summary>
            Get chart area index by name
            </summary>
            <param name="name">Name of the chart area.</param>
            <returns>Index of the chart area or -1 if it does not exist.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaCollection.Add(System.String)">
            <summary>
            Add item to the collection
            </summary>
            <param name="name">Name of the chart area</param>
            <returns>New Chart Area</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaCollection.Add(System.Object)">
            <summary>
            Add Chart area object to the collection
            of chart areas
            </summary>
            <param name="value">Chart area object</param>
            <returns>The ArrayList index at which the value has been added.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaCollection.Insert(System.Int32,Dundas.Charting.WinControl.ChartArea)">
            <summary>
            Insert a chart area to the chart area collection
            </summary>
            <param name="index">Position</param>
            <param name="value">Chart area object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaCollection.Insert(System.Int32,System.Object)">
            <summary>
            Insert a chart area to the chart area collection
            </summary>
            <param name="index">Position</param>
            <param name="value">Chart area object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaCollection.CreateName(System.String)">
            <summary>
            Create Name of chart area and 
            check if that name exist.
            </summary>
            <param name="Name">Recomended Chart Area Name</param>
            <returns>New Chart Area Name</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaCollection.UniqueName(System.String)">
            <summary>
            Checks whether a name is unique.
            </summary>
            <param name="name">Chart area name</param>
            <returns>true if a name is unique</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaCollection.Invalidate">
            <summary>
            Invalidate chart 
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index
            </summary>
            <param name="index">The zero-based index of the element to remove</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaCollection.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object
            </summary>
            <param name="value">The Object to remove from the ChartAreaCollection</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaCollection.IndexOf(System.Object)">
            <summary>
            Searches for the specified Object and returns the zero-based 
            index of the first occurrence within the entire collection.
            </summary>
            <param name="value">The Object to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaCollection.Contains(System.Object)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="value">The Object to locate in the collection. The element to locate can be a null reference. </param>
            <returns>true if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection
            </summary>
            <returns>An IEnumerator for the entire collection</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartAreaCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the ArrayList or a portion of it to 
            a one-dimensional array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination 
            of the elements copied from ArrayList. The Array must have 
            zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartAreaCollection.Item(System.Object)">
            <summary>
            Indexer of the class. Returns the ChartArea object
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartAreaCollection.System#Collections#IList#$Item$(System.Int32)">
            <summary>
            IList interface
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartAreaCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartAreaCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartAreaCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is 
            synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartAreaCollection.Count">
            <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartAreaCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Cursor">
            <summary>
            Chart area cursor and range selection.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.Initialize(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.AxisName)">
            <summary>
            Initialize cursor class.
            </summary>
            <param name="chartArea">Chart area the cursor belongs to.</param>
            <param name="attachedToXAxis">Indicates which axes should be used X or Y.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.Paint(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Draws chart area cursor and selection.
            </summary>
            <param name="graph">Reference to the ChartGraphics object.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.SetCursorPosition(System.Double)">
            <summary>
            Sets new cursor position.
            </summary>
            <param name="newPosition">New cursor position as axis value.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.SetCursorPixelPosition(System.Drawing.PointF,System.Boolean)">
            <summary>
            Sets new cursor position.
            </summary>
            <param name="coord">New cursor position as pixel coordinates.</param>
            <param name="roundToBoundary">Indicates that coordinates must be rounded to area plotting boundary.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.SetSelectionPosition(System.Double,System.Double)">
            <summary>
            Sets new range selection position.
            </summary>
            <param name="newStart">New selection start position.</param>
            <param name="newEnd">New selection end position.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.SetSelectionPixelPosition(System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>
            Sets new range selection start and\or end position.
            </summary>
            <param name="coordStart">New selection start pixel coordinates.</param>
            <param name="coordEnd">New selection end pixel coordinates.</param>
            <param name="roundToBoundary">Indicates that coordinates must be rounded to area plotting boundary.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.RoundPosition(System.Double)">
            <summary>
            Rounds new position of the cursor or range selection
            </summary>
            <param name="cursorPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.Cursor_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse down event handler.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.Cursor_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse up event handler.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.Cursor_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse move event handler.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.SelectionScrollingTimerEventProcessor(System.Object,System.EventArgs)">
            <summary>
            This is the method to run when the timer is raised.
            Used to scroll axis data view while mouse is outside of the chart area.
            </summary>
            <param name="myObject"></param>
            <param name="myEventArgs"></param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.GetChartObject">
            <summary>
            Helper function which returns a reference to the chart object
            </summary>
            <returns>Chart object reference.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.GetSelectionRect(System.Drawing.RectangleF)">
            <summary>
            Get rectangle of the axis range selection.
            </summary>
            <returns>Selection rectangle.</returns>
            <param name="plotAreaPosition">Plot area rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.GetOppositeSelectionRect(System.Drawing.RectangleF)">
            <summary>
            Get rectangle of the opposite axis selection
            </summary>
            <param name="plotAreaPosition">Plot area rectangle.</param>
            <returns>Opposite selection rectangle.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.PositionToCursorPosition(System.Drawing.PointF)">
            <summary>
            Converts X or Y position value to the cursor axis value
            </summary>
            <param name="position">Position in relative coordinates.</param>
            <returns>Cursor position as axis value.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.GetPositionInPlotArea(System.Drawing.PointF,System.Boolean)">
            <summary>
            Checks if specified point is located inside the plotting area.
            Converts pixel coordinates to relative.
            </summary>
            <param name="point">Point coordinates to test.</param>
            <param name="roundToBoundary">Indicates that coordinates must be rounded to area boundary.</param>
            <returns>PointF.Empty or relative coordinates in plotting area.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.Invalidate(System.Boolean)">
            <summary>
            Invalidate chart are with the cursor.
            </summary>
            <param name="invalidateArea">Chart area must be invalidated.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Cursor.GetAxis">
            <summary>
            Gets axis objects the cursor is attached to.
            </summary>
            <returns>Axis object.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.Cursor.Position">
            <summary>
            Cursor position.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Cursor.SelectionStart">
            <summary>
            Range selection start position.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Cursor.SelectionEnd">
            <summary>
            Range selection end position.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Cursor.UserEnabled">
            <summary>
            Enables/Disables chart area cursor user interface.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Cursor.UserSelection">
            <summary>
            Enables/disables the range selection user interface.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Cursor.AutoScroll">
            <summary>
            Indicates that cursor will automatically scroll the area view if necessary.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Cursor.AxisType">
            <summary>
            The type of axis the cursor is attached to.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Cursor.Interval">
            <summary>
            Cursor movement interval.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Cursor.IntervalType">
            <summary>
            Cursor movement interval type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Cursor.IntervalOffset">
            <summary>
            Cursor movement interval offset.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Cursor.IntervalOffsetType">
            <summary>
            Cursor movement interval offset type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Cursor.LineColor">
            <summary>
            Cursor color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Cursor.LineStyle">
            <summary>
            Cursor line style.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Cursor.LineWidth">
            <summary>
            Cursor line width.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Cursor.SelectionColor">
            <summary>
            Chart area range selection color.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.CursorEventArgs">
            <summary>
            Chart area cursor and selection event arguments.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.CursorEventArgs.#ctor(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Axis,System.Double)">
            <summary>
            Creates cursor event arguments.
            </summary>
            <param name="chartArea">Chart area of the cursor.</param>
            <param name="axis">Axis of the cursor.</param>
            <param name="newPosition">New cursor position.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.CursorEventArgs.#ctor(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Axis,System.Double,System.Double)">
            <summary>
            Creates cursor event arguments.
            </summary>
            <param name="chartArea">Chart area of the cursor.</param>
            <param name="axis">Axis of the cursor.</param>
            <param name="newSelectionStart">New range selection start position.</param>
            <param name="newSelectioEnd">New range selection end position.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.CursorEventArgs.ChartArea">
            <summary>
            Chart area of the event.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CursorEventArgs.Axis">
            <summary>
            Axis of the event.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CursorEventArgs.NewPosition">
            <summary>
            New cursor position.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CursorEventArgs.NewSelectionStart">
            <summary>
            New range selection start position.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CursorEventArgs.NewSelectionEnd">
            <summary>
            New range selection end position.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ArrowOrientation">
            <summary>
            Axis Arrow orientation
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ArrowOrientation.Left">
            <summary>
            Arrow direction is Right - Left
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ArrowOrientation.Right">
            <summary>
            Arrow direction is Left - Right
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ArrowOrientation.Top">
            <summary>
            Arrow direction is Bottom - Top
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ArrowOrientation.Bottom">
            <summary>
            Arrow direction is Top - Bottom
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartImageAlign">
            <summary>
            Chart image alignment type.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartImageAlign.TopLeft">
            <summary>
            Image aligned to the top left corner
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartImageAlign.Top">
            <summary>
            Image aligned to the top boundary
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartImageAlign.TopRight">
            <summary>
            Image aligned to the top right corner
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartImageAlign.Right">
            <summary>
            Image aligned to the right boundary
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartImageAlign.BottomRight">
            <summary>
            Image aligned to the bottom right corner
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartImageAlign.Bottom">
            <summary>
            Image aligned to the bottom boundary
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartImageAlign.BottomLeft">
            <summary>
            Image aligned to the bottom left corner
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartImageAlign.Left">
            <summary>
            Image aligned to the left boundary
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartImageAlign.Center">
            <summary>
            Image aligned in the center
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartImageWrapMode">
            <summary>
            Specifies how a texture or gradient is tiled when 
            it is larger than the area being filled
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartImageWrapMode.Scaled">
            <summary>
            Clamps the texture or gradient to the object boundary.
            </summary>		
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartImageWrapMode.Tile">
            <summary>
            Tiles the gradient or texture.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartImageWrapMode.TileFlipX">
            <summary>
            Reverses the texture or gradient horizontally and 
            then tiles the texture or gradient.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartImageWrapMode.TileFlipXY">
            <summary>
            Reverses the texture or gradient horizontally and 
            vertically and then tiles the texture or gradient.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartImageWrapMode.TileFlipY">
            <summary>
            Reverses the texture or gradient vertically and 
            then tiles the texture or gradient.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartImageWrapMode.Unscaled">
            <summary>
            Unscaled
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.AxisEnabled">
            <summary>
            Axis Enabled mode
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AxisEnabled.Auto">
            <summary>
            Auto mode
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AxisEnabled.True">
            <summary>
            Always enabled
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AxisEnabled.False">
            <summary>
            Always disabled
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.DateTimeIntervalType">
            <summary>
            Date Time Interval Type
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DateTimeIntervalType.Auto">
            <summary>
            Auto Mode
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DateTimeIntervalType.Number">
            <summary>
            The Interval is Number
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DateTimeIntervalType.Years">
            <summary>
            The Interval is Year
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DateTimeIntervalType.Months">
            <summary>
            The Interval is Months
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DateTimeIntervalType.Weeks">
            <summary>
            The Interval is Weeks
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DateTimeIntervalType.Days">
            <summary>
            The Interval is Days
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DateTimeIntervalType.Hours">
            <summary>
            The Interval is Hours
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DateTimeIntervalType.Minutes">
            <summary>
            The Interval is Minutes
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DateTimeIntervalType.Seconds">
            <summary>
            The Interval is Seconds
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DateTimeIntervalType.Milliseconds">
            <summary>
            The Interval is Milliseconds
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DateTimeIntervalType.NotSet">
            <summary>
            Interval type is not defined.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartValueTypes">
            <summary>
            Chart Value Types
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartValueTypes.Auto">
            <summary>
            Auto value
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartValueTypes.Double">
            <summary>
            Double value
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartValueTypes.Single">
            <summary>
            Single value
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartValueTypes.Int">
            <summary>
            Integer value
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartValueTypes.Long">
            <summary>
            Long value
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartValueTypes.UInt">
            <summary>
            Unsigned integer
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartValueTypes.ULong">
            <summary>
            Unsigned long
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartValueTypes.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartValueTypes.DateTime">
            <summary>
            Date Time
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartHatchStyle">
            <summary>
            Chart hatching style
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.None">
            <summary>
            No hatching
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.BackwardDiagonal">
            <summary>
            BackwardDiagonal
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Cross">
            <summary>
            Cross
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.DarkDownwardDiagonal">
            <summary>
            DarkDownwardDiagonal
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.DarkHorizontal">
            <summary>
            DarkHorizontal
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.DarkUpwardDiagonal">
            <summary>
            DarkUpwardDiagonal
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.DarkVertical">
            <summary>
            DarkVertical
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.DashedDownwardDiagonal">
            <summary>
            DashedDownwardDiagonal
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.DashedHorizontal">
            <summary>
            DashedHorizontal
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.DashedUpwardDiagonal">
            <summary>
            DashedUpwardDiagonal
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.DashedVertical">
            <summary>
            DashedVertical
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.DiagonalBrick">
            <summary>
            DiagonalBrick
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.DiagonalCross">
            <summary>
            DiagonalCross
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Divot">
            <summary>
            Divot
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.DottedDiamond">
            <summary>
            DottedDiamond
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.DottedGrid">
            <summary>
            DottedGrid
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.ForwardDiagonal">
            <summary>
            ForwardDiagonal
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Horizontal">
            <summary>
            Horizontal
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.HorizontalBrick">
            <summary>
            HorizontalBrick
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.LargeCheckerBoard">
            <summary>
            LargeCheckerBoard
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.LargeConfetti">
            <summary>
            LargeConfetti
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.LargeGrid">
            <summary>
            LargeGrid
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.LightDownwardDiagonal">
            <summary>
            LightDownwardDiagonal
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.LightHorizontal">
            <summary>
            LightHorizontal
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.LightUpwardDiagonal">
            <summary>
            LightUpwardDiagonal
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.LightVertical">
            <summary>
            LightVertical
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.NarrowHorizontal">
            <summary>
            NarrowHorizontal
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.NarrowVertical">
            <summary>
            NarrowVertical
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.OutlinedDiamond">
            <summary>
            OutlinedDiamond
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Percent05">
            <summary>
            Percent05
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Percent10">
            <summary>
            Percent10
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Percent20">
            <summary>
            Percent20
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Percent25">
            <summary>
            Percent25
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Percent30">
            <summary>
            Percent30
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Percent40">
            <summary>
            Percent40
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Percent50">
            <summary>
            Percent50
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Percent60">
            <summary>
            Percent60
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Percent70">
            <summary>
            Percent70
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Percent75">
            <summary>
            Percent75
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Percent80">
            <summary>
            Percent80
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Percent90">
            <summary>
            Percent90
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Plaid">
            <summary>
            Plaid
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Shingle">
            <summary>
            Shingle
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.SmallCheckerBoard">
            <summary>
            SmallCheckerBoard
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.SmallConfetti">
            <summary>
            SmallConfetti
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.SmallGrid">
            <summary>
            SmallGrid
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.SolidDiamond">
            <summary>
            SolidDiamond
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Sphere">
            <summary>
            Sphere
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Trellis">
            <summary>
            Trellis
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Vertical">
            <summary>
            Vertical
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Wave">
            <summary>
            Wave
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.Weave">
            <summary>
            Weave
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.WideDownwardDiagonal">
            <summary>
            WideDownwardDiagonal
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.WideUpwardDiagonal">
            <summary>
            WideUpwardDiagonal
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartHatchStyle.ZigZag">
            <summary>
            ZigZag
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.AntiAlias">
            <summary>
            Anti Alias Mode
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AntiAlias.On">
            <summary>
            Anti aliasing is enabled
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AntiAlias.Off">
            <summary>
            Anti aliasing is disabled
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.AntiAliasing">
            <summary>
            Anti Aliasing flags
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AntiAliasing.None">
            <summary>
            No anti aliasing.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AntiAliasing.Text">
            <summary>
            Use anti aliasing when drawing text.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AntiAliasing.Graphics">
            <summary>
            Use anti aliasing when drawing grahics primitives (lines, rectangle, ...)
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.AntiAliasing.All">
            <summary>
            Anti alias everything.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.MarkerStyle">
            <summary>
            Marker Style
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.MarkerStyle.None">
            <summary>
            Marker disabled
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.MarkerStyle.Square">
            <summary>
            The marker style is Square
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.MarkerStyle.Circle">
            <summary>
            The marker style is Circle
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.MarkerStyle.Diamond">
            <summary>
            The marker style is Diamond
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.MarkerStyle.Triangle">
            <summary>
            The marker style is Triangle
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.MarkerStyle.Cross">
            <summary>
            The marker style is Cross
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.GradientType">
            <summary>
            Gradient Types
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GradientType.None">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GradientType.LeftRight">
            <summary>
            Specifies a gradient from Left to Right.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GradientType.TopBottom">
            <summary>
            Specifies a gradient from Top to Bottom.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GradientType.Center">
            <summary>
            Specifies a gradient from Center.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GradientType.DiagonalLeft">
            <summary>
            Specifies a gradient from Top Left to Bottom Right.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GradientType.DiagonalRight">
            <summary>
            Specifies a gradient from Top Right to Bottom Left.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GradientType.HorizontalCenter">
            <summary>
            Specifies a gradient from Center to Left and Right.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GradientType.VerticalCenter">
            <summary>
            Specifies a gradient from Center to Top and Bottom.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartDashStyle">
            <summary>
            Chart line style enumeration
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartDashStyle.NotSet">
            <summary>
            Style not set
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartDashStyle.Dash">
            <summary>
            Specifies a line consisting of dashes. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartDashStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartDashStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartDashStyle.Dot">
            <summary>
            Specifies a line consisting of dots. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartDashStyle.Solid">
            <summary>
            Specifies a solid line. 
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartGraphics">
            <summary>
            Encapsulates a GDI+ chart drawing functionality
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartGraphics3D">
            <summary>
            3D drawing related methods.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartGraphics3D.oppLeftBottomPoint">
            <summary>
            Helper field used to store the index of cylinder left/bottom side coordinate.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartGraphics3D.oppRigthTopPoint">
            <summary>
            Helper field used to store the index of cylinder right/top side coordinate.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartGraphics3D.frontLinePoint1">
            <summary>
            Point of the front line from the previous line segment.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartGraphics3D.frontLinePoint2">
            <summary>
            Point of the front line from the previous line segment.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartGraphics3D.frontLinePen">
            <summary>
            Previous line segment pen.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.Draw3DGridLine(Dundas.Charting.WinControl.ChartArea,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>
            Draws grid line in 3D space (on two area scene walls)
            </summary>
            <param name="area">Chart area.</param>
            <param name="color">Line color.</param>
            <param name="width">Line width.</param>
            <param name="style">Line style.</param>
            <param name="point1">First line point.</param>
            <param name="point2">Second line point.</param>
            <param name="horizontal">Indicates that grid line is horisontal.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.Draw3DGridLine(Dundas.Charting.WinControl.ChartArea,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,System.Drawing.PointF,System.Drawing.PointF,System.Boolean,System.Boolean,System.Drawing.PointF,System.Boolean@)">
            <summary>
            Draws grid line in 3D space (on two area scene walls)
            </summary>
            <param name="area">Chart area.</param>
            <param name="color">Line color.</param>
            <param name="width">Line width.</param>
            <param name="style">Line style.</param>
            <param name="point1">First line point.</param>
            <param name="point2">Second line point.</param>
            <param name="horizontal">Indicates that grid line is horisontal.</param>
            <param name="selectionMode">Indicates that selection mode is active - no painting.</param>
            <param name="hitPoint">Point below mouse</param>
            <param name="selected">True if gridline is selected.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.Draw3DLine(Dundas.Charting.WinControl.Matrix3D,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,Dundas.Charting.WinControl.Point3D,Dundas.Charting.WinControl.Point3D)">
            <summary>
            Draws a line connecting the two specified points.
            </summary>
            <param name="matrix">Coordinates transformation matrix.</param>
            <param name="color">Line color.</param>
            <param name="width">Line width.</param>
            <param name="style">Line style.</param>
            <param name="firstPoint">A Point that represents the first point to connect.</param>
            <param name="secondPoint">A Point that represents the second point to connect.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.Draw3DLine(Dundas.Charting.WinControl.Matrix3D,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,Dundas.Charting.WinControl.Point3D,Dundas.Charting.WinControl.Point3D,System.Boolean,System.Drawing.PointF,System.Boolean@)">
            <summary>
            Draws a line connecting the two specified points.
            </summary>
            <param name="matrix">Coordinates transformation matrix.</param>
            <param name="color">Line color.</param>
            <param name="width">Line width.</param>
            <param name="style">Line style.</param>
            <param name="firstPoint">A Point that represents the first point to connect.</param>
            <param name="secondPoint">A Point that represents the second point to connect.</param>
            <param name="selectionMode">If true, Selection mode is active</param>
            <param name="hitPoint">Position of the mouse</param>
            <param name="selected">True if line is selected</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.SelectLine(System.Int32,System.Drawing.PointF,System.Drawing.PointF,System.Double,System.Double)">
            <summary>
            This method recalculates whether selected position is close to a line (non curved).
            </summary>
            <param name="borderWidth">Width of the line</param>
            <param name="firstPoint">First point od a line</param>
            <param name="secondPoint">Second - End point of a line</param>
            <param name="x">Selected x absolute pixel position</param>
            <param name="y">Selected y absolute pixel position</param>
            <returns>True if line is selected</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.FillPieSides(System.Single,System.Single,System.Single,System.Drawing.PointF[],System.Drawing.SolidBrush,System.Drawing.Pen,System.Boolean)">
            <summary>
            This method draw and fill four point polygons which 
            represents sides of a pie slice.
            </summary>
            <param name="xAngle">X angle rotation</param>
            <param name="startAngle">Start Angle of a pie slice</param>
            <param name="sweepAngle">Sweep angle of a pie slice</param>
            <param name="points">Significant points of a pie slice</param>
            <param name="brush">Brush used for fill</param>
            <param name="pen">Pen used for drawing</param>
            <param name="doughnut">Chart Type is Doughnut</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.FillPieCurve(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.DataPoint,System.Drawing.Brush,System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Single,System.Single,System.Boolean,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            This method Draw and fill pie curves.
            </summary>
            <param name="area">Chart area used for drawing</param>
            <param name="point">Data Point</param>
            <param name="brush">Graphic Brush used for drawing</param>
            <param name="pen">Graphic Pen used for drawing</param>
            <param name="topFirstRectPoint">Rotated bounded rectangle points</param>
            <param name="topSecondRectPoint">Rotated bounded rectangle points</param>
            <param name="bottomFirstRectPoint">Rotated bounded rectangle points</param>
            <param name="bottomSecondRectPoint">Rotated bounded rectangle points</param>
            <param name="topFirstPoint">Significant pie points</param>
            <param name="topSecondPoint">Significant pie points</param>
            <param name="bottomFirstPoint">Significant pie points</param>
            <param name="bottomSecondPoint">Significant pie points</param>
            <param name="startAngle">Start pie angle</param>
            <param name="sweepAngle">End pie angle</param>
            <param name="selection">Selection mode is activated.</param>
            <param name="x">Selection x coordinate</param>
            <param name="y">Selection y coordinate</param>
            <param name="isSelected">True if this curve is selected.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.FillPieSlice(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.DataPoint,System.Drawing.SolidBrush,System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Single,System.Single,System.Boolean,System.Int32,System.Int32,System.Boolean@,System.Boolean)">
            <summary>
            This method draws projection of 3D pie slice. 
            </summary>
            <param name="area">Chart area used for drawing</param>
            <param name="point">Data point which creates this pie slice</param>
            <param name="brush">Graphic Brush used for drawing</param>
            <param name="pen">Graphic Pen used for drawing</param>
            <param name="firstRectPoint">The first point of transformed bounding rectangle</param>
            <param name="firstPoint">The first arc point of pie slice</param>
            <param name="secondRectPoint">The second point of transformed bounding rectangle</param>
            <param name="secondPoint">The second arc point of pie slice</param>
            <param name="center">The center point of pie slice</param>
            <param name="startAngle">Start angle of pie slice</param>
            <param name="sweepAngle">The end angle of pie slice</param>
            <param name="selection">Selection mode is activated.</param>
            <param name="x">Selection x coordinate</param>
            <param name="y">Selection y coordinate</param>
            <param name="isSelected">True if this curve is selected.</param>
            <param name="fill">Fill pie slice with brush</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.FillDoughnutSlice(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.DataPoint,System.Drawing.SolidBrush,System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Single,System.Single,System.Boolean,System.Int32,System.Int32,System.Boolean@,System.Boolean,System.Single)">
            <summary>
            This method draws projection of 3D pie slice. 
            </summary>
            <param name="area">Chart area used for drawing</param>
            <param name="point">Data point which creates this Doughnut slice</param>
            <param name="brush">Graphic Brush used for drawing</param>
            <param name="pen">Graphic Pen used for drawing</param>
            <param name="firstRectPoint">The first point of transformed bounding rectangle</param>
            <param name="firstPoint">The first arc point of Doughnut slice</param>
            <param name="secondRectPoint">The second point of transformed bounding rectangle</param>
            <param name="secondPoint">The second arc point of Doughnut slice</param>
            <param name="threePoint">The three point of Doughnut slice</param>
            <param name="fourPoint">The four point of Doughnut slice</param>
            <param name="center">The center point of Doughnut slice</param>
            <param name="startAngle">Start angle of Doughnut slice</param>
            <param name="sweepAngle">The end angle of Doughnut slice</param>
            <param name="selection">Selection mode is activated.</param>
            <param name="x">Selection x coordinate</param>
            <param name="y">Selection y coordinate</param>
            <param name="isSelected">True if this curve is selected.</param>
            <param name="fill">Fill Doughnut slice with brush</param>
            <param name="doughnutRadius">Radius for doughnut chart</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Draw Graphics Path. This method is introduced because of 
            bug in DrawPath method when Pen Width is bigger then 1.
            </summary>
            <param name="pen">Pen</param>
            <param name="path">Graphics Path</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.AngleCorrection(System.Single,System.Double,System.Single)">
            <summary>
            Angle correction algorithm. After rotation different 
            transformed angle should be used. This method transforms angles.
            </summary>
            <param name="angle">Not transformed angle</param>
            <param name="correction">Correction of bounding rectangle (change between width and height)</param>
            <param name="xAngle">X axis 3D rotation angle</param>
            <returns>Transformed angle</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.Draw3DPolygon(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Matrix3D,Dundas.Charting.WinControl.LightStyle,Dundas.Charting.WinControl.SurfaceName,System.Single,System.Drawing.Color,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.DataPoint3D,System.Collections.ArrayList,System.Int32,System.Single,Dundas.Charting.WinControl.DrawingOperationType,Dundas.Charting.WinControl.LineSegmentType,Dundas.Charting.WinControl.SurfaceName)">
            <summary>
            Draws a 3D polygon defined by 4 points in 2D space.
            </summary>
            <param name="area">Chart area reference.</param>
            <param name="matrix">Coordinates transformation matrix.</param>
            <param name="lightStyle">Light style (None, Simplistic, Realistic).</param>
            <param name="surfaceName">Name of the surface to draw.</param>
            <param name="positionZ">Z position of the back side of the 3D surface.</param>
            <param name="backColor">Color of rectangle</param>
            <param name="borderColor">Border Color</param>
            <param name="borderWidth">Border Width</param>
            <param name="borderStyle">Border Style</param>
            <param name="firstPoint">First point.</param>
            <param name="secondPoint">Second point.</param>
            <param name="thirdPoint">Third point.</param>
            <param name="fourthPoint">Fourth point.</param>
            <param name="points">Array of points.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="tension">Line tension.</param>
            <param name="operationType">Type of operation Drawing, Calculating Path or Both</param>
            <param name="lineSegmentType">Type of line segment. Used for step lines and splines.</param>
            <param name="thinBorders">Thin border will be drawn on specified sides.</param>
            <returns>Returns elemnt shape path if operationType parameter is set to CalcElementPath, otherwise Null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.GetSplineFlattenPath(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Matrix3D,System.Single,System.Single,Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.DataPoint3D,System.Collections.ArrayList,System.Int32,System.Single,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Helper method which returns the splines flatten path.
            </summary>
            <param name="area">Chart area reference.</param>
            <param name="matrix">Coordinates transformation matrix.</param>
            <param name="positionZ">Z position of the back side of the 3D surface.</param>
            <param name="depth">Depth of the 3D surface.</param>
            <param name="firstPoint">First point.</param>
            <param name="secondPoint">Second point.</param>
            <param name="points">Array of points.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="tension">Line tension.</param>
            <param name="flatten">Flatten result path.</param>
            <param name="translateCoordinates">Indicates that points coordinates should be translated.</param>
            <param name="yValueIndex">Index of the Y value to use.</param>
            <returns>Spline path.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.Draw3DSplineSurface(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Matrix3D,Dundas.Charting.WinControl.LightStyle,Dundas.Charting.WinControl.SurfaceName,System.Single,System.Single,System.Drawing.Color,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.DataPoint3D,System.Collections.ArrayList,System.Int32,System.Single,Dundas.Charting.WinControl.DrawingOperationType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Draws a 3D spline surface connecting the two specified points in 2D space.
            Used to draw Spline based charts.
            </summary>
            <param name="area">Chart area reference.</param>
            <param name="matrix">Coordinates transformation matrix.</param>
            <param name="lightStyle">Light style (None, Simplistic, Realistic).</param>
            <param name="surfaceName">Name of the surface to draw.</param>
            <param name="positionZ">Z position of the back side of the 3D surface.</param>
            <param name="depth">Depth of the 3D surface.</param>
            <param name="backColor">Color of rectangle</param>
            <param name="borderColor">Border Color</param>
            <param name="borderWidth">Border Width</param>
            <param name="borderStyle">Border Style</param>
            <param name="firstPoint">First point.</param>
            <param name="secondPoint">Second point.</param>
            <param name="points">Array of points.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="tension">Line tension.</param>
            <param name="operationType">Type of operation Drawing, Calculating Path or Both</param>
            <param name="forceThinBorder">Thin border will be drawn on all segments.</param>
            <param name="forceThickBorder">Thick border will be drawn on all segments.</param>
            <param name="reversedSeriesOrder">Series are drawn in reversed order.</param>
            <param name="multiSeries">Multiple series are drawn at the same time.</param>
            <param name="yValueIndex">Index of the Y value to use.</param>
            <returns>Returns elemnt shape path if operationType parameter is set to CalcElementPath, otherwise Null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.Draw3DSurface(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Matrix3D,Dundas.Charting.WinControl.LightStyle,Dundas.Charting.WinControl.SurfaceName,System.Single,System.Single,System.Drawing.Color,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.DataPoint3D,System.Collections.ArrayList,System.Int32,System.Single,Dundas.Charting.WinControl.DrawingOperationType,Dundas.Charting.WinControl.LineSegmentType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Draws a 3D surface connecting the two specified points in 2D space.
            Used to draw Line based charts.
            </summary>
            <param name="area">Chart area reference.</param>
            <param name="matrix">Coordinates transformation matrix.</param>
            <param name="lightStyle">Light style (None, Simplistic, Realistic).</param>
            <param name="surfaceName">Name of the surface to draw.</param>
            <param name="positionZ">Z position of the back side of the 3D surface.</param>
            <param name="depth">Depth of the 3D surface.</param>
            <param name="backColor">Color of rectangle</param>
            <param name="borderColor">Border Color</param>
            <param name="borderWidth">Border Width</param>
            <param name="borderStyle">Border Style</param>
            <param name="firstPoint">First point.</param>
            <param name="secondPoint">Second point.</param>
            <param name="points">Array of points.</param>
            <param name="pointIndex">Index of point to draw.</param>
            <param name="tension">Line tension.</param>
            <param name="operationType">Type of operation Drawing, Calculating Path or Both</param>
            <param name="lineSegmentType">Type of line segment. Used for step lines and splines.</param>
            <param name="forceThinBorder">Thin border will be drawn on all segments.</param>
            <param name="forceThickBorder">Thick border will be drawn on all segments.</param>
            <param name="reversedSeriesOrder">Series are drawn in reversed order.</param>
            <param name="multiSeries">Multiple series are drawn at the same time.</param>
            <param name="yValueIndex">Index of the Y value to use.</param>
            <returns>Returns elemnt shape path if operationType parameter is set to CalcElementPath, otherwise Null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.ShouldDrawLineChartSurface(Dundas.Charting.WinControl.ChartArea,System.Boolean,Dundas.Charting.WinControl.SurfaceName,Dundas.Charting.WinControl.SurfaceName,System.Drawing.Color,System.Collections.ArrayList,Dundas.Charting.WinControl.DataPoint3D,Dundas.Charting.WinControl.DataPoint3D,System.Boolean,System.Boolean,Dundas.Charting.WinControl.LineSegmentType@)">
            <summary>
            Helper method, which indicates if area chart surface should be drawn or not.
            </summary>
            <param name="area">Chart area object.</param>
            <param name="reversedSeriesOrder">Series are drawn in reversed order.</param>
            <param name="surfaceName">Surface name.</param>
            <param name="boundaryRectVisibleSurfaces">Visible surfaces of the bounding rectangle.</param>
            <param name="color">Point back color.</param>
            <param name="points">Array of all points.</param>
            <param name="firstPoint">First point.</param>
            <param name="secondPoint">Second point.</param>
            <param name="multiSeries">Inicates that multiple series are painted at the same time (stacked or side-by-side).</param>
            <param name="reversed">Inicates that points are in the reveresd order.</param>
            <param name="lineSegmentType">Returns line segment type.</param>
            <returns>Function retrns 0, 1 or 2. 0 - Do not draw surface, 1 - draw on the back, 2 - draw in front.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.FindPointByIndex(System.Collections.ArrayList,System.Int32,Dundas.Charting.WinControl.DataPoint3D,System.Int32@)">
            <summary>
            Helper method which finds point in the list by it's real index.
            </summary>
            <param name="points">List of points.</param>
            <param name="index">Required index.</param>
            <param name="neighborDataPoint">Neighbor point of the same series.</param>
            <param name="neighborPointIndex">Neighbor point index in the array list.</param>
            <returns>Data point found.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.Fill3DRectangle(System.Drawing.RectangleF,System.Single,System.Single,Dundas.Charting.WinControl.Matrix3D,Dundas.Charting.WinControl.LightStyle,System.Drawing.Color,Dundas.Charting.WinControl.ChartHatchStyle,System.String,Dundas.Charting.WinControl.ChartImageWrapMode,System.Drawing.Color,Dundas.Charting.WinControl.ChartImageAlign,Dundas.Charting.WinControl.GradientType,System.Drawing.Color,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,System.Drawing.Drawing2D.PenAlignment,Dundas.Charting.WinControl.DrawingOperationType)">
            <summary>
            Function is used to calculate the coordinates of the 2D rectangle in 3D space
            and either draw it or/and calculate the bounding path for selection.
            </summary>
            <param name="position">Position of 2D rectangle.</param>
            <param name="positionZ">Z position of the back side of the 3D rectangle.</param>
            <param name="depth">Depth of the 3D rectangle.</param>
            <param name="matrix">Coordinate transformation matrix.</param>
            <param name="lightStyle">Light style (None, Simplistic, Realistic).</param>
            <param name="backColor">Color of rectangle</param>
            <param name="backHatchStyle">Hatch style</param>
            <param name="backImage">Back Image</param>
            <param name="backImageMode">Image mode</param>
            <param name="backImageTranspColor">Image transparent color.</param>
            <param name="backImageAlign">Image alignment</param>
            <param name="backGradientType">Gradient type</param>
            <param name="backGradientEndColor">Gradient End Color</param>
            <param name="borderColor">Border Color</param>
            <param name="borderWidth">Border Width</param>
            <param name="borderStyle">Border Style</param>
            <param name="penAlignment">Pen Alignment</param>
            <param name="operationType">Type of operation Drawing, Calculating Path or Both</param>
            <returns>Returns elemnt shape path if operationType parameter is set to CalcElementPath, otherwise Null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.Fill3DRectangle(System.Drawing.RectangleF,System.Single,System.Single,Dundas.Charting.WinControl.Matrix3D,Dundas.Charting.WinControl.LightStyle,System.Drawing.Color,Dundas.Charting.WinControl.ChartHatchStyle,System.String,Dundas.Charting.WinControl.ChartImageWrapMode,System.Drawing.Color,Dundas.Charting.WinControl.ChartImageAlign,Dundas.Charting.WinControl.GradientType,System.Drawing.Color,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,System.Drawing.Drawing2D.PenAlignment,Dundas.Charting.WinControl.BarDrawingStyle,System.Boolean,Dundas.Charting.WinControl.DrawingOperationType)">
            <summary>
            Function is used to calculate the coordinates of the 2D rectangle in 3D space
            and either draw it or/and calculate the bounding path for selection.
            </summary>
            <param name="position">Position of 2D rectangle.</param>
            <param name="positionZ">Z position of the back side of the 3D rectangle.</param>
            <param name="depth">Depth of the 3D rectangle.</param>
            <param name="matrix">Coordinate transformation matrix.</param>
            <param name="lightStyle">Light style (None, Simplistic, Realistic).</param>
            <param name="backColor">Color of rectangle</param>
            <param name="backHatchStyle">Hatch style</param>
            <param name="backImage">Back Image</param>
            <param name="backImageMode">Image mode</param>
            <param name="backImageTranspColor">Image transparent color.</param>
            <param name="backImageAlign">Image alignment</param>
            <param name="backGradientType">Gradient type</param>
            <param name="backGradientEndColor">Gradient End Color</param>
            <param name="borderColor">Border Color</param>
            <param name="borderWidth">Border Width</param>
            <param name="borderStyle">Border Style</param>
            <param name="penAlignment">Pen Alignment</param>
            <param name="barDrawingStyle">Bar drawing style.</param>
            <param name="veticalOrientation">Defines if bar is verticale or horizontal.</param>
            <param name="operationType">Type of operation Drawing, Calculating Path or Both</param>
            <returns>Returns elemnt shape path if operationType parameter is set to CalcElementPath, otherwise Null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.DrawMarker3D(Dundas.Charting.WinControl.Matrix3D,Dundas.Charting.WinControl.LightStyle,System.Single,System.Drawing.PointF,Dundas.Charting.WinControl.MarkerStyle,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Int32,System.String,System.Drawing.Color,System.Int32,System.Drawing.Color,System.Drawing.RectangleF,Dundas.Charting.WinControl.DrawingOperationType)">
            <summary>
            Draw marker using absolute coordinates of the center.
            </summary>
            <param name="matrix">Coordinates transformation matrix.</param>
            <param name="lightStyle">Light style (None, Simplistic, Realistic).</param>
            <param name="positionZ">Z position of the 3D marker center.</param>
            <param name="point">Coordinates of the center.</param>
            <param name="markerStyle">Marker style.</param>
            <param name="markerSize">Marker size.</param>
            <param name="markerColor">Marker color.</param>
            <param name="markerBorderColor">Marker border color.</param>
            <param name="markerBorderSize">Marker border size.</param>
            <param name="markerImage">Marker image name.</param>
            <param name="markerImageTranspColor">Marker image transparent color.</param>
            <param name="shadowSize">Marker shadow size.</param>
            <param name="shadowColor">Marker shadow color.</param>
            <param name="imageScaleRect">Rectangle to which marker image should be scaled.</param>
            <param name="operationType">Type of operation Drawing, Calculating Path or Both</param>
            <returns>Returns elemnt shape path if operationType parameter is set to ElementPath, otherwise Null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.GetVisibleSurfaces(System.Drawing.RectangleF,System.Single,System.Single,Dundas.Charting.WinControl.Matrix3D)">
            <summary>
            Returns visible surfaces of the 3D cube.
            </summary>
            <param name="position">2D rectangle coordinates.</param>
            <param name="positionZ">Z coordinate of the back side of the cube.</param>
            <param name="depth">Cube depth.</param>
            <param name="matrix">Coordinate transformation matrix.</param>
            <returns>Visible surfaces.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.GetVisibleSurfacesWithPerspective(System.Drawing.RectangleF,System.Single,System.Single,Dundas.Charting.WinControl.Matrix3D)">
            <summary>
            Returns visible surfaces of the 3D cube.
            This method takes in consideration the perspective.
            </summary>
            <param name="position">2D rectangle coordinates.</param>
            <param name="positionZ">Z coordinate of the back side of the cube.</param>
            <param name="depth">Cube depth.</param>
            <param name="matrix">Coordinate transformation matrix.</param>
            <returns>Visible surfaces.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.GetVisibleSurfacesWithPerspective(Dundas.Charting.WinControl.Point3D[],Dundas.Charting.WinControl.Matrix3D)">
            <summary>
            Returns visible surfaces of the 3D cube.
            This method takes in consideration the perspective.
            </summary>
            <param name="cubePoints">Array of 8 points which define the cube.</param>
            <param name="matrix">Coordinate transformation matrix.</param>
            <returns>Visible surfaces.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.IsSurfaceVisible(Dundas.Charting.WinControl.Point3D,Dundas.Charting.WinControl.Point3D,Dundas.Charting.WinControl.Point3D)">
            <summary>
            Checks surface visibility using 3 points and clockwise ponts index rotation.
            </summary>
            <param name="first">First point.</param>
            <param name="second">Second point.</param>
            <param name="tree">Third point.</param>
            <returns>True if surface is visible</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.GetLinesIntersection(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gets intersection point od two linex.
            </summary>
            <param name="x1">First X value of first line.</param>
            <param name="y1">First Y value of first line.</param>
            <param name="x2">Second X value of first line.</param>
            <param name="y2">Second Y value of first line.</param>
            <param name="x3">First X value of second line.</param>
            <param name="y3">First Y value of second line.</param>
            <param name="x4">Second X value of second line.</param>
            <param name="y4">Second Y value of second line.</param>
            <returns>Intersection coordinates.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.Fill3DRectangleAsCylinder(System.Drawing.RectangleF,System.Single,System.Single,Dundas.Charting.WinControl.Matrix3D,Dundas.Charting.WinControl.LightStyle,System.Drawing.Color,Dundas.Charting.WinControl.ChartHatchStyle,System.String,Dundas.Charting.WinControl.ChartImageWrapMode,System.Drawing.Color,Dundas.Charting.WinControl.ChartImageAlign,Dundas.Charting.WinControl.GradientType,System.Drawing.Color,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,System.Drawing.Drawing2D.PenAlignment,System.Boolean,Dundas.Charting.WinControl.DrawingOperationType)">
            <summary>
            Function is used to calculate the coordinates of the 2D rectangle in 3D space
            and either draw it or/and calculate the bounding path for selection.
            </summary>
            <param name="position">Position of 2D rectangle.</param>
            <param name="positionZ">Z position of the back side of the 3D rectangle.</param>
            <param name="depth">Depth of the 3D rectangle.</param>
            <param name="matrix">Coordinate transformation matrix.</param>
            <param name="lightStyle">Light style (None, Simplistic, Realistic).</param>
            <param name="backColor">Color of rectangle</param>
            <param name="backHatchStyle">Hatch style</param>
            <param name="backImage">Back Image</param>
            <param name="backImageMode">Image mode</param>
            <param name="backImageTranspColor">Image transparent color.</param>
            <param name="backImageAlign">Image alignment</param>
            <param name="backGradientType">Gradient type</param>
            <param name="backGradientEndColor">Gradient End Color</param>
            <param name="borderColor">Border Color</param>
            <param name="borderWidth">Border Width</param>
            <param name="borderStyle">Border Style</param>
            <param name="penAlignment">Pen Alignment</param>
            <param name="veticalOrientation">Defines if bar is verticale or horizontal.</param>
            <param name="operationType">Type of operation Drawing, Calculating Path or Both</param>
            <returns>Returns elemnt shape path if operationType parameter is set to CalcElementPath, otherwise Null.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics3D.AddEllipseSegment(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Boolean,System.Single,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            Adds segment of the ellipse to form the front surface of the cylinder
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.DrawLine(System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws a line connecting the two specified points.
            </summary>
            <param name="color">Line color.</param>
            <param name="width">Line width.</param>
            <param name="style">Line style.</param>
            <param name="firstPointF">A Point that represents the first point to connect.</param>
            <param name="secondPointF">A Point that represents the second point to connect.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.DrawLine(System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Int32)">
            <summary>
            Draws a line with shadow connecting the two specified points.
            </summary>
            <param name="color">Line color.</param>
            <param name="width">Line width.</param>
            <param name="style">Line style.</param>
            <param name="firstPoint">A Point that represents the first point to connect.</param>
            <param name="secondPoint">A Point that represents the second point to connect.</param>		
            <param name="shadowColor">Shadow Color.</param>
            <param name="shadowOffset">Shadow Offset.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.GetHatchBrush(Dundas.Charting.WinControl.ChartHatchStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a Hatch Brush.
            </summary>
            <param name="hatchStyle">Chart Hatch style.</param>
            <param name="backColor">Back Color.</param>
            <param name="foreColor">Fore Color.</param>
            <returns>Brush</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.GetTextureBrush(System.String,System.Drawing.Color,Dundas.Charting.WinControl.ChartImageWrapMode)">
            <summary>
            Creates a textured brush.
            </summary>
            <param name="name">Image file name or URL.</param>
            <param name="backImageTranspColor">Image transparent color.</param>
            <param name="mode">Wrap mode.</param>
            <returns>Textured brush.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.GetGradientBrush(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,Dundas.Charting.WinControl.GradientType)">
            <summary>
            This method creates a gradient brush.
            </summary>
            <param name="rectangle">A rectangle which has to be filled with a gradient color.</param>
            <param name="firstColor">First color.</param>
            <param name="secondColor">Second color.</param>
            <param name="type">Gradient type.</param>
            <returns>Gradient Brush</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.GetPieGradientBrush(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            This method creates a gradient brush for pie. This gradient is one 
            of the types used only with pie and doughnut.
            </summary>
            <param name="rectangle">A rectangle which has to be filled with a gradient color</param>
            <param name="firstColor">First color</param>
            <param name="secondColor">Second color</param>
            <returns>Gradient Brush</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.GetPenStyle(Dundas.Charting.WinControl.ChartDashStyle)">
            <summary>
            Converts GDI+ line style to Chart Graph line style.
            </summary>
            <param name="style">Chart Line style.</param>
            <returns>GDI+ line style.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.DrawMarker(System.Drawing.PointF,Dundas.Charting.WinControl.MarkerStyle,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Int32,System.String,System.Drawing.Color,System.Int32,System.Drawing.Color,System.Drawing.RectangleF)">
            <summary>
            Draw marker using relative coordinates of the center.
            </summary>
            <param name="point">Coordinates of the center.</param>
            <param name="markerStyle">Marker style.</param>
            <param name="markerSize">Marker size.</param>
            <param name="markerColor">Marker color.</param>
            <param name="markerBorderColor">Marker border color.</param>
            <param name="markerBorderSize">Marker border size.</param>
            <param name="markerImage">Marker image name.</param>
            <param name="markerImageTranspColor">Marker image transparent color.</param>
            <param name="shadowSize">Marker shadow size.</param>
            <param name="shadowColor">Marker shadow color.</param>
            <param name="imageScaleRect">Rectangle to which marker image should be scaled.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.DrawMarkerAbs(System.Drawing.PointF,Dundas.Charting.WinControl.MarkerStyle,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Int32,System.String,System.Drawing.Color,System.Int32,System.Drawing.Color,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Draw marker using absolute coordinates of the center.
            </summary>
            <param name="point">Coordinates of the center.</param>
            <param name="markerStyle">Marker style.</param>
            <param name="markerSize">Marker size.</param>
            <param name="markerColor">Marker color.</param>
            <param name="markerBorderColor">Marker border color.</param>
            <param name="markerBorderSize">Marker border size.</param>
            <param name="markerImage">Marker image name.</param>
            <param name="markerImageTranspColor">Marker image transparent color.</param>
            <param name="shadowSize">Marker shadow size.</param>
            <param name="shadowColor">Marker shadow color.</param>
            <param name="imageScaleRect">Rectangle to which marker image should be scaled.</param>
            <param name="forceAntiAlias">Always use anti aliasing when drawing the marker.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat,System.Int32)">
            <summary>
            Draw a string.
            </summary>
            <param name="text">Text.</param>
            <param name="font">Text Font.</param>
            <param name="brush">Text Brush.</param>
            <param name="position">Text Position.</param>
            <param name="format">Format and text alignment.</param>
            <param name="angle">Text angle.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.DrawLabelString(Dundas.Charting.WinControl.Axis,Dundas.Charting.WinControl.LabelRow,Dundas.Charting.WinControl.LabelMark,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat,System.Int32,System.Drawing.RectangleF)">
            <summary>
            Draw label string.
            </summary>
            <param name="axis">Label axis.</param>
            <param name="labelRow">Label text row (1 or 2).</param>
            <param name="labelMark">Second row labels mark.</param>
            <param name="text">Label text.</param>
            <param name="font">Text bont.</param>
            <param name="brush">Text brush.</param>
            <param name="position">Text position rectangle.</param>
            <param name="format">Label text format.</param>
            <param name="angle">Label text angle.</param>
            <param name="boundaryRect">Specifies the rectangle where the label text MUST be fitted.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.DrawSecondRowLabelMark(Dundas.Charting.WinControl.Axis,System.Drawing.RectangleF,System.Drawing.SizeF,Dundas.Charting.WinControl.LabelMark)">
            <summary>
            Draw marks for the labels in second row
            </summary>
            <param name="axis">Axis object.</param>
            <param name="absPosition">Absolute position of the text.</param>
            <param name="labelSize">Exact mesured size of the text.</param>
            <param name="labelMark">Label mark type to draw.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.MeasureString(System.String,System.Drawing.Font)">
            <summary>
            Measures the specified text string when drawn with 
            the specified Font object and formatted with the 
            specified StringFormat object.
            </summary>
            <param name="text">The string to measure</param>
            <param name="font">The Font object used to determine the size of the text string. </param>
            <returns>A SizeF structure that represents the size of text as drawn with font.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)">
            <summary>
            Measures the specified text string when drawn with 
            the specified Font object and formatted with the 
            specified StringFormat object.
            </summary>
            <param name="text">The string to measure</param>
            <param name="font">The Font object used to determine the size of the text string. </param>
            <param name="layoutArea">A SizeF structure that specifies the layout rectangle for the text. </param>
            <param name="stringFormat">A StringFormat object that represents formatting information, such as line spacing, for the text string. </param>
            <returns>A SizeF structure that represents the size of text as drawn with font.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Draws the specified text string at the specified location 
            with the specified Brush object and font. The formatting 
            attributes in the specified StringFormat object are applied 
            to the text.
            </summary>
            <param name="text">A string object that specifies the text to draw.</param>
            <param name="font">A Font object that specifies the font face and size with which to draw the text.</param>
            <param name="brush">A Brush object that determines the color and/or texture of the drawn text.</param>
            <param name="layoutRectangle">A RectangleF structure that specifies the location of the drawn text.</param>
            <param name="format">A StringFormat object that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat,System.Int32)">
            <summary>
            Draws the specified text string at the specified location 
            with the specified angle and with the specified Brush object and font. The 
            formatting attributes in the specified StringFormat object are applied 
            to the text.
            </summary>
            <param name="text">A string object that specifies the text to draw.</param>
            <param name="font">A Font object that specifies the font face and size with which to draw the text.</param>
            <param name="brush">A Brush object that determines the color and/or texture of the drawn text.</param>
            <param name="layoutRectangle">A RectangleF structure that specifies the location of the drawn text.</param>
            <param name="format">A StringFormat object that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.</param>
            <param name="angle">A angle of the text</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.FillRectangle(System.Drawing.RectangleF,System.Drawing.Color,Dundas.Charting.WinControl.ChartHatchStyle,System.String,Dundas.Charting.WinControl.ChartImageWrapMode,System.Drawing.Color,Dundas.Charting.WinControl.ChartImageAlign,Dundas.Charting.WinControl.GradientType,System.Drawing.Color,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.PenAlignment)">
            <summary>
            Draw a bar with shadow
            </summary>
            <param name="rectF">Size of rectangle</param>
            <param name="backColor">Color of rectangle</param>
            <param name="backHatchStyle">Hatch style</param>
            <param name="backImage">Back Image</param>
            <param name="backImageMode">Image mode</param>
            <param name="backImageTranspColor">Image transparent color.</param>
            <param name="backImageAlign">Image alignment</param>
            <param name="backGradientType">Gradient type</param>
            <param name="backGradientEndColor">Gradient End Color</param>
            <param name="borderColor">Border Color</param>
            <param name="borderWidth">Border Width</param>
            <param name="borderStyle">Border Style</param>
            <param name="shadowColor">Shadow Color</param>
            <param name="shadowOffset">Shadow Offset</param>
            <param name="penAlignment">Pen Alignment</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.FillRectangleShadow(System.Drawing.RectangleF,System.Drawing.Color,System.Single,System.Drawing.Color)">
            <summary>
            Draw Shadow for a bar
            </summary>
            <param name="rect">Bar rectangle</param>
            <param name="shadowColor">Shadow Color</param>
            <param name="shadowOffset">Shadow Offset</param>
            <param name="backColor">Back Color</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.FillAbsoluteRectangle(System.Drawing.RectangleF,System.Drawing.Color,Dundas.Charting.WinControl.ChartHatchStyle,System.String,Dundas.Charting.WinControl.ChartImageWrapMode,System.Drawing.Color,Dundas.Charting.WinControl.ChartImageAlign,Dundas.Charting.WinControl.GradientType,System.Drawing.Color,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,System.Drawing.Drawing2D.PenAlignment)">
            <summary>
            Draw Rectangle using absolute coordinates.
            </summary>
            <param name="rect">Size of rectangle</param>
            <param name="backColor">Color of rectangle</param>
            <param name="backHatchStyle">Hatch Style</param>
            <param name="backImage">Image URL</param>
            <param name="backImageMode">Image Mode</param>
            <param name="backImageTranspColor">Image transparent color.</param>
            <param name="backImageAlign">Image alignment.</param>
            <param name="backGradientType">Gradient Type</param>
            <param name="backGradientEndColor">End Gradient color</param>
            <param name="borderColor">Border Color</param>
            <param name="borderWidth">Border Width</param>
            <param name="borderStyle">Border Style</param>
            <param name="penAlignment">Border is outside or inside rectangle</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.DrawAbsolutePath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Color,Dundas.Charting.WinControl.ChartHatchStyle,System.String,Dundas.Charting.WinControl.ChartImageWrapMode,System.Drawing.Color,Dundas.Charting.WinControl.ChartImageAlign,Dundas.Charting.WinControl.GradientType,System.Drawing.Color,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,System.Drawing.Drawing2D.PenAlignment)">
            <summary>
            Fills graphics path using absolute coordinates.
            </summary>
            <param name="path">Graphics path to fill.</param>
            <param name="backColor">Color of rectangle</param>
            <param name="backHatchStyle">Hatch Style</param>
            <param name="backImage">Image URL</param>
            <param name="backImageMode">Image Mode</param>
            <param name="backImageTranspColor">Image transparent color.</param>
            <param name="backImageAlign">Image alignment.</param>
            <param name="backGradientType">Gradient Type</param>
            <param name="backGradientEndColor">End Gradient color</param>
            <param name="borderColor">Border Color</param>
            <param name="borderWidth">Border Width</param>
            <param name="borderStyle">Border Style</param>
            <param name="penAlignment">Border is outside or inside rectangle</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.GetRelativeRectangle(System.Drawing.RectangleF)">
            <summary>
            Converts Absolute Coordinates of Rectangle to 
            Relative coordinates
            </summary>
            <param name="absolute">Absolute coordinates</param>
            <returns>Relative coordinates in %</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.GetRelativePoint(System.Drawing.PointF)">
            <summary>
            Converts Absolute Coordinates of Point to 
            Relative coordinates
            </summary>
            <param name="absolute">Absolute coordinates</param>
            <returns>Relative coordinates in %</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.GetRelativeSize(System.Drawing.SizeF)">
            <summary>
            Converts Absolute size to Relative size
            </summary>
            <param name="size">Absolute size</param>
            <returns>Relative size</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.GetAbsolutePoint(System.Drawing.PointF)">
            <summary>
            Converts Relative Coordinates of Point to 
            Absolute coordinates
            </summary>
            <param name="relative">Relative position in %</param>
            <returns>Absolute position</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.GetAbsoluteRectangle(System.Drawing.RectangleF)">
            <summary>
            Converts Relative Coordinates of Rectangle to 
            Absolute coordinates
            </summary>
            <param name="relative">Relative position in %</param>
            <returns>Absolute position</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.GetAbsoluteSize(System.Drawing.SizeF)">
            <summary>
            Converts Relative size to Absolute size
            </summary>
            <param name="relative">Relative size in %</param>
            <returns>Absolute size</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.CreateRoundedRectPath(System.Drawing.RectangleF,System.Single[])">
            <summary>
            Helper function which creates a rounded rectangle path.
            </summary>
            <param name="rect">Rectangle coordinates.</param>
            <param name="cornerRadius">Array of 4 corners radius.</param>
            <returns>Graphics path object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.DrawRoundedRectShadow(System.Drawing.RectangleF,System.Single[],System.Single,System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Helper function which draws a shadow of the rounded rect.
            </summary>
            <param name="rect">Rectangle coordinates.</param>
            <param name="cornerRadius">Array of 4 corners radius.</param>
            <param name="radius">Rounding radius.</param>
            <param name="centerColor">Center color.</param>
            <param name="surroundColor">Surrounding color.</param>
            <param name="shadowScale">Shadow scale value.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.Draw3DBorder(Dundas.Charting.WinControl.BorderSkinAttributes,System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws 3D border in relative coordinates.
            </summary>
            <param name="borderSkin">Border skin object.</param>
            <param name="rect">Rectangle of the border (relative coordinates).</param>
            <param name="borderColor">Border color.</param>
            <param name="backColor">Rectangle back color.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.Draw3DBorderAbs(Dundas.Charting.WinControl.BorderSkinAttributes,System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws 3D border in absolute coordinates.
            </summary>
            <param name="borderSkin">Border skin object.</param>
            <param name="absRect">Rectangle of the border (pixel coordinates).</param>
            <param name="borderColor">Border color.</param>
            <param name="backColor">Rectangle back color.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.Draw3DBorder(Dundas.Charting.WinControl.BorderSkinAttributes,System.Drawing.RectangleF,System.Drawing.Color,Dundas.Charting.WinControl.ChartHatchStyle,System.String,Dundas.Charting.WinControl.ChartImageWrapMode,System.Drawing.Color,Dundas.Charting.WinControl.ChartImageAlign,Dundas.Charting.WinControl.GradientType,System.Drawing.Color,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle)">
            <summary>
            Draws 3D border in absolute coordinates.
            </summary>
            <param name="borderSkin">Border skin object.</param>
            <param name="rect">Rectangle of the border (pixel coordinates).</param>
            <param name="backColor">Color of rectangle</param>
            <param name="backHatchStyle">Hatch style</param>
            <param name="backImage">Back Image</param>
            <param name="backImageMode">Image mode</param>
            <param name="backImageTranspColor">Image transparent color.</param>
            <param name="backImageAlign">Image alignment</param>
            <param name="backGradientType">Gradient type</param>
            <param name="backGradientEndColor">Gradient End Color</param>
            <param name="borderColor">Border Color</param>
            <param name="borderWidth">Border Width</param>
            <param name="borderStyle">Border Style</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.Draw3DBorderAbs(Dundas.Charting.WinControl.BorderSkinAttributes,System.Drawing.RectangleF,System.Drawing.Color,Dundas.Charting.WinControl.ChartHatchStyle,System.String,Dundas.Charting.WinControl.ChartImageWrapMode,System.Drawing.Color,Dundas.Charting.WinControl.ChartImageAlign,Dundas.Charting.WinControl.GradientType,System.Drawing.Color,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle)">
            <summary>
            Draws 3D border in absolute coordinates.
            </summary>
            <param name="borderSkin">Border skin object.</param>
            <param name="absRect">Rectangle of the border (pixel coordinates).</param>
            <param name="backColor">Color of rectangle</param>
            <param name="backHatchStyle">Hatch style</param>
            <param name="backImage">Back Image</param>
            <param name="backImageMode">Image mode</param>
            <param name="backImageTranspColor">Image transparent color.</param>
            <param name="backImageAlign">Image alignment</param>
            <param name="backGradientType">Gradient type</param>
            <param name="backGradientEndColor">Gradient End Color</param>
            <param name="borderColor">Border Color</param>
            <param name="borderWidth">Border Width</param>
            <param name="borderStyle">Border Style</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.DrawPie(System.Drawing.RectangleF,System.Single,System.Single,System.Drawing.Color,Dundas.Charting.WinControl.ChartHatchStyle,System.String,Dundas.Charting.WinControl.ChartImageWrapMode,System.Drawing.Color,Dundas.Charting.WinControl.ChartImageAlign,Dundas.Charting.WinControl.GradientType,System.Drawing.Color,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,System.Drawing.Drawing2D.PenAlignment,System.Boolean,System.Double,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Draws a pie defined by an ellipse specified by a Rectangle structure and two radial lines.
            </summary>
            <param name="rect">Rectangle structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <param name="backColor">Fill color</param>
            <param name="backHatchStyle">Fill Hatch Style</param>
            <param name="backImage">Fill texture</param>
            <param name="backImageMode">Texture image mode</param>
            <param name="backImageTranspColor">Texture transparent color</param>
            <param name="backImageAlign">Texture Alignment</param>
            <param name="backGradientType">Fill Gradient type</param>
            <param name="backGradientEndColor">Fill Gradient Second Color</param>
            <param name="borderColor">Border Color</param>
            <param name="borderWidth">Border Width</param>
            <param name="borderStyle">Border Style</param>
            <param name="penAlignment">Border Pen Alignment</param>
            <param name="shadow">True if shadow is active</param>
            <param name="shadowOffset">An offset of the shadow</param>
            <param name="doughnut">True if Doughnut is drawn instead of pie</param>
            <param name="doughnutRadius">Internal radius of the doughnut</param>
            <param name="explodedShadow">Used for soft shadow</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.DrawArrow(System.Drawing.PointF,Dundas.Charting.WinControl.ArrowOrientation,Dundas.Charting.WinControl.ArrowsType,System.Drawing.Color,System.Int32,Dundas.Charting.WinControl.ChartDashStyle,System.Double,System.Double)">
            <summary>
            Draw Arrows.
            </summary>
            <param name="position">Position of the arrow</param>
            <param name="orientation">Orientation of the arrow - left, right, top, bottom </param>
            <param name="type">Arrow type: Triangle, Sharp Triangle, Lines</param>
            <param name="color">Color of the arrow</param>
            <param name="lineWidth">Line width</param>
            <param name="lineDashStyle">Line Dash style</param>
            <param name="shift">Distance from the chart area</param>
            <param name="size">Arrow size</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.GetArrowShape(System.Drawing.PointF,Dundas.Charting.WinControl.ArrowOrientation,System.Double,System.Double,System.Int32,Dundas.Charting.WinControl.ArrowsType,System.Drawing.PointF@)">
            <summary>
            This function calculates points for polygon, which represents 
            shape of an arrow. There are four different orientations 
            of arrow and three arrow types.
            </summary>
            <param name="position">Arrow position</param>
            <param name="orientation">Arrow orientation ( Left, Right, Top, Bottom )</param>
            <param name="shift">Distance from chart area to the arrow</param>
            <param name="size">Arrow size</param>
            <param name="lineWidth">Line Width</param>
            <param name="type">Arrow type</param>
            <param name="endPoint">End point of the axis and the beginning of arrow</param>
            <returns>Polygon points</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.DrawImage(System.String,System.Drawing.RectangleF)">
            <summary>
            Draws the specified Image object at the specified location 
            and with the specified size.
            </summary>
            <param name="name">Image file name or URL</param>
            <param name="position">Image position</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.Round(System.Drawing.RectangleF)">
            <summary>
            Find rounding coordinates for a rectangle
            </summary>
            <param name="rect">Rectangle which has to be rounded</param>
            <returns>Rounded rectangle</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.GetPositionFromAxis(System.String,Dundas.Charting.WinControl.AxisName,System.Double)">
            <summary>
            This method will return relative pixel position (in percentages 0 – 100) 
            from double value. This method uses axis position and axis scale to find 
            position for the value. This method is very important for custom drawing 
            inside chart area and it helps to find position for a data point value.
            </summary>
            <param name="chartAreaName">Chart Area Name</param>
            <param name="axis">Axis Name Enumeration</param>
            <param name="axisValue">Value, which has to be converted to relative pixel position</param>
            <returns>Relative pixel position from axis</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.SetPictureSize(System.Int32,System.Int32)">
            <summary>
            Set picture size
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.#ctor(Dundas.Charting.WinControl.CommonElements)">
            <summary>
            Constructor
            </summary>
            <param name="common">Common elements class</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.Dispose">
            <summary>
            Dispose pen and brush
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.SetClip(System.Drawing.RectangleF)">
            <summary>
            Sets the clipping region of this Graphics object 
            to the rectangle specified by a RectangleF structure.
            </summary>
            <param name="region">Region rectangle</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.ResetClip">
            <summary>
            Resets the clip region of this Graphics object 
            to an infinite region.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartGraphics.GetGradientColor(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>
            Returns the gradient color from a gradient position.
            </summary>
            <param name="beginColor">The color from the gradient begining.</param>
            <param name="endColor">The color from the gradient end.</param>
            <param name="dPosition">Relative position between Begin color and End color. The double number between 0 - 1.</param>
            <returns>Result color.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartGraphics.Graphics">
            <summary>
            Reference to the Graphics object
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartGraphics.AntiAliasing">
            <summary>
            Chart Graphics Anti alias mode
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.SurfaceName">
            <summary>
            3D cube surfaces names.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.SurfaceName.Front">
            <summary>
            Front.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.SurfaceName.Back">
            <summary>
            Back.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.SurfaceName.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.SurfaceName.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.SurfaceName.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.SurfaceName.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.BarDrawingStyle">
            <summary>
            Defines the style how the bars\columns are drawn.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BarDrawingStyle.Default">
            <summary>
            Default 3D bar.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.BarDrawingStyle.Cylinder">
            <summary>
            3D Cylinder.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.PiePoints">
            <summary>
            This enumeration defines all significant points in a pie 
            slice. Only these points should be transformed for pie 
            chart using Matrix object.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.Top180">
            <summary>
            Angle 180 Top point on the arc
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.Bottom180">
            <summary>
            Angle 180 Bottom point on the arc
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.Top0">
            <summary>
            Angle 0 Top point on the arc
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.Bottom0">
            <summary>
            Angle 0 Bottom point on the arc
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.TopStart">
            <summary>
            Top Start Angle point on the arc
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.TopEnd">
            <summary>
            Top End Angle point on the arc
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.BottomStart">
            <summary>
            Bottom Start Angle point on the arc
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.BottomEnd">
            <summary>
            Bottom End Angle point on the arc
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.TopCenter">
            <summary>
            Center Top
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.BottomCenter">
            <summary>
            Center Bottom
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.TopLabelLine">
            <summary>
            Top Label Line
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.TopLabelLineOut">
            <summary>
            Top Label Line Out
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.TopLabelCenter">
            <summary>
            Top Label Center
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.TopRectTopLeftPnt">
            <summary>
            Top Rectangle Top Left Point
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.TopRectBottomRightPnt">
            <summary>
            Top Rectangle Right Bottom Point
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.BottomRectTopLeftPnt">
            <summary>
            Bottom Rectangle Top Left Point
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.BottomRectBottomRightPnt">
            <summary>
            Bottom Rectangle Right Bottom Point
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.DoughnutTop180">
            <summary>
            Angle 180 Top point on the Doughnut arc
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.DoughnutBottom180">
            <summary>
            Angle 180 Bottom point on the Doughnut arc
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.DoughnutTop0">
            <summary>
            Angle 0 Top point on the Doughnut arc
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.DoughnutBottom0">
            <summary>
            Angle 0 Bottom point on the Doughnut arc
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.DoughnutTopStart">
            <summary>
            Top Start Angle point on the Doughnut arc
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.DoughnutTopEnd">
            <summary>
            Top End Angle point on the Doughnut arc
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.DoughnutBottomStart">
            <summary>
            Bottom Start Angle point on the Doughnut arc
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.DoughnutBottomEnd">
            <summary>
            Bottom End Angle point on the Doughnut arc
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.DoughnutTopRectTopLeftPnt">
            <summary>
            Doughnut Top Rectangle Top Left Point
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.DoughnutTopRectBottomRightPnt">
            <summary>
            Doughnut Top Rectangle Right Bottom Point
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.DoughnutBottomRectTopLeftPnt">
            <summary>
            Doughnut Bottom Rectangle Top Left Point
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.PiePoints.DoughnutBottomRectBottomRightPnt">
            <summary>
            Doughnut Bottom Rectangle Right Bottom Point
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.DrawingOperationType">
            <summary>
            Type of drawing operation.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DrawingOperationType.DrawElement">
            <summary>
            Draw element.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DrawingOperationType.CalcElementPath">
            <summary>
            Calculate element path. (for selection or tooltips)
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.LineSegmentType">
            <summary>
            Type of line segment.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LineSegmentType.Single">
            <summary>
            Only one segment exsits.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LineSegmentType.First">
            <summary>
            First segment.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LineSegmentType.Middle">
            <summary>
            Middle segment.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LineSegmentType.Last">
            <summary>
            Last segment.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Point3D">
            <summary>
            Represent point coordinates in 3D.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Point3D.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Point3D.#ctor">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Point3D.X">
            <summary>
            X coordinate of the point.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Point3D.Y">
            <summary>
            Y coordinate of the point.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Point3D.Z">
            <summary>
            Z coordinate of the point.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Point3D.PointF">
            <summary>
            Y coordinate of the point.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.SerializationFormat">
            <summary>
            Format of the chart serializer
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.SerializationFormat.Xml">
            <summary>
            XML serializer format
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.SerializationFormat.Binary">
            <summary>
            Binary serializer format
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.SerializationContent">
            <summary>
            Chart serializable content definition flags
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.SerializationContent.Default">
            <summary>
            Default content
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.SerializationContent.Data">
            <summary>
            Serialize only series data
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.SerializationContent.Appearance">
            <summary>
            Serialize chart visual appearance
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartSerializer">
            <summary>
            Summary description for ChartSerializer.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartSerializer.#ctor">
            <summary>
            Public constructor is unavailable
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartSerializer.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Public constructor
            </summary>
            <param name="container">Service container reference.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartSerializer.GetService(System.Type)">
            <summary>
            Returns Chart Serializer service object
            </summary>
            <param name="serviceType">Requested service type.</param>
            <returns>Chart Serializer sevice object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartSerializer.Reset">
            <summary>
            Reset all properties of the chart to default values. By setting Content or 
            SerializableContent/NonSerializableContent properties specific set of 
            properties can be reset.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartSerializer.Save(System.String)">
            <summary>
            Saves all properties of the chart into the file. By setting Content or 
            SerializableContent/NonSerializableContent properties specific set of 
            properties can be saved.
            </summary>
            <param name="fileName">The file name used to write the data.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartSerializer.Save(System.IO.Stream)">
            <summary>
            Saves all properties of the chart into the stream. By setting Content or 
            SerializableContent/NonSerializableContent properties specific set of 
            properties can be saved.
            </summary>
            <param name="stream">The stream where to save the data.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartSerializer.Save(System.Xml.XmlWriter)">
            <summary>
            Saves all properties of the chart into the XML writer. By setting Content or 
            SerializableContent/NonSerializableContent properties specific set of 
            properties can be saved.
            </summary>
            <param name="writer">XML writer to save the data.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartSerializer.Save(System.IO.TextWriter)">
            <summary>
            Saves all properties of the chart into the text writer. By setting Content or 
            SerializableContent/NonSerializableContent properties specific set of 
            properties can be saved.
            </summary>
            <param name="writer">Text writer to save the data.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartSerializer.Load(System.String)">
            <summary>
            Loads all properties of the chart from the file. By setting Content or 
            SerializableContent/NonSerializableContent properties specific set of 
            properties can be loaded.
            </summary>
            <param name="fileName">The file name used to load the data from.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartSerializer.Load(System.IO.Stream)">
            <summary>
            Loads all properties of the chart from the stream. By setting Content or 
            SerializableContent/NonSerializableContent properties specific set of 
            properties can be loaded.
            </summary>
            <param name="stream">The stream where to load the data from.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartSerializer.Load(System.Xml.XmlReader)">
            <summary>
            Loads all properties of the chart from the XML reader. By setting Content or 
            SerializableContent/NonSerializableContent properties specific set of 
            properties can be loaded.
            </summary>
            <param name="reader">The XML reader to load the data from.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartSerializer.Load(System.IO.TextReader)">
            <summary>
            Loads all properties of the chart from the text reader. By setting Content or 
            SerializableContent/NonSerializableContent properties specific set of 
            properties can be loaded.
            </summary>
            <param name="reader">The text reader to load the data from.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartSerializer.SetSerializableConentFromFlags">
            <summary>
            Sets SerializableContent and NonSerializableContent properties
            depending on the flags in the Content property.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartSerializer.GetFlagContentString(Dundas.Charting.WinControl.SerializationContent,System.Boolean)">
            <summary>
            Return a serializable or non serializable class/properties names
            for the specific flag.
            </summary>
            <param name="flag">Serializable content flag.</param>
            <param name="serializable">True - get serializable string, False - non serializable.</param>
            <returns>Serializable or non serializable string with class/properties names.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ChartSerializer.GetChartObject">
            <summary>
            Returns chart object for serialization.
            </summary>
            <returns>Chart object.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartSerializer.Content">
            <summary>
            Serializable content.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartSerializer.Format">
            <summary>
            Format used to serialize the chart data.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartSerializer.ResetWhenLoading">
            <summary>
            Indicates that object properties are reset to default
            values before loading.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartSerializer.SerializableContent">
            <summary>
            Comma separated list of serializable (Save/Load/Reset) properties. 
            "ClassName.PropertyName,[ClassName.PropertyName]".
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ChartSerializer.NonSerializableContent">
            <summary>
            Comma separated list of NON serializable (Save/Load/Reset) properties. 
            "ClassName.PropertyName,[ClassName.PropertyName]".
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.CommonElements">
            <summary>
            This class contains reference to the Data Manager 
            and other common classes.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.CommonElements.chartAreaCollection">
            <summary>
            Chart area collection
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.CommonElements.container">
            <summary>
            Service Container
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.CommonElements.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.CommonElements.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Constructor
            </summary>
            <param name="container">Service container.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.CommonElements.TraceWrite(System.String,System.String)">
            <summary>
            Writes trace information to the trace log.
            </summary>
            <param name="category">The trace category that receives the message. </param>
            <param name="message">The trace message to write to the log. </param>
        </member>
        <member name="M:Dundas.Charting.WinControl.CommonElements.ParseDouble(System.String)">
            <summary>
            Converts string to double.
            </summary>
            <param name="stringToParse">String to convert.</param>
            <returns>Double result.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.CommonElements.ParseFloat(System.String)">
            <summary>
            Converts string to double.
            </summary>
            <param name="stringToParse">String to convert.</param>
            <returns>Double result.</returns>
        </member>
        <member name="P:Dundas.Charting.WinControl.CommonElements.DataManager">
            <summary>
            Reference to the Data Manager
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CommonElements.DataManipulator">
            <summary>
            Reference to the Data Manipulator
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CommonElements.ImageLoader">
            <summary>
            Reference to the ImageLoader
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CommonElements.Chart">
            <summary>
            Reference to the Chart
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CommonElements.ChartTypeRegistry">
            <summary>
            Reference to the ChartTypeRegistry
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CommonElements.BorderTypeRegistry">
            <summary>
            Reference to the BorderTypeRegistry
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CommonElements.ChartPicture">
            <summary>
            Reference to the ChartPicture
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CommonElements.Width">
            <summary>
            Width of the chart picture
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CommonElements.Height">
            <summary>
            Height of the chart picture
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.GroupingFunction">
            <summary>
            Grouping functions types
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GroupingFunction.None">
            <summary>
            Not defined
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GroupingFunction.Min">
            <summary>
            Minimum value of the group
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GroupingFunction.Max">
            <summary>
            Maximum value of the group
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GroupingFunction.Ave">
            <summary>
            Average value of the group
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GroupingFunction.Sum">
            <summary>
            Total of all values of the group
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GroupingFunction.First">
            <summary>
            Value of the first point in the group
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GroupingFunction.Last">
            <summary>
            Value of the last point in the group
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GroupingFunction.Center">
            <summary>
            Value of the center point in the group
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GroupingFunction.HiLoOpCl">
            <summary>
            High, Low, Open, Close values in the group
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GroupingFunction.HiLo">
            <summary>
            High, Low values in the group
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GroupingFunction.Count">
            <summary>
            Number of points in the group
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GroupingFunction.DistinctCount">
            <summary>
            Number of unique points in the group
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GroupingFunction.Variance">
            <summary>
            Variance of points in the group
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GroupingFunction.Deviation">
            <summary>
            Deviation of points in the group
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.IntervalType">
            <summary>
            Interval type enumeration
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.IntervalType.Number">
            <summary>
            Interval in numbers
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.IntervalType.Years">
            <summary>
            Interval in years
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.IntervalType.Months">
            <summary>
            Interval in months
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.IntervalType.Weeks">
            <summary>
            Interval in weeks
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.IntervalType.Days">
            <summary>
            Interval in days
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.IntervalType.Hours">
            <summary>
            Interval in hours
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.IntervalType.Minutes">
            <summary>
            Interval in minutes
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.IntervalType.Seconds">
            <summary>
            Interval in seconds
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.IntervalType.Milliseconds">
            <summary>
            Interval in milliseconds
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.DateRangeType">
            <summary>
            Date range type enumeration
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DateRangeType.Year">
            <summary>
            Range defined in years
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DateRangeType.Month">
            <summary>
            Range defined in months
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DateRangeType.DayOfWeek">
            <summary>
            Range defined in week days
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DateRangeType.DayOfMonth">
            <summary>
            Range defined in months day
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DateRangeType.Hour">
            <summary>
            Range defined in hours
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.DateRangeType.Minute">
            <summary>
            Range defined in minutes
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.CompareMethod">
            <summary>
            Compare method enumeration
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.CompareMethod.More">
            <summary>
            One value is more than another
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.CompareMethod.Less">
            <summary>
            One value is less than another
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.CompareMethod.Equal">
            <summary>
            One value is equal another
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.CompareMethod.MoreOrEqual">
            <summary>
            One value is more or equal to another
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.CompareMethod.LessOrEqual">
            <summary>
            One value is less or equal to another
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.CompareMethod.NotEqual">
            <summary>
            One value is not equal to another
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.IDataPointFilter">
            <summary>
            IDataPointFilter interface used for filtering series data points.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.IDataPointFilter.FilterDataPoint(Dundas.Charting.WinControl.DataPoint,Dundas.Charting.WinControl.Series,System.Int32)">
            <summary>
            Checks if specified data point must be filtered.
            </summary>
            <param name="point">Data point object.</param>
            <param name="series">Series of the point.</param>
            <param name="pointIndex">Index of the point in the series.</param>
            <returns>True if point must be removed</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.DataManipulator">
            <summary>
            DataManipulator class provide properties and methods 
            to manipulate series data. 
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.FormulaData">
            <summary>
            FormulaData class provides properties and methods, 
            which prepare series data for technical analyses 
            and time series and forecasting formulas and prepare 
            output data to be displayed as a chart.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.FormulaData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.FormulaData.CheckXValuesAlignment(Dundas.Charting.WinControl.Series[])">
            <summary>
            This method will check if X values from different series 
            are aligned.
            </summary>
            <param name="series">Array of series</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataManipulator.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataManipulator.ConvertToSeriesArray(System.Object,System.Boolean)">
            <summary>
            Helper function that converts one series or a comma separated
            list of series names into the Series array.
            </summary>
            <param name="obj">Series or string of series names.</param>
            <param name="createNew">If series with this name do not exist - create new.</param>
            <returns>Array of series.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataManipulator.Sort(Dundas.Charting.WinControl.PointsSortOrder,System.String,Dundas.Charting.WinControl.Series[])">
            <summary>
            Sort series data points in specified order.
            </summary>
            <param name="order">Sorting order.</param>
            <param name="sortBy">Value to sort by.</param>
            <param name="series">Series array to sort.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataManipulator.Sort(System.Collections.IComparer,Dundas.Charting.WinControl.Series[])">
            <summary>
            Sort series data points in specified order.
            </summary>
            <param name="comparer">Comparing interface.</param>
            <param name="series">Sereies array to sort.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataManipulator.Sort(Dundas.Charting.WinControl.PointsSortOrder,System.String,System.String)">
            <summary>
            Sort series data points in specified order.
            </summary>
            <param name="order">Sorting order.</param>
            <param name="sortBy">Value to sort by.</param>
            <param name="seriesName">Comma separated sereies names to sort.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataManipulator.Sort(Dundas.Charting.WinControl.PointsSortOrder,Dundas.Charting.WinControl.Series)">
            <summary>
            Sort series data points in specified order.
            </summary>
            <param name="order">Sorting order.</param>
            <param name="series">Series to sort.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataManipulator.Sort(Dundas.Charting.WinControl.PointsSortOrder,System.String)">
            <summary>
            Sort series data points in specified order.
            </summary>
            <param name="order">Sorting order.</param>
            <param name="seriesName">Comma separated series names to sort.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataManipulator.Sort(Dundas.Charting.WinControl.PointsSortOrder,System.String,Dundas.Charting.WinControl.Series)">
            <summary>
            Sort series data points in specified order.
            </summary>
            <param name="order">Sorting order.</param>
            <param name="sortBy">Value to sort by.</param>
            <param name="series">Sereies to sort.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataManipulator.Sort(System.Collections.IComparer,Dundas.Charting.WinControl.Series)">
            <summary>
            Sort series data points in specified order.
            </summary>
            <param name="comparer">Comparing interface.</param>
            <param name="series">Sereies to sort.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.DataManipulator.Sort(System.Collections.IComparer,System.String)">
            <summary>
            Sort series data points in specified order.
            </summary>
            <param name="comparer">Comparing interface.</param>
            <param name="seriesName">Comma separated series names to sort.</param>
        </member>
        <member name="T:Dundas.Charting.WinControl.FinancialFormula">
            <summary>
            Financial Formula Name enumeration
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.AccumulationDistribution">
            <summary>
            The accumulation distribution formula is an improved 
            On Balance Volume indicator.  This indicator uses 
            a relationship between volume and prices to estimate 
            the strength of price movements, and if volume is 
            increased there is a high probability that prices will go up. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.AverageTrueRange">
            <summary>
            The Average True Range is an indicator that measures commitment 
            and compares the range between the High, Low and Close prices.  
            This indicator was developed by J. Welles Wilder. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.BollingerBands">
            <summary>
            Bollinger Bands are indicators that are plotted at standard 
            deviation levels above and below a simple moving average.  
            Since standard deviation is a measure of volatility, a large 
            standard deviation indicates a volatile market, while a smaller 
            standard deviation indicates a calmer market. 
            Bollinger Bands are a good way to compare volatility and relative 
            price levels over a period of time.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.ChaikinOscillator">
            <summary>
            The Chaikin Oscillator indicator is the difference between a 3-day 
            exponential moving average and a 10-day exponential moving average 
            applied to the  Accumulation Distribution. Using the Chaikin Oscillator 
            it is possible to monitor volume flow for a market. The Chaikin 
            Oscillator should be used together with the price envelope. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.CommodityChannelIndex">
            <summary>
            The Commodity Channel Index compares prices with their moving averages.  
            If the Commodity channel index is high it means that a price is higher 
            than its moving average, which is an indicator that security is overbought.  
            If the Commodity channel index is low it means that a price is lower than 
            its moving average, which is an indicator that security is oversold. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.DetrendedPriceOscillator">
            <summary>
            The Detrended Price Oscillator attempts to remove trend from prices.  
            By comparing the closing price or any other price with it's moving 
            average, the Detrended Price Oscillator eliminates cycles that are 
            longer than the moving average. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.EaseOfMovement">
            <summary>
            Ease of Movement deals with the relationship between volume and price 
            change, and uses volume to indicate how strong a trend is for prices.  
            Ease of Movement was developed by Richard W Arms. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.Envelopes">
            <summary>
            Envelopes are plotted above and below a moving average using a specified 
            percentage as the shift.  The envelopes indicator is used to create signals 
            for buying and selling, and the percentage to be used for calculating 
            the envelopes is specified by the user. This percentage should depend on the 
            volatility of the market (the higher the market volatility, the higher the 
            percentage should be). 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.ExponentialMovingAverage">
            <summary>
            An Exponential Moving Average is an average of data calculated over a 
            period of time where the most recent days have more weight.  
            The exponential moving average can be used with any price: Hi, Low, Open and Close, 
            or it could be applied to other indicators.  An Exponential Moving 
            average smooths a data series, which is very important in a volatile market.  
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.Forecasting">
            <summary>
            The Time Series analysis has two main goals: Identifying the nature of a 
            sequence of observations and predicting future values using historical 
            observations (forecasting).  In time series analysis it is assumed that 
            the data consist of a systematic pattern and random noise which usually 
            makes the pattern difficult to identify. Most time series analysis 
            techniques uses filtering to remove noise. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.MACD">
            <summary>
            The MACD (Moving Average Convergence/Divergence) indicator compares two 
            moving averages of prices.  The MACD is used with a 9-day Exponential 
            Moving average as a signal, which indicates buying and selling moments.  
            This indicator was developed by Gerald Appel. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.MassIndex">
            <summary>
            The Mass Index is used to predict trend reversal by comparing the 
            difference and range between High and Low prices. If the Mass Index 
            increases the range between High and low increases. If the Mass Index 
            decreases the range between High and Low decreases. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.MedianPrice">
            <summary>
            Median prices are mid-point values of daily prices and can be used 
            as a filter for trend indicators. They are also used as a daily average 
            price which is very useful if we want a simpler "view" of prices. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.MoneyFlow">
            <summary>
            The money flow indicator compares upward changes and downward changes 
            of volume-weighted typical prices.  This indicator is similar to the 
            relative strength index, the difference being the volume-weighted 
            prices.  This indicator can be used to identify market tops and bottoms. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.NegativeVolumeIndex">
            <summary>
            The Negative Volume Index should be used together with the Positive 
            Volume index, and the  Negative Volume Index only changes if the 
            volume decreases from the previous day. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.OnBalanceVolume">
            <summary>
            The On Balance Volume is one of the first volume indicators that 
            measures positive and negative volume flow.  Volume is added if the 
            closing price increases and subtracted if the closing price decreases.  
            On Balance Volume wass developed by Joseph Granville. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.Performance">
            <summary>
            The Performance indicator compares a current Close (or any other price) 
            with the first Close value (from the first time period ). This indicator 
            shows the degree of a change in a price.  
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.PositiveVolumeIndex">
            <summary>
            The Positive Volume Index should be used together with the  Negative Volume 
            index. The Positive volume index only changes if the volume decreases from 
            the previous day. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.PriceVolumeTrend">
            <summary>
            The Price Volume Trend is a cumulative volume total that is calculated 
            using relative changes of the Close price, and should be used with 
            other indicators.   
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.RateOfChange">
            <summary>
            The Rate of Change indicator is very similar to the  Performance indicator, 
            where the Performance indicator compares the first price with current 
            price while the Rate of Change compares a specified Close price with 
            the current price. This formula is used for both prices and volume. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.RelativeStrengthIndex">
            <summary>
            The Relative Strength Index is a momentum oscillator that compares upward 
            movements of the Close price with downward movements, and results in values 
            that range from 0 to 100.  The Relative Strength index was developed by 
            J. Welles Wilder. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.MovingAverage">
            <summary>
            A Simple Moving Average is an average of data calculated over a period of 
            time. The moving average is the most popular price indicator used in 
            technical analyses, and can be used with any price (e.g.Hi, Low, 
            Open and Close) or it can be applied to other indicators. A moving average 
            smooths a data series, which is very important in a volatile market.  Also, 
            trends are easier to spot using a moving average. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.StandardDeviation">
            <summary>
            Standard deviation is used to indicate volatility, and measures the difference 
            between values (e.g. Closing Price) and their moving average. The larger the 
            difference the higher the standard deviation and volatility.  The smaller 
            the difference the lower the standard deviation and volatility.  
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.StochasticIndicator">
            <summary>
            When a trend is upward there is a tendency that the close price will be very 
            close to that day's high.  During a downward trending market there is 
            a tendency that the close price is closer to the low price. The Stochastic 
            Indicator helps to find trend reversal by searching for a period when: the 
            close prices are close to low prices in an upward trending market; or close 
            prices are close to high prices in a downward trending market. This formula 
            has two output values: %K - Simple Stochastic Indicator and %D - Smoothed 
            Stochastic Indicator (Moving Average of %K). 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.TriangularMovingAverage">
            <summary>
            A Triangular Moving Average is an average of data calculated over a period 
            of time where the middle portion of data has more weight. The Triangular 
            Moving Average can be used with any price (Hi, Low, Open, Close) or it can 
            be applied to other indicators.  The Triangular Moving Average smooths 
            a data series, which is very important in a volatile market.  
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.TRIX">
            <summary>
            The TRIX is based on a triple moving average of the Closing Price, and its 
            purpose is to eliminate short cycles.  This indicator keeps the Close price 
            in trends that are shorter than the specified period. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.TypicalPrice">
            <summary>
            Typical price is the average value of daily prices, and can be used as 
            a filter for trend indicators. It is also used as a daily average price 
            which is very useful if we want a simpler view of prices. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.VolatilityChaikins">
            <summary>
            The Volatility Chaikins indicator measures the difference between High 
            and Low prices, and is used to indicate tops or bottoms of the market. 
            This formula was developed by Marc Chaikin. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.VolumeOscillator">
            <summary>
            The Volume oscillator attempts to identify trends in volume by comparing 
            two moving averages; one with a short period and another with 
            a longer period. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.WeightedClose">
            <summary>
            The Weighted Close formula calculates the average value of daily prices.  
            The only difference between Typical Price and the Weighted Close is that 
            the closing price has extra weight, and is considered the most important 
            price. The Weighted Close can be used as a filter for trend indicators, 
            and can also be used as a daily average price (very useful if we want 
            a simpler view of prices). 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.WeightedMovingAverage">
            <summary>
            A Weighted Moving Average is an average of data calculated over a period 
            of time, where greater weight is attached to the most recent data. The 
            Weighted Moving Average can be used with any price (Hi, Low, Open, Close) 
            or it can be applied to other indicators. The Weighted Moving Average 
            smooths a data series, which is important in a volatile market. Weighting 
            is calculated from a sum of days. 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.FinancialFormula.WilliamsR">
            <summary>
            William's %R is a momentum indicator, and is used to measure overbought and 
            oversold levels. This indicator is very similar to the Stochastic %K indicator, 
            except that Williams %R is always a negative value between 0 and -100.  
            This indicator was developed by Larry Williams. 
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.TickMarkStyle">
            <summary>
            Tick Mark Style
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.TickMarkStyle.None">
            <summary>
            Tickmarks are disabled
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.TickMarkStyle.Outside">
            <summary>
            Tickmarks are located outside of the Chart area
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.TickMarkStyle.Inside">
            <summary>
            Tickmarks are located inside of the Chart area
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.TickMarkStyle.Cross">
            <summary>
            Tickmarks are set across the axis line
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.TickMark">
            <summary>
            Exposes tickmark and grid lines properties in the Axis object.
            Tick marks drawing function.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Grid">
            <summary>
            Exposes the grid lines properties in the Axis object.
            Grid lines drawing function.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Grid.#ctor">
            <summary>
            Public default constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Grid.#ctor(Dundas.Charting.WinControl.Axis,System.Boolean)">
            <summary>
            Public constructor.
            </summary>
            <param name="axis">Axis which owens teh grid.</param>
            <param name="major">Major axis element.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Grid.GetAxis">
            <summary>
            Gets axes to which this object attached to
            </summary>
            <returns>Axis object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Grid.Invalidate">
            <summary>
            Invalidate chart area the axis belong to.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Grid.Paint(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Draws grid lines.
            </summary>
            <param name="graph">Reference to the Chart Graphics object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Grid.Paint(Dundas.Charting.WinControl.ChartGraphics,System.Boolean,System.Int32,System.Int32,System.Object@)">
            <summary>
            Draws grid lines.
            </summary>
            <param name="graph">Reference to the Chart Graphics object.</param>
            <param name="selectionMode">Painting mode or selection mode flag.</param>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="obj">Selected object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Grid.PaintCustom(Dundas.Charting.WinControl.ChartGraphics,System.Boolean,System.Int32,System.Int32,System.Object@)">
            <summary>
            Draws custom grid lines from custom labels.
            </summary>
            <param name="graph">Reference to the Chart Graphics object.</param>
            <param name="selectionMode">Painting mode or selection mode flag.</param>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="obj">Selected object</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.Grid.IntervalOffset">
            <summary>
            Grid or mark interval offset.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Grid.IntervalOffsetType">
            <summary>
            Grid or mark offset type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Grid.Interval">
            <summary>
            Grid or mark interval size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Grid.IntervalType">
            <summary>
            Grid or mark interval type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Grid.LineColor">
            <summary>
            Grid or mark line color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Grid.LineStyle">
            <summary>
            Grid or mark line style
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Grid.LineWidth">
            <summary>
            Grid or mark line width
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Grid.Enabled">
            <summary>
            Grid or mark enabled flag
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.TickMark.#ctor">
            <summary>
            Public default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.TickMark.#ctor(Dundas.Charting.WinControl.Axis,System.Boolean)">
            <summary>
            Public constructor
            </summary>
            <param name="axis">Axis which owens the grid or tick mark.</param>
            <param name="major">Major axis element.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.TickMark.Paint(Dundas.Charting.WinControl.ChartGraphics,System.Boolean)">
            <summary>
            Draws TickMarks.
            </summary>
            <param name="graph">Reference to the Chart Graphics object.</param>
            <param name="backElements">Back elements of the axis should be drawn in 3D scene.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.TickMark.Paint(Dundas.Charting.WinControl.ChartGraphics,System.Boolean,System.Int32,System.Int32,System.Object@,System.Boolean)">
            <summary>
            Draws and hit test for TickMarks.
            </summary>
            <param name="graph">Reference to the Chart Graphics object.</param>
            <param name="selectionMode">Painting mode or selection mode flag.</param>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="obj">Selected object</param>
            <param name="backElements">Back elements of the axis should be drawn in 3D scene.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.TickMark.PaintCustom(Dundas.Charting.WinControl.ChartGraphics,System.Boolean,System.Int32,System.Int32,System.Object@,System.Boolean)">
            <summary>
            Draws and hit test for custom TickMarks from the custom labels collection.
            </summary>
            <param name="graph">Reference to the Chart Graphics object.</param>
            <param name="selectionMode">Painting mode or selection mode flag.</param>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="obj">Selected object</param>
            <param name="backElements">Back elements of the axis should be drawn in 3D scene.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.TickMark.Draw3DTickLine(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.PointF,System.Drawing.PointF,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Draws tick mark line in 3D space.
            </summary>
            <param name="graph">Reference to the Chart Graphics object.</param>
            <param name="point1">First line point.</param>
            <param name="point2">Second line point.</param>
            <param name="horizontal">Indicates that tick mark line is horisontal.</param>
            <param name="scrollBarSize">Scroll bar size.</param>
            <param name="backElements">Back elements of the axis should be drawn in 3D scene.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.TickMark.Draw3DTickLine(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.PointF,System.Drawing.PointF,System.Boolean,System.Single,System.Boolean,System.Boolean,System.Drawing.PointF,System.Boolean@)">
            <summary>
            Draws tick mark line in 3D space.
            </summary>
            <param name="graph">Reference to the Chart Graphics object.</param>
            <param name="point1">First line point.</param>
            <param name="point2">Second line point.</param>
            <param name="horizontal">Indicates that tick mark line is horisontal.</param>
            <param name="scrollBarSize">Scroll bar size.</param>
            <param name="backElements">Back elements of the axis should be drawn in 3D scene.</param>
            <param name="selectionMode">The selectiom mode is active.</param>
            <param name="hitPoint">PointF which keep position of the mouse</param>
            <param name="selected">True if tickmarks are selected</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.TickMark.Style">
            <summary>
            Tick mark style.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.TickMark.Size">
            <summary>
            Tick mark size.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.LabelRow">
            <summary>
            Custom label row number.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LabelRow.First">
            <summary>
            First row of labels.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LabelRow.Second">
            <summary>
            Second row of labels.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.LabelMark">
            <summary>
            Custom label marking type
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LabelMark.None">
            <summary>
            Not set.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LabelMark.SideMark">
            <summary>
            Mark labels using side marks.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LabelMark.LineSideMark">
            <summary>
            Mark labels using line and side marks.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.GridTick">
            <summary>
            Custom grid lines and tick marks flags used in the custom labels.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GridTick.None">
            <summary>
            No tick mark or grid line are shown.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GridTick.TickMark">
            <summary>
            Tick mark is shown.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GridTick.GridLine">
            <summary>
            Grid line is shown.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.GridTick.All">
            <summary>
            Tick mark and grid line are shown.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.CustomLabelsCollection">
            <summary>
            Custom labels collection.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.#ctor">
            <summary>
            Custom labels collection object constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.#ctor(Dundas.Charting.WinControl.Axis)">
            <summary>
            Custom labels collection object constructor
            </summary>
            <param name="axis">Reference to the axis object.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.Add(System.Double,System.Double,System.String)">
            <summary>
            Adds one custom label into the collection.
            </summary>
            <param name="fromPosition">Label left position.</param>
            <param name="toPosition">Label right position.</param>
            <param name="text">Label text.</param>
            <returns>Index of newly added item.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.Add(System.Double,System.Double,System.String,System.Boolean)">
            <summary>
            Adds one custom label into the collection. Custom label flag may be specified.
            </summary>
            <param name="fromPosition">Label left position.</param>
            <param name="toPosition">Label right position.</param>
            <param name="text">Label text.</param>
            <param name="customLabel">Indicates if label is custom (created by user).</param>
            <returns>Index of newly added item.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.Add(System.Double,System.Double,System.String,Dundas.Charting.WinControl.LabelRow,Dundas.Charting.WinControl.LabelMark)">
            <summary>
            Adds one custom label into the collection.
            </summary>
            <param name="fromPosition">Label left position.</param>
            <param name="toPosition">Label right position.</param>
            <param name="text">Label text.</param>
            <param name="row">Label row.</param>
            <param name="mark">Label marking type.</param>
            <returns>Index of newly added item.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.Add(System.Double,System.Double,System.String,Dundas.Charting.WinControl.LabelRow,Dundas.Charting.WinControl.LabelMark,Dundas.Charting.WinControl.GridTick)">
            <summary>
            Adds one custom label into the collection.
            </summary>
            <param name="fromPosition">Label left position.</param>
            <param name="toPosition">Label right position.</param>
            <param name="text">Label text.</param>
            <param name="row">Label row.</param>
            <param name="mark">Label marking type.</param>
            <returns>Index of newly added item.</returns>
            <param name="gridTick">Custom grid line or/and tick marks flag.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.Add(System.Double,Dundas.Charting.WinControl.DateTimeIntervalType,System.Double,System.Double,System.String,Dundas.Charting.WinControl.LabelRow,Dundas.Charting.WinControl.LabelMark)">
            <summary>
            Adds custom labels into the collection using min and max values and step
            </summary>
            <param name="labelsStep">Label step size.</param>
            <param name="intervalType">Label step type.</param>
            <param name="min">Min position.</param>
            <param name="max">Max position.</param>
            <param name="format">Label text format.</param>
            <param name="row">Label row.</param>
            <param name="mark">Label marking type.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.Add(System.Double,Dundas.Charting.WinControl.DateTimeIntervalType)">
            <summary>
            Adds custom labels into the collection using min and max values and step.
            </summary>
            <param name="labelsStep">Label step size.</param>
            <param name="intervalType">Label step type.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.Add(System.Double,Dundas.Charting.WinControl.DateTimeIntervalType,System.String)">
            <summary>
            Adds custom labels into the collection using min and max values and step.
            </summary>
            <param name="labelsStep">Label step size.</param>
            <param name="intervalType">Label step type.</param>
            <param name="format">Label text format.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.Add(System.Double,Dundas.Charting.WinControl.DateTimeIntervalType,System.String,Dundas.Charting.WinControl.LabelRow,Dundas.Charting.WinControl.LabelMark)">
            <summary>
            Adds custom labels into the collection using min and max values and step.
            </summary>
            <param name="labelsStep">Label step size.</param>
            <param name="intervalType">Label step type.</param>
            <param name="format">Label text format.</param>
            <param name="row">Label row.</param>
            <param name="mark">Label marking type.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.Contains(System.Object)">
            <summary>
            Check if specified object exsists in the collection.
            </summary>
            <param name="value">Object to check.</param>
            <returns>True if object exsist.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.IndexOf(System.Object)">
            <summary>
            Gets first index of the collection item equal to the object provided.
            </summary>
            <param name="value">Object to look for.</param>
            <returns>Index of found object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.Remove(System.Object)">
            <summary>
            Remove object from the collection
            </summary>
            <param name="value">Value to be removed.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.RemoveAt(System.Int32)">
            <summary>
            Remove item from the collection by index.
            </summary>
            <param name="index">Zero based index.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.Add(System.Object)">
            <summary>
            Add custom label object into the collection.
            </summary>
            <param name="value">Custom label to add.</param>
            <returns>Index of the newly added object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.Insert(System.Int32,Dundas.Charting.WinControl.CustomLabel)">
            <summary>
            Insert custom label object into the collection.
            </summary>
            <param name="index">Zero based index.</param>
            <param name="value">Custom label to add.</param>
            <returns>Index of the newly added object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.Insert(System.Int32,System.Object)">
            <summary>
            Insert custom label object into the collection.
            </summary>
            <param name="index">Zero based index.</param>
            <param name="value">Custom label to add.</param>
            <returns>Index of the newly added object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the current collection to the specified one-dimensional 
            collection starting at the specified destination index.
            </summary>
            <param name="array">Destination collection.</param>
            <param name="index">The index in collection at which copying begins.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.GetEnumerator">
            <summary>
            Get collection enumerator.
            </summary>
            <returns>Collection enumerator.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabelsCollection.Invalidate">
            <summary>
            Invalidate chart (or just chart area ) when collection is changed
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CustomLabelsCollection.Item(System.Int32)">
            <summary>
            Indexer of the class. Returns the CustomLabel object
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CustomLabelsCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CustomLabelsCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CustomLabelsCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CustomLabelsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CustomLabelsCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.CustomLabel">
            <summary>
            Custom label properties. This class stores an item of the CustomLabelsCollection.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabel.#ctor">
            <summary>
            Custom label constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabel.#ctor(System.Double,System.Double,System.String,Dundas.Charting.WinControl.LabelRow,Dundas.Charting.WinControl.LabelMark)">
            <summary>
            Custom label constructor
            </summary>
            <param name="fromPosition">From position.</param>
            <param name="toPosition">To position.</param>
            <param name="text">Label text.</param>
            <param name="row">Label row.</param>
            <param name="mark">Label mark.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabel.#ctor(System.Double,System.Double,System.String,Dundas.Charting.WinControl.LabelRow,Dundas.Charting.WinControl.LabelMark,Dundas.Charting.WinControl.GridTick)">
            <summary>
            Custom label constructor
            </summary>
            <param name="fromPosition">From position.</param>
            <param name="toPosition">To position.</param>
            <param name="text">Label text.</param>
            <param name="row">Label row.</param>
            <param name="mark">Label mark.</param>
            <param name="gridTick">Custom grid line or/and tick marks flag.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabel.GetAxis">
            <summary>
            Gets axes to which this object attached to.
            </summary>
            <returns>Axis.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabel.Invalidate">
            <summary>
            Invalidate chart (or just chart area ) when collection is changed.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CustomLabel.Name">
            <summary>
            Custom label item name. For internal use only!
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CustomLabel.GridTick">
            <summary>
            Defines custom tick marks and/or grid lines to be drawn in the center of the label.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CustomLabel.From">
            <summary>
            Custom label left position.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CustomLabel.To">
            <summary>
            Custom label right position.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CustomLabel.Text">
            <summary>
            Custom label text.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CustomLabel.Row">
            <summary>
            Custom label row.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.CustomLabel.LabelMark">
            <summary>
            Defines marks for the labels in the second row. Major tick mark line style is used for drawing.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.CustomLabel.CustomLabelConverter">
            <summary>
            Label object type converter
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabel.CustomLabelConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            This method overrides CanConvertTo from TypeConverter. This is called when someone
            wants to convert an instance of object to another type.  Here,
            only conversion to an InstanceDescriptor is supported.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="destinationType">Destination type.</param>
            <returns>True if object can be converted.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.CustomLabel.CustomLabelConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            This code performs the actual conversion from an object to an InstanceDescriptor.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Object value.</param>
            <param name="destinationType">Destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Label">
            <summary>
            Axis labels settings.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Label.#ctor">
            <summary>
            Public default constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Label.#ctor(Dundas.Charting.WinControl.Axis)">
            <summary>
            Public constructor.
            </summary>
            <param name="axis">Axis which owens teh grid.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Label.Paint(Dundas.Charting.WinControl.ChartGraphics,System.Boolean)">
            <summary>
            Draws axis labels.
            </summary>
            <param name="graph">Reference to the Chart Graphics object.</param>
            <param name="backElements">Back elements of the axis should be drawn in 3D scene.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Label.GetAllLabelsRect(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.AxisPosition,System.Drawing.StringFormat@)">
            <summary>
            Get a rectangle between chart area position and plotting area on specified side.
            Also sets axis labels string formatting for the specified labels position.
            </summary>
            <param name="area">Chart area object.</param>
            <param name="position">Position in chart area.</param>
            <param name="stringFormat">Axis labels string format.</param>
            <returns>Axis labels rectangle.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Label.GetLabelsPosition(Dundas.Charting.WinControl.ChartArea,Dundas.Charting.WinControl.Axis)">
            <summary>
            Gets position of axis labels.
            Top and Bottom axis labels can be drawn on the sides (left or rigth)
            of the plotting area. If angle between axis and it's projection is
            between -25 and 25 degrees the axis are drawn at the bottom/top, 
            otherwise labels are moved on the left or right side.
            </summary>
            <param name="area">Chart area object.</param>
            <param name="axis">Axis object.</param>
            <returns>Position where axis labels should be drawn.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Label.Paint3D(Dundas.Charting.WinControl.ChartGraphics,System.Boolean)">
            <summary>
            Draws axis labels in 3D space.
            </summary>
            <param name="graph">Reference to the Chart Graphics object.</param>
            <param name="backElements">Back elements of the axis should be drawn in 3D scene.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Label.GetAxis">
            <summary>
            Gets axes to which this object attached to.
            </summary>
            <returns>Axis object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Label.Invalidate">
            <summary>
            Invalidate chart picture
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Label.IntervalOffset">
            <summary>
            Labels interval offset.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Label.IntervalOffsetType">
            <summary>
            Labels offset type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Label.Interval">
            <summary>
            Label interval size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Label.IntervalType">
            <summary>
            Label interval type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Label.Font">
            <summary>
            Label font
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Label.FontColor">
            <summary>
            Label font color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Label.FontAngle">
            <summary>
            Label font angle
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Label.OffsetLabels">
            <summary>
            True if labels are shown with offset
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Label.ShowEndLabels">
            <summary>
            True if labels are shown at axis ends
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Label.TruncatedLabels">
            <summary>
            True if label can be truncated
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Label.Format">
            <summary>
            Label text format
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Label.Enabled">
            <summary>
            Indicates that labels are enabled.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.LegendImageStyle">
            <summary>
            Type of the series or data point representation in legend
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LegendImageStyle.Rectangle">
            <summary>
            Rectangle filled with color.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LegendImageStyle.Line">
            <summary>
            Line.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LegendImageStyle.Marker">
            <summary>
            Marker
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.LegendStyle">
            <summary>
            Legend style.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LegendStyle.Column">
            <summary>
            One column, many rows.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LegendStyle.Row">
            <summary>
            One row, many columns.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LegendStyle.Table">
            <summary>
            Many column, many rows.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.LegendDocking">
            <summary>
            Legend docking.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LegendDocking.Top">
            <summary>
            Legend docked to the top.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LegendDocking.Right">
            <summary>
            Legend docked to the right.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LegendDocking.Bottom">
            <summary>
            Legend docked to the botom.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.LegendDocking.Left">
            <summary>
            Legend docked to the left.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Legend">
            <summary>
            Chart legend.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Legend.#ctor">
            <summary>
            Legend object constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Legend.#ctor(Dundas.Charting.WinControl.CommonElements)">
            <summary>
            Legend object constructor
            </summary>
            <param name="common">Reference to common elements.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Legend.CalcLegendPosition(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.RectangleF@,System.Single,System.Single)">
            <summary>
            Recalculates legend position.
            </summary>
            <param name="chartGraph">Chart graphics used.</param>
            <param name="chartAreasRectangle">Area where the legend should be positioned.</param>
            <param name="maxLegendSize">Maximum legend size in percentage of the area.</param>
            <param name="elementSpacing">Spacing size in percentage of the area.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Legend.RecalcLegendInfo(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Recalculates legend information:
              - legend items collection
              - maximum text rectangle
            </summary>
            <param name="chartGraph">Reference to the chart graphics.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Legend.GetOptimalSize(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.SizeF)">
            <summary>
            Calculates the optimal size of the legend.
            </summary>
            <param name="chartGraph">Chart graphics object.</param>
            <param name="maxSize">Max size for the legend.</param>
            <returns>Legend optimal size.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Legend.FillLegendItemsCollection">
            <summary>
            Add all series legend into items collection and then
            add custom legend items.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Legend.SelectLegendBackground(Dundas.Charting.WinControl.ChartGraphics,System.Int32,System.Int32,System.Object@)">
            <summary>
            Checks if legend background is selected.
            </summary>
            <param name="chartGraph">Chart Graphics object</param>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="obj">Selected object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Legend.Paint(Dundas.Charting.WinControl.ChartGraphics)">
            <summary>
            Paints legend using chart graphics object.
            </summary>
            <param name="chartGraph">The graph provides drawing object to the display device. A Graphics object is associated with a specific device context.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Legend.Paint(Dundas.Charting.WinControl.ChartGraphics,System.Boolean,System.Int32,System.Int32,System.Object@)">
            <summary>
            Paints legend using chart graphics object.
            </summary>
            <param name="chartGraph">The graph provides drawing object to the display device. A Graphics object is associated with a specific device context.</param>
            <param name="selectionMode">Selection mode</param>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="obj">Selected object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Legend.Invalidate(System.Boolean)">
            <summary>
            Invalidate chart legend when one of the attributes is changed
            </summary>
            <param name="invalidateLegendOnly">Indicates that only legend area should be invalidated.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.Position">
            <summary>
            Legend rectangle position
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.EquallySpacedItems">
            <summary>
            Indicates that all legend items are equally spaced.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.Enabled">
            <summary>
            Legend enabled flag
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.AutoFitText">
            <summary>
            Legend text automatic fitting flag
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.LegendStyle">
            <summary>
            Legend style
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.BackColor">
            <summary>
            Legend background color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.BorderColor">
            <summary>
            Legend border color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.BorderStyle">
            <summary>
            Legend border style
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.BorderWidth">
            <summary>
            Legend border width
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.BackImage">
            <summary>
            Legend background image
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.BackImageMode">
            <summary>
            Legend background image drawing mode.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.BackImageTranspColor">
            <summary>
            Background image transparent color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.BackImageAlign">
            <summary>
            Background image alignment used by ClampUnscale drawing mode.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.BackGradientType">
            <summary>
            Legend background gradient type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.BackGradientEndColor">
            <summary>
            Legend background gradient end color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.BackHatchStyle">
            <summary>
            Legend hatch style
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.Font">
            <summary>
            Legend font
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.FontColor">
            <summary>
            Legend font color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.Alignment">
            <summary>
            Legend alignment
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.Docking">
            <summary>
            Legend docking
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.ShadowOffset">
            <summary>
            Legend shadow offset
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.ShadowColor">
            <summary>
            Legend shadow color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.InsideChartArea">
            <summary>
            Specify chart area name inside which the legend is drawn
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Legend.CustomItems">
            <summary>
            Legend custom items collection
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.LegendItemsCollection">
            <summary>
            Chart legend items collection.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItemsCollection.#ctor">
            <summary>
            Legend item collection object constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItemsCollection.Add(System.Drawing.Color,System.String)">
            <summary>
            Adds one legend item into the collection.
            </summary>
            <param name="color">Legend item color.</param>
            <param name="text">Legend item text.</param>
            <returns>Index of newly added item.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItemsCollection.Insert(System.Int32,System.Drawing.Color,System.String)">
            <summary>
            Insert one legend item into the collection.
            </summary>
            <param name="index">Legend item index to insert at.</param>
            <param name="color">Legend item color.</param>
            <param name="text">Legend item text.</param>
            <returns>Index of newly added item.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItemsCollection.Add(System.String,System.String)">
            <summary>
            Adds one legend item into the collection.
            </summary>
            <param name="image">Legend item image.</param>
            <param name="text">Legend item text.</param>
            <returns>Index of newly added item.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItemsCollection.Insert(System.Int32,System.String,System.String)">
            <summary>
            Insert one legend item into the collection.
            </summary>
            <param name="index">Legend item index to insert at.</param>
            <param name="image">Legend item image.</param>
            <param name="text">Legend item text.</param>
            <returns>Index of newly added item.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItemsCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItemsCollection.Contains(System.Object)">
            <summary>
            Check if specified object exsists in the collection.
            </summary>
            <param name="value">Object to check.</param>
            <returns>True if object exsist.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItemsCollection.IndexOf(System.Object)">
            <summary>
            Gets first index of the collection item equal to the object provided.
            </summary>
            <param name="value">Object to look for.</param>
            <returns>Index of found object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItemsCollection.Remove(System.Object)">
            <summary>
            Remove object from the collection
            </summary>
            <param name="value">Value to be removed.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItemsCollection.RemoveAt(System.Int32)">
            <summary>
            Remove item from the collection by index.
            </summary>
            <param name="index">Zero based index.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItemsCollection.Add(System.Object)">
            <summary>
            Add legend item object into the collection.
            </summary>
            <param name="value">Legend item to add.</param>
            <returns>Index of the newly added object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItemsCollection.Insert(System.Int32,Dundas.Charting.WinControl.LegendItem)">
            <summary>
            Insert legend item object into the collection.
            </summary>
            <param name="index">Zero based index.</param>
            <param name="value">Legend item to insert.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItemsCollection.Insert(System.Int32,System.Object)">
            <summary>
            Insert legend item object into the collection.
            </summary>
            <param name="index">Zero based index.</param>
            <param name="value">Legend item to insert.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItemsCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the current collection to the specified one-dimensional 
            collection starting at the specified destination index.
            </summary>
            <param name="array">Destination collection.</param>
            <param name="index">The index in collection at which copying begins.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItemsCollection.GetEnumerator">
            <summary>
            Get collection enumerator.
            </summary>
            <returns>Collection enumerator.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItemsCollection.Invalidate(System.Boolean)">
            <summary>
            Invalidate chart (or just legend )when collection is changed
            </summary>
            <param name="invalidateLegendOnly">Indicates that only legend area should be invalidated.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItemsCollection.Item(System.Int32)">
            <summary>
            Indexer of the class. Returns the LegendItem object
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItemsCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItemsCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItemsCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItemsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItemsCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.LegendItem">
            <summary>
            Chart legend item.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItem.#ctor">
            <summary>
            Default legend item constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItem.#ctor(System.String,System.Drawing.Color,System.String)">
            <summary>
            Legend item constructor
            </summary>
            <param name="name">Item name.</param>
            <param name="color">Item color.</param>
            <param name="image">Item image.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItem.ReplaceKeywords(System.String)">
            <summary>
            Replaces predefined keyword inside the string with their values.
            </summary>
            <param name="strOriginal">Original string with keywords.</param>
            <returns>Modified string.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItem.SetAttributes(Dundas.Charting.WinControl.CommonElements,Dundas.Charting.WinControl.Series)">
            <summary>
            Sets legend item attributes from the series
            </summary>
            <param name="series">Series object.</param>
            <param name="common">Common elements object.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItem.SetAttributes(Dundas.Charting.WinControl.DataPointAttributes)">
            <summary>
            Sets legend item attributes from the DataPointAttributes object.
            </summary>
            <param name="attrib">DataPointAttributes object.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItem.Invalidate(System.Boolean)">
            <summary>
            Invalidate chart (or just legend )when collection is changed
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.Name">
            <summary>
            Legend item text.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.Color">
            <summary>
            Legend item color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.Image">
            <summary>
            Legend item image.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.Style">
            <summary>
            Legend item picture style.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.BorderColor">
            <summary>
            Border color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.BackHatchStyle">
            <summary>
            Back hatch style
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.BackImageTranspColor">
            <summary>
            Background image transparent color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.BackGradientType">
            <summary>
            A type for the background gradient
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.BackGradientEndColor">
            <summary>
            The second color which is used for a gradient
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.BorderWidth">
            <summary>
            Line width
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.BorderStyle">
            <summary>
            Line style
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.ShadowOffset">
            <summary>
            Legend item shadow offset.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.ShadowColor">
            <summary>
            Legend item shadow color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.MarkerStyle">
            <summary>
            Legend item marker style
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.MarkerSize">
            <summary>
            Legend item marker size
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.MarkerImage">
            <summary>
            Legend item marker image
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.MarkerImageTranspColor">
            <summary>
            Legend item marker image transparent color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.MarkerColor">
            <summary>
            Legend item marker color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.MarkerBorderColor">
            <summary>
            Legend item marker border color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.SeriesName">
            <summary>
            Legend item series name.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.SeriesPointIndex">
            <summary>
            Legend item series data point index.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.LegendItem.ToolTip">
            <summary>
            Tooltip of the area.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItem.LegendItemConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            This method overrides CanConvertTo from TypeConverter. This is called when someone
            wants to convert an instance of object to another type.  Here,
            only conversion to an InstanceDescriptor is supported.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="destinationType">Destination type.</param>
            <returns>True if object can be converted.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.LegendItem.LegendItemConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            This code performs the actual conversion from an object to an InstanceDescriptor.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Object value.</param>
            <param name="destinationType">Destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Matrix3D">
            <summary>
            This class is responsible for all 3D coordinates transformations: Translation, 
            Rotation, Scale, Perspective and RightAngle Projection. Translation 
            and rotation are stored in composite matrix (mainMatrix), and scaling, 
            projection and non-composite translation are stored in private fields. 
            Matrix is initialized with Chart Area 3D cube, which is invisible boundary 
            cube of 3D Chart area. The matrix has to be initialized every time 
            when angles, position or perspective parameters are changed. Method 
            TransformPoints will apply 3D Transformation on points using 
            Initialization values: Main matrix and other initialization values.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.mainMatrix">
            <summary>
            Composite matrix.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.translateX">
            <summary>
            Default translation for chart area cube ( without composition ).
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.translateY">
            <summary>
            Default translation for chart area cube ( without composition ).
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.translateZ">
            <summary>
            Default translation for chart area cube ( without composition ).
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.scale">
            <summary>
            The value, which is used to rescale chart area.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.shiftX">
            <summary>
            The value used for Isometric Shift.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.shiftY">
            <summary>
            The value used for Isometric Shift.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.perspective">
            <summary>
            Perspective value.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.rightAngleAxis">
            <summary>
            Isometric projection.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.perspectiveFactor">
            <summary>
            The value, which is used for perspective.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.perspectiveZ">
            <summary>
            The value, which is used to set projection plane.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.angleX">
            <summary>
            X Angle.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.angleY">
            <summary>
            Y Angle.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.lightVectors">
            <summary>
            Private fields used for lighting
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.lightStyle">
            <summary>
            Light Style
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.#ctor">
            <summary>
            Constructor for Matrix 3D
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.Initialize(System.Drawing.RectangleF,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initialize Matrix 3D. This method calculates how much a chart area 
            cube has to be resized to fit Inner Plotting Area rectangle. Order 
            of operation is following: Translation for X and Y axes, Rotation 
            by X-axis, Rotation by Y-axis and same scaling for all axes. All 
            other elements, which belongs to this chart area cube (Data points, 
            grid lines etc.) has to follow same order. Translation and rotation 
            form composite matrix mainMatrix. Scale has to be allied separately.
            </summary>
            <param name="innerPlotRectangle">Inner Plotting Area position. Chart area cube has to be inside this rectangle</param>
            <param name="depth">Depth of chart area cube</param>
            <param name="angleX">Angle of rotation by X axis.</param>
            <param name="angleY">Angle of rotation by Y axis.</param>
            <param name="perspective">Perspective in percentages</param>
            <param name="rightAngleAxis">Right angle flag.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.TransformPoints(Dundas.Charting.WinControl.Point3D[])">
            <summary>
            Apply transformations on array od 3D Points. Order of operation is 
            following: Translation ( Set coordinate system for 0:100 to -50:50 
            Center of rotation is always 0), Composite Translation for X and Y 
            axes ( Moving center of rotation ), Rotation by X-axis, Rotation 
            by Y-axis, perspective and same scaling for all axes.
            </summary>
            <param name="points">3D Points array.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.GetScale">
            <summary>
            This Method returns scale factor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.TransformPoints(Dundas.Charting.WinControl.Point3D[],System.Boolean)">
            <summary>
            Apply transformations on array od 3D Points. Order of operation is 
            following: Translation ( Set coordinate system for 0:100 to -50:50 
            Center of rotation is always 0), Composite Translation for X and Y 
            axes ( Moving center of rotation ), Rotation by X-axis, Rotation 
            by Y-axis, perspective and same scaling for all axes.
            </summary>
            <param name="points">3D Points array.</param>
            <param name="withPerspective">Applay Perspective</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.RightAngleShift(Dundas.Charting.WinControl.Point3D[])">
            <summary>
            This method adjusts a position of 3D Chart Area cube. This 
            method will translate chart for better use of the inner 
            plotting area. Center of rotation is shifted for 
            right Angle projection.
            </summary>
            <param name="points">3D Points array.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.RightAngleProjection(Dundas.Charting.WinControl.Point3D[])">
            <summary>
            Method used to calculate right Angle projection.
            </summary>
            <param name="points">3D points array.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.Perspective(Dundas.Charting.WinControl.Point3D[])">
            <summary>
            Method is used for Planar Geometric projection. 
            </summary>
            <param name="points">3D Points array.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.Scale(Dundas.Charting.WinControl.Point3D[])">
            <summary>
            Scales data points. Scaling has to be performed SEPARATELY from 
            composite matrix. If scale is used with composite matrix after 
            rotation, scaling will deform object.
            </summary>
            <param name="points">3D Points array.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.Translate(System.Single,System.Single,System.Single)">
            <summary>
            Prepend to this Matrix object a translation. This method is used 
            only if CENTER OF ROTATION HAS TO BE MOVED.
            </summary>
            <param name="dx">Translate in x axis direction.</param>
            <param name="dy">Translate in y axis direction.</param>
            <param name="dz">Translate in z axis direction.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.Reset">
            <summary>
            This method initialize and set default values for mainMatrix ( there is no rotation and translation )
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.Multiply(System.Single[][],System.Drawing.Drawing2D.MatrixOrder,System.Boolean)">
            <summary>
            Multiplies this Matrix object by the matrix specified in the 
            matrix parameter, and in the order specified in the order parameter.
            </summary>
            <param name="mulMatrix">The Matrix object by which this Matrix object is to be multiplied.</param>
            <param name="order">The MatrixOrder enumeration that represents the order of the multiplication. If the specified order is MatrixOrder.Prepend, this Matrix object is multiplied by the specified matrix in a prepended order. If the specified order is MatrixOrder.Append, this Matrix object is multiplied by the specified matrix in an appended order.</param>
            <param name="setMainMatrix">Set main matrix to be result of multiplication</param>
            <returns>Matrix multiplication result.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.MultiplyVector(System.Single[],System.Single[]@)">
            <summary>
            Multiplies this Matrix object by the Vector specified in the 
            vector parameter.
            </summary>
            <param name="mulVector">The vector object by which this Matrix object is to be multiplied.</param>
            <param name="resultVector">Vector which is result of matrix and vector multiplication.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.Rotate(System.Double,Dundas.Charting.WinControl.Matrix3D.RotationAxis)">
            <summary>
            Prepend to this Matrix object a clockwise rotation, around the axis and by the specified angle.
            </summary>
            <param name="angle">Angle to rotate</param>
            <param name="axis">Axis used for rotation</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.GetValues(Dundas.Charting.WinControl.Point3D[])">
            <summary>
            Returns transformed x and y values from x, y and z values 
            and composed main matrix values (All rotations, 
            translations and scaling).
            </summary>
            <param name="points">Array of 3D points.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.Set3DBarPoints(System.Single,System.Single,System.Single)">
            <summary>
            Set points for 3D Bar which represents 3D Chart Area.
            </summary>
            <param name="dx">Width of the bar 3D.</param>
            <param name="dy">Height of the bar 3D.</param>
            <param name="dz">Depth of the bar 3D.</param>
            <returns>Collection of Points 3D.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.InitLight(Dundas.Charting.WinControl.LightStyle)">
            <summary>
            Initial Lighting. Use matrix transformation only once 
            for Normal vectors.
            </summary>
            <param name="lightStyle">Light Style</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.GetLight(System.Drawing.Color,System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Return intensity of light for 3D Cube. There are tree types of lights: None, 
            Simplistic and Realistic. None Style have same light intensity on 
            all polygons. Normal vector doesn’t have influence on this type 
            of lighting. Simplistic style have light source, which is 
            rotated together with scene. Realistic lighting have fixed light 
            source and intensity of light is change when scene is rotated.
            </summary>
            <param name="surfaceColor">Color used for polygons without lighting</param>
            <param name="front">Color corrected with intensity of light for Front side of the 3D Rectangle</param>
            <param name="back">Color corrected with intensity of light for Back side of the 3D Rectangle</param>
            <param name="left">Color corrected with intensity of light for Left side of the 3D Rectangle</param>
            <param name="right">Color corrected with intensity of light for Right side of the 3D Rectangle</param>
            <param name="top">Color corrected with intensity of light for Top side of the 3D Rectangle</param>
            <param name="bottom">Color corrected with intensity of light for Bottom side of the 3D Rectangle</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.GetPolygonLight(Dundas.Charting.WinControl.Point3D[],System.Drawing.Color,System.Boolean,System.Single,Dundas.Charting.WinControl.SurfaceName,System.Boolean)">
            <summary>
            Return intensity of light for Polygons. There are tree types of lights: None, 
            Simplistic and Realistic. None Style have same light intensity on 
            all polygons. Normal vector doesn’t have influence on this type 
            of lighting. Simplistic style have light source, which is 
            rotated together with scene. Realistic lighting have fixed light 
            source and intensity of light is change when scene is rotated.
            </summary>
            <param name="points">Points of the polygon</param>
            <param name="surfaceColor">Color used for polygons without lighting</param>
            <param name="visiblePolygon">This flag gets information if  polygon is visible or not.</param>
            <param name="yAngle">Y angle ( from -90 to 90 ) Should be used width switchSeriesOrder to get from -180 to 180</param>
            <param name="surfaceName">Used for lighting of front - back and left - right sides</param>
            <param name="switchSeriesOrder">Used to calculate real y angle</param>
            <returns>Color corrected with intensity of light</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.GetBrightGradientColor(System.Drawing.Color,System.Double)">
            <summary>
            This method creates gradien color with brightnes.
            </summary>
            <param name="beginColor">Start color for gradient.</param>
            <param name="position">Position used between Start and end color.</param>
            <returns>Calculated Gradient color from gradient position</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Matrix3D.GetAngle(Dundas.Charting.WinControl.Point3D,Dundas.Charting.WinControl.Point3D)">
            <summary>
            Returns the angle between two 3D vectors (a and b); 
            </summary>
            <param name="a">First vector</param>
            <param name="b">Second Vector</param>
            <returns>Angle between vectors</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Matrix3D.RotationAxis">
            <summary>
            3D Axis used for rotation
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.RotationAxis.X">
            <summary>
            Rotation around X axis.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.RotationAxis.Y">
            <summary>
            Rotation around Y axis.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Matrix3D.RotationAxis.Z">
            <summary>
            Rotation around Z axis.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.NamedImagesCollection">
            <summary>
            Collection of named images.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.NamedImagesCollection.array">
            <summary>
            Reference to ArrayList class
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.NamedImagesCollection.#ctor(Dundas.Charting.WinControl.Chart)">
            <summary>
            Constructor
            </summary>
            <param name="chart">Chart reference.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.NamedImagesCollection.#ctor">
            <summary>
            Default collecton constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.NamedImagesCollection.GetIndex(System.String)">
            <summary>
            Get image index by name.
            </summary>
            <param name="name">Name of the image.</param>
            <returns>Index of the image or -1 if it does not exist.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.NamedImagesCollection.Add(System.String,System.Drawing.Image)">
            <summary>
            Add item to the collection.
            </summary>
            <param name="name">Name of the image.</param>
            <param name="image">Image class.</param>
            <returns>New Chart Area</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.NamedImagesCollection.Add(System.Object)">
            <summary>
            Add NamedImage object into the collection
            </summary>
            <param name="value">Named Image object</param>
            <returns>The ArrayList index at which the value has been added.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.NamedImagesCollection.Insert(System.Int32,System.Object)">
            <summary>
            Insert a named image to the collection.
            </summary>
            <param name="index">Position</param>
            <param name="value">Image object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.NamedImagesCollection.CreateName(System.String)">
            <summary>
            Create Name for image.
            </summary>
            <param name="Name">Recomended Image Name</param>
            <returns>New Chart Area Name</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.NamedImagesCollection.UniqueName(System.String)">
            <summary>
            Checks whether a name is unique.
            </summary>
            <param name="name">Image name</param>
            <returns>true if a name is unique</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.NamedImagesCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index
            </summary>
            <param name="index">The zero-based index of the element to remove</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.NamedImagesCollection.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object
            </summary>
            <param name="value">The Object to remove from the ChartAreaCollection</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.NamedImagesCollection.IndexOf(System.Object)">
            <summary>
            Searches for the specified Object and returns the zero-based 
            index of the first occurrence within the entire collection.
            </summary>
            <param name="value">The Object to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.NamedImagesCollection.Contains(System.Object)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="value">The Object to locate in the collection. The element to locate can be a null reference. </param>
            <returns>true if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.NamedImagesCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.NamedImagesCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection
            </summary>
            <returns>An IEnumerator for the entire collection</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.NamedImagesCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the ArrayList or a portion of it to 
            a one-dimensional array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination 
            of the elements copied from ArrayList. The Array must have 
            zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.NamedImagesCollection.Item(System.Object)">
            <summary>
            Indexer of the class. Returns the ChartArea object
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.NamedImagesCollection.System#Collections#IList#$Item$(System.Int32)">
            <summary>
            IList interface
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.NamedImagesCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.NamedImagesCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.NamedImagesCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is 
            synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.NamedImagesCollection.Count">
            <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.NamedImagesCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.NamedImage">
            <summary>
            Image with unique name.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.NamedImage.#ctor">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.NamedImage.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Public constructor.
            </summary>
            <param name="name">Image name.</param>
            <param name="image">Image class.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.NamedImage.Name">
            <summary>
            Image name.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.NamedImage.Image">
            <summary>
            Image object.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartElementType">
            <summary>
            Chart Element Type enumeration
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElementType.Nothing">
            <summary>
            No chart element.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElementType.DataPoint">
            <summary>
            A DataPoint object.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElementType.Axis">
            <summary>
            An Axis object.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElementType.PlottingArea">
            <summary>
            Plotting area (chart area excluding axes, labels, etc.).  
            Also excludes the regions that data points may occupy.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElementType.LegendArea">
            <summary>
            The area inside a Legend object.  Does not include 
            the space occupied by legend items.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElementType.LegendItem">
            <summary>
            A LegendItem object.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElementType.GridLines">
            <summary>
            Any major or minor grid line (both vertical or horizontal).
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElementType.StripLines">
            <summary>
            A StripLine object.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElementType.TickMarks">
            <summary>
            Any major or minor tick mark.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElementType.Title">
            <summary>
            The title of a chart.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElementType.SBThumbTracker">
            <summary>
            A scrollbar tracking thumb.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElementType.SBSmallDecrement">
            <summary>
            A scrollbar small decrement button.  A "down arrow" 
            button for a vertical scrollbar, or a "left arrow" 
            button for a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElementType.SBSmallIncrement">
            <summary>
            A scrollbar small increment button.  An "up arrow" 
            button for a vertical scrollbar, or a "right arrow" 
            button for a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElementType.SBLargeDecrement">
            <summary>
            The background of a scrollbar that will result in 
            a large decrement in the view size when clicked.  
            This is the background below the thumb for 
            a vertical scrollbar, and to the left of 
            the thumb for a horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElementType.SBLargeIncrement">
            <summary>
            The background of a scrollbar that will result in 
            a large increment in the view size when clicked.  
            This is the background above the thumb for 
            a vertical scrollbar, and to the right of 
            the thumb for a horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartElementType.SBZoomReset">
            <summary>
            The ZoomReset button of a scrollbar.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.HitTestResult">
            <summary>
            This class is used as a result of hit test function
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.HitTestResult.Series">
            <summary>
            Data series object
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.HitTestResult.PointIndex">
            <summary>
            Data Point Index
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.HitTestResult.ChartArea">
            <summary>
            Chart Area object
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.HitTestResult.Axis">
            <summary>
            Axis object
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.HitTestResult.ChartElementType">
            <summary>
            Chart element type
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.HitTestResult.Object">
            <summary>
             Selected object
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Selection">
            <summary>
            This class contains methods used for Win Form selection
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Selection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Selection.IsToolTipsEnabled">
            <summary>
            Checks if tooltips are enabled
            </summary>
            <returns>true if tooltips enabled</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Selection.GetHitTestResult(System.String,System.Int32,Dundas.Charting.WinControl.ChartElementType,System.Object)">
            <summary>
            Returns Hit Test Result object
            </summary>
            <param name="seriesName">Data series Name</param>
            <param name="pointIndex">Data point index</param>
            <param name="type">Selected Chart element type</param>
            <param name="obj">Selected object</param>
            <returns>Hit test result object</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Selection.HitTest(System.Int32,System.Int32)">
            <summary>
            This method returns HitTestResult objects. This is hit test function.
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <returns>Hit test result object</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Selection.Initialize(Dundas.Charting.WinControl.Chart)">
            <summary>
            Initialize selection class.
            </summary>
            <param name="chart">Chart Object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Selection.Selection_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse move event handler.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Arguments</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Selection.ToolTipTimerEventProcessor(System.Object,System.EventArgs)">
            <summary>
            This is the method to run when the timer is raised.
            This method is used to show tool tips after a specified interval.
            </summary>
            <param name="myObject">Object not used</param>
            <param name="myEventArgs">Arguments not used</param>
        </member>
        <member name="T:Dundas.Charting.WinControl.ToolTipEventArgs">
            <summary>
            Tool Tips event arguments.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ToolTipEventArgs.#ctor(System.Int32,System.Int32,System.String,Dundas.Charting.WinControl.HitTestResult)">
            <summary>
            Creates ToolTip event arguments.
            </summary>
            <param name="x">X mouse coordinate</param>
            <param name="y">X mouse coordinate</param>
            <param name="text">Tool Tip text</param>
            <param name="result">Hit test result object</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.ToolTipEventArgs.X">
            <summary>
            Mouse X coordinate.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ToolTipEventArgs.HitTestResult">
            <summary>
            Hit Test Result Object.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ToolTipEventArgs.Y">
            <summary>
            Mouse Y coordinate.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ToolTipEventArgs.Text">
            <summary>
            The text which is going to be displayed as a Tool Tip.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.StripLinesCollection">
            <summary>
            Strips and lines collection of the axis.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLinesCollection.#ctor">
            <summary>
            Legend item collection object constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLinesCollection.#ctor(Dundas.Charting.WinControl.Axis)">
            <summary>
            Legend item collection object constructor
            </summary>
            <param name="axis">Axis object reference.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLinesCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLinesCollection.Contains(System.Object)">
            <summary>
            Check if specified object exsists in the collection.
            </summary>
            <param name="value">Object to check.</param>
            <returns>True if object exsist.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLinesCollection.IndexOf(System.Object)">
            <summary>
            Gets first index of the collection item equal to the object provided.
            </summary>
            <param name="value">Object to look for.</param>
            <returns>Index of found object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLinesCollection.Remove(System.Object)">
            <summary>
            Remove object from the collection
            </summary>
            <param name="value">Value to be removed.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLinesCollection.RemoveAt(System.Int32)">
            <summary>
            Remove item from the collection by index.
            </summary>
            <param name="index">Zero based index.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLinesCollection.Add(Dundas.Charting.WinControl.StripLine)">
            <summary>
            Add strip line object into the collection.
            </summary>
            <param name="value">Strip line to add.</param>
            <returns>Index of the newly added object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLinesCollection.Add(System.Object)">
            <summary>
            Add strip line object into the collection.
            </summary>
            <param name="value">Strip line to add.</param>
            <returns>Index of the newly added object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLinesCollection.Insert(System.Int32,Dundas.Charting.WinControl.StripLine)">
            <summary>
            Insert strip line object into the collection.
            </summary>
            <param name="index">Zero based index.</param>
            <param name="value">Strip line to insert.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLinesCollection.Insert(System.Int32,System.Object)">
            <summary>
            Insert strip line object into the collection.
            </summary>
            <param name="index">Zero based index.</param>
            <param name="value">Strip line to insert.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLinesCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the current collection to the specified one-dimensional 
            collection starting at the specified destination index.
            </summary>
            <param name="array">Destination collection.</param>
            <param name="index">The index in collection at which copying begins.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLinesCollection.GetEnumerator">
            <summary>
            Get collection enumerator.
            </summary>
            <returns>Collection enumerator.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLinesCollection.Invalidate">
            <summary>
            Invalidate chart area
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLinesCollection.Item(System.Int32)">
            <summary>
            Indexer of the class. Returns the StripLine object
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLinesCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLinesCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLinesCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLinesCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLinesCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.StripLine">
            <summary>
            Axis strip or line.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLine.#ctor">
            <summary>
            Strip line object constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLine.GetAxis">
            <summary>
            Gets axes to which this object attached to.
            </summary>
            <returns>Axis object reference.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLine.Paint(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements)">
            <summary>
            Draw strip(s) or line(s).
            </summary>
            <param name="graph">Reference to the Chart Graphics object.</param>
            <param name="common">Common objects.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLine.Paint(Dundas.Charting.WinControl.ChartGraphics,Dundas.Charting.WinControl.CommonElements,System.Boolean,System.Int32,System.Int32,System.Object@)">
            <summary>
            Draw strip(s) or line(s).
            </summary>
            <param name="graph">Reference to the Chart Graphics object.</param>
            <param name="common">Common objects.</param>
            <param name="selectionMode">Painting mode or selection mode flag.</param>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="obj">Selected object</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLine.Draw3DStrip(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Draws strip line in 3d.
            </summary>
            <param name="graph">Chart graphics.</param>
            <param name="rect">Strip rectangle.</param>
            <param name="horizontal">Indicates that strip is horisontal.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLine.PaintTitle(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draw strip/line title text
            </summary>
            <param name="graph">Chart graphics object.</param>
            <param name="point1">First line point.</param>
            <param name="point2">Second line point.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLine.PaintTitle(Dundas.Charting.WinControl.ChartGraphics,System.Drawing.RectangleF)">
            <summary>
            Draw strip/line title text
            </summary>
            <param name="graph">Chart grahics object.</param>
            <param name="rect">Rectangle to draw in.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLine.Invalidate">
            <summary>
            Invalidate chart area
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.IntervalOffset">
            <summary>
            Strip or line start position offset.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.IntervalOffsetType">
            <summary>
            Strip or line offset type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.Interval">
            <summary>
            Strip or line step size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.IntervalType">
            <summary>
            Strip or line step type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.StripWidth">
            <summary>
            Strip width.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.StripWidthType">
            <summary>
            Strip width type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.BackColor">
            <summary>
            Strip Line background color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.BorderColor">
            <summary>
            Strip Line border color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.BorderStyle">
            <summary>
            Strip Line border style
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.BorderWidth">
            <summary>
            Strip Line border width
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.BackImage">
            <summary>
            Strip Line background image
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.BackImageMode">
            <summary>
            Strip Line background image drawing mode.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.BackImageTranspColor">
            <summary>
            Background image transparent color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.BackImageAlign">
            <summary>
            Background image alignment used by ClampUnscale drawing mode.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.BackGradientType">
            <summary>
            Strip Line background gradient type.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.BackGradientEndColor">
            <summary>
            Strip Line background gradient end color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.BackHatchStyle">
            <summary>
            Strip Line hatch style
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.Name">
            <summary>
            Strip Line name
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.Title">
            <summary>
            Strip Line title
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.TitleColor">
            <summary>
            Strip Line title color
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.TitleAlignment">
            <summary>
            Strip Line title alignment
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.TitleLineAlignment">
            <summary>
            Strip Line title lines alignment
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.TitleFont">
            <summary>
            Strip Lines title font
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.TitleAngle">
            <summary>
            Strip Lines title angle. Can be set to 0, 90, 180 or 270 degrees.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.ToolTip">
            <summary>
            Tooltip of the Strip/Line.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.Href">
            <summary>
            URL target of the Strip/Line.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.StripLine.MapAreaAttributes">
            <summary>
            Other attributes of the Strip/Line map area.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLine.StripLineConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            This method overrides CanConvertTo from TypeConverter. This is called when someone
            wants to convert an instance of object to another type.  Here,
            only conversion to an InstanceDescriptor is supported.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="destinationType">Destination type.</param>
            <returns>True if object can be converted.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.StripLine.StripLineConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            This code performs the actual conversion from an object to an InstanceDescriptor.
            </summary>
            <param name="context">Descriptor context.</param>
            <param name="culture">Culture information.</param>
            <param name="value">Object value.</param>
            <param name="destinationType">Destination type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.ChartColorPalette">
            <summary>
            Chart color palettes enumeration
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartColorPalette.None">
            <summary>
            Palette not set.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartColorPalette.Default">
            <summary>
            Default palette.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartColorPalette.GrayScale">
            <summary>
            Palette with gray scale colors.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartColorPalette.Excel">
            <summary>
            Palette with Excel style colors.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartColorPalette.Light">
            <summary>
            Palette with Light style colors.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartColorPalette.Pastel">
            <summary>
            Palette with Pastel style colors.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartColorPalette.EarthTones">
            <summary>
            Palette with Earth Tones style colors.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.ChartColorPalette.SemiTransparent">
            <summary>
            Palette with Semi Transparent style colors.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Utilities.ChartColors">
            <summary>
            ChartColors class give access to the palettes colors
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.ChartColors.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.ChartColors.GetPaletteColors(Dundas.Charting.WinControl.ChartColorPalette)">
            <summary>
            Ruturn array of colors for the specified palette.
            </summary>
            <param name="palette">Palette.</param>
            <returns>Array of colors.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.ElementPosition">
            <summary>
            Stores chart element position in percentage.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ElementPosition.#ctor">
            <summary>
            Element position default constructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.ElementPosition.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Element position constructor.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ElementPosition.ToRectangleF">
            <summary>
            Convert element position into RectangleF
            </summary>
            <returns>RectangleF structure.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ElementPosition.FromRectangleF(System.Drawing.RectangleF)">
            <summary>
            Initialize element position from RectangleF
            </summary>
            <param name="rect">Rectangle class.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ElementPosition.GetSize">
            <summary>
            Gets position size.
            </summary>
            <returns>Position size.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ElementPosition.Bottom">
            <summary>
            Gets bottom position in relative coordinates.
            </summary>
            <returns>Bottom position.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ElementPosition.Right">
            <summary>
            Gets right position in relative coordinates.
            </summary>
            <returns>Right position.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ElementPosition.Equals(System.Object)">
            <summary>
            Determines whether two element positions are equal.
            </summary>
            <param name="obj">Element position to test with</param>
            <returns>True if positions are equal</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ElementPosition.GetHashCode">
            <summary>
            Hash function of the element position.
            </summary>
            <returns>A hash code for the object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ElementPosition.ToString">
            <summary>
            Returns string that represent element position.
            </summary>
            <returns>Element position data as string.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.ElementPosition.SetPositionNoAuto(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set element position without modifying the "Auto" property
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.ElementPosition.Invalidate">
            <summary>
            Invalidate chart when element position changed
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ElementPosition.X">
            <summary>
            Element X position
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ElementPosition.Y">
            <summary>
            Element Y position
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ElementPosition.Width">
            <summary>
            Element width
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ElementPosition.Height">
            <summary>
            Element height
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.ElementPosition.Auto">
            <summary>
            Auto positionong flag
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Utilities.ImageLoader">
            <summary>
            Loads images from files and Urls. Loaded images are stored in cache for future use.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.ImageLoader.#ctor">
            <summary>
            Default constructor is not accessible.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.ImageLoader.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Default public constructor.
            </summary>
            <param name="container">Service container.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.ImageLoader.GetService(System.Type)">
            <summary>
            Returns Image Loader service object
            </summary>
            <param name="serviceType">Requested service type.</param>
            <returns>Image Loader service object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.ImageLoader.Dispose">
            <summary>
            Dispose images in the hashtable
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.ImageLoader.LoadImage(System.String)">
            <summary>
            Loads image from URL. Checks if image already loaded (cached).
            </summary>
            <param name="imageURL">Image URL name.</param>
            <returns>Image object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.ImageLoader.LoadImage(System.String,System.Boolean)">
            <summary>
            Loads image from URL. Checks if image already loaded (cached).
            </summary>
            <param name="imageURL">Image URL name</param>
            <param name="saveImage">True if loaded image should be saved in cache</param>
            <returns>Image object</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.ImageLoader.LoadFromFile(System.String)">
            <summary>
            Helper function which loads image from file.
            </summary>
            <param name="fileName">File name.</param>
            <returns>Loaded image or null.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Utilities.ProductKeyEncoder">
            <summary>
            License encryptor/decryptor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.ProductKeyEncoder.BytesToString(System.Byte[])">
            <summary>
            Helper function which converts bytes array into string.
            </summary>
            <param name="bytes">Array of bytes.</param>
            <returns>Result string.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.ProductKeyEncoder.StringToBytes(System.String)">
            <summary>
            Helper function which converts string into bytes array.
            </summary>
            <param name="str">Source string.</param>
            <returns>Result array of bytes.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.ProductKeyEncoder.EncryptLicenseKey(System.String)">
            <summary>
            Encrypts License Key.
            </summary>
            <param name="key">Key to encrypt.</param>
            <returns>Encrypted key.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.ProductKeyEncoder.DecryptLicenseKey(System.String)">
            <summary>
            Decrypts License Key.
            </summary>
            <param name="key">Encrypted key.</param>
            <returns>Decrypted key.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Utilities.PrintingManager">
            <summary>
            Chart printing class.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.PrintingManager.#ctor">
            <summary>
            Public constructor is unavailable
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.PrintingManager.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Public constructor
            </summary>
            <param name="container">Service container reference.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.PrintingManager.GetService(System.Type)">
            <summary>
            Returns Printing Manager service object
            </summary>
            <param name="serviceType">Requested service type.</param>
            <returns>Printing Manager sevice object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.PrintingManager.PrintPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws chart on the printer graphics.
            </summary>
            <param name="g">Printer graphics.</param>
            <param name="position">Position to draw in the graphics.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.PrintingManager.PageSetup">
            <summary>
            Shows Page Setup dialog.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.PrintingManager.PrintPreview">
            <summary>
            Print preview the chart.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.PrintingManager.Print(System.Boolean)">
            <summary>
            Prints chart.
            </summary>
            <param name="showPrintDialog">Indicates if printing dialog should be shown.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.PrintingManager.pd_PrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Handles PrintPage event of the document.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="ev">Event parameters.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.Utilities.PrintingManager.PrintDocument">
            <summary>
            Chart printing document.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Utilities.ValueConverter">
            <summary>
            Value to string converter class
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.ValueConverter.FormatValue(System.Double,System.String,Dundas.Charting.WinControl.ChartValueTypes)">
            <summary>
            Converts value to string using specified format.
            </summary>
            <param name="value">Value converted to string,</param>
            <param name="format">Format string.</param>
            <param name="valueType">Value type.</param>
        </member>
        <member name="T:Dundas.Charting.WinControl.Utilities.SerializationVisibility">
            <summary>
            Enumeration which describes how to persist property during the serialization
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Utilities.SerializationVisibility.Hidden">
            <summary>
            Do not serialize
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Utilities.SerializationVisibility.Attribute">
            <summary>
            Serialize as XML attribute
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Utilities.SerializationVisibility.Element">
            <summary>
            Serialize as XML element
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Utilities.SerializationVisibilityAttribute">
            <summary>
            Attribute which describes how to persist property during the serialization
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializationVisibilityAttribute.#ctor(Dundas.Charting.WinControl.Utilities.SerializationVisibility)">
            <summary>
            Public constructor
            </summary>
            <param name="visibility">Serialization visibility.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.Utilities.SerializationVisibilityAttribute.Visibility">
            <summary>
            Serialization visibility property
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Utilities.SerializerBase">
            <summary>
            Base class of the serializers. Common properties and methods for all serializers.
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Utilities.SerializerBase.ignoreUnknown">
            <summary>
            Indicates that unknown attributes and elements are ignored
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Utilities.SerializerBase.resetWhenLoading">
            <summary>
            Indicates that object properties are reset before loading
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Utilities.SerializerBase.serializableContent">
            <summary>
            Comma separated list of serializable (Save/Load/Reset) properties. "ClassName.PropertyName"
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Utilities.SerializerBase.nonSerializableContent">
            <summary>
            Comma separated list of NON serializable (Save/Load/Reset) properties. "ClassName.PropertyName"
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Utilities.SerializerBase.fontConverter">
            <summary>
            Font converters used while serializing/deserializing 
            </summary>
        </member>
        <member name="F:Dundas.Charting.WinControl.Utilities.SerializerBase.colorConverter">
            <summary>
            Color converters used while serializing/deserializing 
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializerBase.ResetObjectProperties(System.Object)">
            <summary>
            Reset properties of the object to default values.
            </summary>
            <param name="objectToReset">Object to be reset.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializerBase.ResetObjectProperties(System.Object,System.Object,System.String)">
            <summary>
            Reset properties of the object to default values.
            Method is called recursively to reset child objects properties.
            </summary>
            <param name="objectToReset">Object to be reset.</param>
            <param name="parent">Parent of the reset object.</param>
            <param name="elementName">Object element name.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializerBase.Serialize(System.Object,System.Object)">
            <summary>
            Serialize specified object into the destination object.
            </summary>
            <param name="objectToSerialize">Object to be serialized.</param>
            <param name="destination">Destination of the serialization.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializerBase.Deserialize(System.Object,System.Object)">
            <summary>
            Deserialize specified object from the source object.
            </summary>
            <param name="objectToDeserialize">Object to be deserialized.</param>
            <param name="source">Source of the deserialization.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializerBase.IsChartBaseProperty(System.Object,System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Checks if property belongs to the base class of the chart "Control".
            </summary>
            <param name="objectToSerialize">Serializable object.</param>
            <param name="parent">Object parent.</param>
            <param name="pi">Serializable property information.</param>
            <returns>True if property belongs to the base class.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializerBase.ImageToString(System.Drawing.Image)">
            <summary>
            Converts Image object into the BASE64 encoded string
            </summary>
            <param name="image">Image to convert.</param>
            <returns>BASE64 encoded image data.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializerBase.ImageFromString(System.String)">
            <summary>
            Converts BASE64 encoded string to image.
            </summary>
            <param name="data">BASE64 encoded data.</param>
            <returns>Image.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializerBase.GetObjectName(System.Object)">
            <summary>
            Get the name of the object class
            </summary>
            <param name="obj">Object to get the name of.</param>
            <returns>Name of the object class (without namespace).</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializerBase.GetListNewItem(System.Collections.IList,System.String@)">
            <summary>
            Create new empty item for the list.
            Type of the objects is determined by the return type of the indexer.
            </summary>
            <param name="list">List used to detect type of the item objects.</param>
            <param name="itemName">Optional item name to return.</param>
            <returns>New list item object.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializerBase.ShouldSerializeAsAttribute(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Returns true if the object property should be serialized as 
            parent element attribute. Otherwize as a child element.
            </summary>
            <param name="pi">Property information.</param>
            <param name="parent">Object that the property belongs to.</param>
            <returns>True if property should be serialized as attribute.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializerBase.IsSerializableContent(System.String,System.Object)">
            <summary>
            Returns true if the object property is serializable.
            </summary>
            <param name="propertyName">Property name.</param>
            <param name="parent">Object that the property belongs to.</param>
            <returns>True if property is serializable.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializerBase.IsPropertyInList(System.Collections.ArrayList,System.String,System.String,System.Int32@,System.Int32@)">
            <summary>
            Checks if propety belongs is defined in the mask list.
            </summary>
            <param name="contentList">Array list of class/property items.</param>
            <param name="className">Class name.</param>
            <param name="propertyName">Property name.</param>
            <param name="classFitType">Return class mask fit type.</param>
            <param name="propertyFitType">Return property mask fit type.</param>
            <returns>True if property was found in the list.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializerBase.NameMatchMask(Dundas.Charting.WinControl.Utilities.SerializerBase.ItemInfo,System.String,System.Int32@)">
            <summary>
            Compares class/property name with the specifed mask
            </summary>
            <param name="itemInfo">Class/Property item information.</param>
            <param name="objectName">Class/Property name.</param>
            <param name="type">Type of matching. 0-No Match; 1-'*' any wild card; 2-'Back*' contain wild card; 3-exact match</param>
            <returns>True if name match the mask.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializerBase.GetSerializableContentList">
            <summary>
            Return serializable content list.
            </summary>
            <returns>Serializable content list.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializerBase.GetNonSerializableContentList">
            <summary>
            Return non serializable content list.
            </summary>
            <returns>Non serializable content list.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializerBase.FillContentList(System.Collections.ArrayList,System.String)">
            <summary>
            Fill content list from the string.
            </summary>
            <param name="list">Array list class.</param>
            <param name="content">Content string.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.SerializerBase.CheckWildCars(Dundas.Charting.WinControl.Utilities.SerializerBase.ItemInfo)">
            <summary>
            Checks wildcards in the name of the item.
            Possible values:
            	"*"
            	"*Name"
            	"Name*"
            </summary>
            <param name="info">Item information class.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.Utilities.SerializerBase.IgnoreUnknownAttributes">
            <summary>
            Indicates that unknown attributes and elements will be 
            ignored without throwing an exception.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Utilities.SerializerBase.ResetWhenLoading">
            <summary>
            Indicates that object properties are reset to default
            values before loading.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Utilities.SerializerBase.SerializableContent">
            <summary>
            Comma separated list of serializable (Save/Load/Reset) properties. 
            "ClassName.PropertyName,[ClassName.PropertyName]".
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Utilities.SerializerBase.NonSerializableContent">
            <summary>
            Comma separated list of serializable (Save/Load/Reset) properties. 
            "ClassName.PropertyName,[ClassName.PropertyName]".
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Utilities.SerializerBase.ItemInfo">
            <summary>
            Stores information about content item (class or property)
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer">
            <summary>
            Utility class which serialize object using XML format
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serialize specified object into the stream.
            </summary>
            <param name="objectToSerialize">Object to be serialized.</param>
            <param name="stream">The stream used to write the XML document.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer.Serialize(System.Object,System.Xml.XmlWriter)">
            <summary>
            Serialize specified object into the XML writer.
            </summary>
            <param name="objectToSerialize">Object to be serialized.</param>
            <param name="xmlWriter">The XmlWriter used to write the XML document.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer.Serialize(System.Object,System.IO.TextWriter)">
            <summary>
            Serialize specified object into the text writer.
            </summary>
            <param name="objectToSerialize">Object to be serialized.</param>
            <param name="textWriter">The TextWriter used to write the XML document.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer.Serialize(System.Object,System.String)">
            <summary>
            Serialize specified object into the file.
            </summary>
            <param name="objectToSerialize">Object to be serialized.</param>
            <param name="fileName">The file name used to write the XML document.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer.Serialize(System.Object,System.Object)">
            <summary>
            Serialize specified object into different types of writers using XML format.
            Here is what is serialized in the object:
             - all public properties with Set and Get methods
             - all public properties with Get method which derived from ICollection
            </summary>
            <param name="objectToSerialize">Object to be serialized.</param>
            <param name="writer">Defines the serialization destination. Can be Stream, TextWriter, XmlWriter or String (file name).</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer.SerializeObject(System.Object,System.Object,System.String,System.Xml.XmlNode,System.Xml.XmlDocument)">
            <summary>
            Serialize specified object into the XML format.
            Method is called recursively to serialize child objects.
            </summary>
            <param name="objectToSerialize">Object to be serialized.</param>
            <param name="parent">Parent of the serialized object.</param>
            <param name="elementName">Object element name.</param>
            <param name="xmlParentNode">The XmlNode of the parent object to serialize the data in.</param>
            <param name="xmlDocument">The XmlDocument the parent node belongs to.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer.SerializeCollection(System.Object,System.String,System.Xml.XmlNode,System.Xml.XmlDocument)">
            <summary>
            Serialize specified object into the XML text writer.
            Method is called recursively to serialize child objects.
            </summary>
            <param name="objectToSerialize">Object to be serialized.</param>
            <param name="elementName">Object element name.</param>
            <param name="xmlParentNode">The XmlNode of the parent object to serialize the data in.</param>
            <param name="xmlDocument">The XmlDocument the parent node belongs to.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer.SerializeProperty(System.Object,System.Object,System.String,System.Xml.XmlNode,System.Xml.XmlDocument)">
            <summary>
            Serialize specified object into the XML text writer.
            Method is called recursively to serialize child objects.
            </summary>
            <param name="objectToSerialize">Object to be serialized.</param>
            <param name="parent">Parent of the serialized object.</param>
            <param name="elementName">Object element name.</param>
            <param name="xmlParentNode">The XmlNode of the parent object to serialize the data in.</param>
            <param name="xmlDocument">The XmlDocument the parent node belongs to.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer.GetXmlValue(System.Object,System.Object,System.String)">
            <summary>
            Converts object value into the string.
            </summary>
            <param name="obj">Object to convert.</param>
            <param name="parent">Object parent.</param>
            <param name="elementName">Object name.</param>
            <returns>Object value as strig.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer.RemoveEmptyChildNodes(System.Xml.XmlNode)">
            <summary>
            Removes all empty nodes from the XML document.
            Method is called recursively to remove empty child nodes first.
            </summary>
            <param name="xmlNode">The node where to start the removing.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer.Deserialize(System.Object,System.IO.Stream)">
            <summary>
            Deserialize specified object from the stream.
            </summary>
            <param name="objectToDeserialize">Object to be deserialized.</param>
            <param name="stream">The stream used to read the XML document from.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer.Deserialize(System.Object,System.Xml.XmlReader)">
            <summary>
            Deserialize specified object from the XML reader.
            </summary>
            <param name="objectToDeserialize">Object to be deserialized.</param>
            <param name="xmlReader">The XmlReader used to read the XML document from.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer.Deserialize(System.Object,System.IO.TextReader)">
            <summary>
            Deserialize specified object from the text reader.
            </summary>
            <param name="objectToDeserialize">Object to be deserialized.</param>
            <param name="textReader">The TextReader used to write the XML document from.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer.Deserialize(System.Object,System.String)">
            <summary>
            Deserialize specified object from the file.
            </summary>
            <param name="objectToDeserialize">Object to be deserialized.</param>
            <param name="fileName">The file name used to read the XML document from.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer.Deserialize(System.Object,System.Object)">
            <summary>
            Deerialize object from different types of readers using XML format.
            </summary>
            <param name="objectToDeserialize">Object to be deserialized.</param>
            <param name="reader">Defines the deserialization data source. Can be Stream, TextReader, XmlReader or String (file name).</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer.DeserializeObject(System.Object,System.Object,System.String,System.Xml.XmlNode,System.Xml.XmlDocument)">
            <summary>
            Deserialize object from the XML format.
            Method is called recursively to deserialize child objects.
            </summary>
            <param name="objectToDeserialize">Object to be deserialized.</param>
            <param name="parent">Parent of the deserialized object.</param>
            <param name="elementName">Object element name.</param>
            <param name="xmlParentNode">The XmlNode of the parent object to deserialize the data from.</param>
            <param name="xmlDocument">The XmlDocument the parent node belongs to.</param>
            <returns>Number of properties set.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.XmlFormatSerializer.SetXmlValue(System.Object,System.String,System.String)">
            <summary>
            Sets a property of an object using name and vallue as string.
            </summary>
            <param name="obj">Object to set.</param>
            <param name="attrName">Attribute (property) name.</param>
            <param name="attrValue">Object value..</param>
            <returns>Object value as strig.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Utilities.BinaryFormatSerializer">
            <summary>
            Utility class which serialize object using binary format
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.BinaryFormatSerializer.Serialize(System.Object,System.Object)">
            <summary>
            Serialize specified object into the destination using binary format.
            </summary>
            <param name="objectToSerialize">Object to be serialized.</param>
            <param name="destination">Serialization destination.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.BinaryFormatSerializer.Serialize(System.Object,System.String)">
            <summary>
            Serialize specified object into the file using binary format.
            </summary>
            <param name="objectToSerialize">Object to be serialized.</param>
            <param name="fileName">File name to serialize the data in.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.BinaryFormatSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serialize specified object into the stream using binary format.
            </summary>
            <param name="objectToSerialize">Object to be serialized.</param>
            <param name="stream">Defines the serialization destination.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.BinaryFormatSerializer.Serialize(System.Object,System.IO.BinaryWriter)">
            <summary>
            Serialize specified object into different types of writers using binary format.
            Here is what is serialized in the object:
             - all public properties with Set and Get methods
             - all public properties with Get method which derived from ICollection
            </summary>
            <param name="objectToSerialize">Object to be serialized.</param>
            <param name="writer">Defines the serialization destination.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.BinaryFormatSerializer.SerializeObject(System.Object,System.Object,System.String,System.IO.BinaryWriter)">
            <summary>
            Serialize specified object into the binary format.
            Method is called recursively to serialize child objects.
            </summary>
            <param name="objectToSerialize">Object to be serialized.</param>
            <param name="parent">Parent of the serialized object.</param>
            <param name="elementName">Object element name.</param>
            <param name="writer">Binary writer object.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.BinaryFormatSerializer.SerializeCollection(System.Object,System.String,System.IO.BinaryWriter)">
            <summary>
            Serialize specified object into the binary writer.
            Method is called recursively to serialize child objects.
            </summary>
            <param name="objectToSerialize">Object to be serialized.</param>
            <param name="elementName">Object element name.</param>
            <param name="writer">Binary writer.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.BinaryFormatSerializer.SerializeProperty(System.Object,System.Object,System.String,System.IO.BinaryWriter)">
            <summary>
            Serialize specified object into the binary writer.
            Method is called recursively to serialize child objects.
            </summary>
            <param name="objectToSerialize">Object to be serialized.</param>
            <param name="parent">Parent of the serialized object.</param>
            <param name="elementName">Object element name.</param>
            <param name="writer">Binary writer.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.BinaryFormatSerializer.WritePropertyValue(System.Object,System.Object,System.String,System.IO.BinaryWriter)">
            <summary>
            Converts object value into the string.
            </summary>
            <param name="obj">Object to convert.</param>
            <param name="parent">Object parent.</param>
            <param name="elementName">Object name.</param>
            <param name="writer">Binary writer.</param>
            <returns>Object value as strig.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.BinaryFormatSerializer.CheckPropertiesID(System.Collections.ArrayList)">
            <summary>
            Checks if all properties will have a unique ID.
            Property ID is a hash of it's name.
            !!!USED IN DEBUG BUILD ONLY!!!
            </summary>
            <param name="propNames">Array of properties names.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.BinaryFormatSerializer.Deserialize(System.Object,System.Object)">
            <summary>
            Deserialize specified object from the source using binary format.
            </summary>
            <param name="objectToDeserialize">Object to be deserialized.</param>
            <param name="source">Deserialization source.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.BinaryFormatSerializer.Deserialize(System.Object,System.String)">
            <summary>
            Deserialize object from the file using binary format.
            </summary>
            <param name="objectToDeserialize">Object to be deserialized.</param>
            <param name="fileName">File name to read the data from.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.BinaryFormatSerializer.Deserialize(System.Object,System.IO.Stream)">
            <summary>
            Deserialize object from the stream using binary format.
            </summary>
            <param name="objectToDeserialize">Object to be deserialized.</param>
            <param name="stream">Stream to read the data from.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.BinaryFormatSerializer.Deserialize(System.Object,System.IO.BinaryReader)">
            <summary>
            Deserialize object from different types of readers using binary format.
            </summary>
            <param name="objectToDeserialize">Object to be deserialized.</param>
            <param name="reader">Binary reader.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.BinaryFormatSerializer.DeserializeObject(System.Object,System.Object,System.String,System.IO.BinaryReader)">
            <summary>
            Deserialize object from the XML format.
            Method is called recursively to deserialize child objects.
            </summary>
            <param name="objectToDeserialize">Object to be deserialized.</param>
            <param name="parent">Parent of the deserialized object.</param>
            <param name="elementName">Object element name.</param>
            <param name="reader">Binary reader object.</param>
            <returns>Number of properties set.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.BinaryFormatSerializer.SetPropertyValue(System.Object,System.Reflection.PropertyInfo,System.IO.BinaryReader)">
            <summary>
            Reads and sets a property of an object.
            </summary>
            <param name="obj">Object to set.</param>
            <param name="pi">Property information.</param>
            <param name="reader">Binary reader.</param>
            <returns>True if property was set.</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Utilities.BinaryFormatSerializer.ReadPropertyInfo(System.Object,System.Object,System.Reflection.PropertyInfo[],System.IO.BinaryReader)">
            <summary>
            Reads property ID and return property information
            </summary>
            <param name="objectToDeserialize">Object to be deserialized.</param>
            <param name="parent">Parent of the deserialized object.</param>
            <param name="properties">List of properties information.</param>
            <param name="reader">Binary reader.</param>
            <returns>Property information.</returns>
        </member>
        <member name="T:Dundas.Charting.WinControl.Chart">
            <summary>
            Dundas Chart windows forms control
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.#ctor">
            <summary>
            Chart control constructor.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.Finalize">
            <summary>
            Control destructor
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.Dispose(System.Boolean)">
            <summary>
            Disposing control resourses
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint chart control.
            </summary>
            <param name="e">Paint event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints control background.
            </summary>
            <param name="pevent">Event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.DrawException(System.Drawing.Graphics,System.Exception)">
            <summary>
            Draws exception information at design-time.
            </summary>
            <param name="graphics">Chart graphics to use.</param>
            <param name="e">Exception information.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.Invalidate">
            <summary>
            Invalidates a specific region of the control and causes a paint message to be sent to the control.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.UpdateCursor">
            <summary>
            Updates chart cursor and range selection only.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.OnLocationChanged(System.EventArgs)">
            <summary>
            Control location changed.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.OnResize(System.EventArgs)">
            <summary>
            Control resized.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.SaveAsImage(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Saves chart image into the file.
            </summary>
            <param name="imageFileName">Image file name</param>
            <param name="format">Image format.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.SaveAsImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Saves chart image into the stream.
            </summary>
            <param name="imageStream">Image stream.</param>
            <param name="format">Image format.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.ResetAutoValues">
            <summary>
            Reset auto calculated chart properties values to "Auto".
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.HitTest(System.Int32,System.Int32)">
            <summary>
            This method is used for selection and it returns a selected object 
            from x and y coordinates.
            </summary>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
            <returns>Selected object</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse button pressed in the control.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse button up in the control.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse moved in the control.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.LoadSmartClientData">
            <summary>
            Loads smart client data from the source specified.
            </summary>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.IsToolTipEventUsed">
            <summary>
            Checks if GetToolTipEvent is used
            </summary>
            <returns>True if event is used</returns>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.OnGetToolTipText(Dundas.Charting.WinControl.ToolTipEventArgs)">
            <summary>
            Calls event delegate.
            </summary>
            <param name="arguments">Cursor event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.OnCursorPositionChanging(Dundas.Charting.WinControl.CursorEventArgs)">
            <summary>
            Calls event delegate.
            </summary>
            <param name="arguments">Cursor event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.OnCursorPositionChanged(Dundas.Charting.WinControl.CursorEventArgs)">
            <summary>
            Calls event delegate.
            </summary>
            <param name="arguments">Cursor event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.OnSelectionRangeChanging(Dundas.Charting.WinControl.CursorEventArgs)">
            <summary>
            Calls event delegate.
            </summary>
            <param name="arguments">Cursor event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.OnSelectionRangeChanged(Dundas.Charting.WinControl.CursorEventArgs)">
            <summary>
            Calls event delegate.
            </summary>
            <param name="arguments">Cursor event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.OnAxisViewChanging(Dundas.Charting.WinControl.ViewEventArgs)">
            <summary>
            Calls event delegate.
            </summary>
            <param name="arguments">Axis view event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.OnAxisViewChanged(Dundas.Charting.WinControl.ViewEventArgs)">
            <summary>
            Calls event delegate.
            </summary>
            <param name="arguments">Axis view event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.OnAxisScrollBarClicked(Dundas.Charting.WinControl.ScrollBarEventArgs)">
            <summary>
            Calls event delegate.
            </summary>
            <param name="arguments">Axis scroll bar event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.OnBackPaint(System.Object,Dundas.Charting.WinControl.ChartPaintEventArgs)">
            <summary>
            Fires when chart element backround must be drawn. 
            This event is fired for elements like: ChartPicture, ChartArea and Legend
            </summary>
            <param name="caller">Event caller. Can be ChartPicture, ChartArea or Legend objects.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Dundas.Charting.WinControl.Chart.OnPaint(System.Object,Dundas.Charting.WinControl.ChartPaintEventArgs)">
            <summary>
            Fires when chart element must be drawn. 
            This event is fired for elements like: ChartPicture, ChartArea and Legend
            </summary>
            <param name="caller">Event caller. Can be ChartPicture, ChartArea or Legend objects.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.DefaultSize">
            <summary>
            Returns default control size.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.Images">
            <summary>
            Chart named images collection.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.Printing">
            <summary>
            Chart printing object.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.Series">
            <summary>
            Chart series collection.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.BackgroundImage">
            <summary>
            BackgroundImage is not used. Use BackImage property instead.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.Palette">
            <summary>
            Color palette to use
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.AntiAliasing">
            <summary>
            Specifies whether smoothing (antialiasing) is applied while drawing chart.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.SoftShadows">
            <summary>
            Specifies whether smoothing is applied while drawing shadows.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.ChartAreas">
            <summary>
            Reference to chart area collection
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.BackColor">
            <summary>
            Back ground color for the Chart
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.ForeColor">
            <summary>
            Fore color propery (not used)
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.UnusedColor">
            <summary>
            Color that will not be used in the chart drawing.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.Size">
            <summary>
            Fore color propery (not used)
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.Legend">
            <summary>
            Reference to the legend object
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.DataManipulator">
            <summary>
            Series data manipulator
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.Serializer">
            <summary>
            Chart serializer object.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.Title">
            <summary>
            Chart title
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.TitleFontColor">
            <summary>
            Font color of the title
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.TitleFont">
            <summary>
            Title font
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.BackHatchStyle">
            <summary>
            Back Hatch style
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.BackImage">
            <summary>
            Chart area background image
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.BackImageMode">
            <summary>
            Chart area background image drawing mode.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.BackImageTranspColor">
            <summary>
            Background image transparent color.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.BackImageAlign">
            <summary>
            Background image alignment used by ClampUnscale drawing mode.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.BackGradientType">
            <summary>
            A type for the background gradient
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.BackGradientEndColor">
            <summary>
            The second color which is used for a gradient
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.BorderColor">
            <summary>
            Border color for the Chart
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.BorderWidth">
            <summary>
            The width of the border line
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.BorderStyle">
            <summary>
            The style of the border line
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.BorderLineColor">
            <summary>
            Border color for the Chart
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.BorderLineWidth">
            <summary>
            The width of the border line
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.BorderLineStyle">
            <summary>
            The style of the border line
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.BorderSkin">
            <summary>
            Chart border skin style.
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.BuildNumber">
            <summary>
            Build number of the control
            </summary>
        </member>
        <member name="P:Dundas.Charting.WinControl.Chart.ChartData">
            <summary>
            Link to the chart data storage.
            </summary>
        </member>
        <member name="E:Dundas.Charting.WinControl.Chart.GetToolTipText">
            <summary>
            Called before showing the tooltip to get the tooltip text.
            </summary>
        </member>
        <member name="E:Dundas.Charting.WinControl.Chart.CursorPositionChanging">
            <summary>
            Called when cursor position is about to change.
            </summary>
        </member>
        <member name="E:Dundas.Charting.WinControl.Chart.CursorPositionChanged">
            <summary>
            Called when cursor position is changed.
            </summary>
        </member>
        <member name="E:Dundas.Charting.WinControl.Chart.SelectionRangeChanging">
            <summary>
            Called when selection start/end position is about to change.
            </summary>
        </member>
        <member name="E:Dundas.Charting.WinControl.Chart.SelectionRangeChanged">
            <summary>
            Called when selection start/end position is changed.
            </summary>
        </member>
        <member name="E:Dundas.Charting.WinControl.Chart.AxisViewChanging">
            <summary>
            Called when axis view position/size is about to change.
            </summary>
        </member>
        <member name="E:Dundas.Charting.WinControl.Chart.AxisViewChanged">
            <summary>
            Called when axis view position/size is changed.
            </summary>
        </member>
        <member name="E:Dundas.Charting.WinControl.Chart.AxisScrollBarClicked">
            <summary>
            Called when axis scroll bar is used by user.
            </summary>
        </member>
        <member name="E:Dundas.Charting.WinControl.Chart.PostPaint">
            <summary>
            Called when chart element is painted.
            </summary>
        </member>
        <member name="E:Dundas.Charting.WinControl.Chart.PrePaint">
            <summary>
            Called when chart element back ground is painted.
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Chart.ToolTipEventHandler">
            <summary>
            ToolTip event handler delegate
            </summary>
        </member>
        <member name="T:Dundas.Charting.WinControl.Chart.CursorEventHandler">
            <summary>
            Cursor event handler delegate
            </summary>
        </member>
    </members>
</doc>
